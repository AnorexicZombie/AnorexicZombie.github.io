{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"themes\\fluid\\source\\css\\gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"themes\\fluid\\source\\css\\highlight-dark.styl","path":"css/highlight-dark.styl","modified":0,"renderable":1},{"_id":"themes\\fluid\\source\\css\\highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes\\fluid\\source\\css\\main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes\\fluid\\source\\img\\avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes\\fluid\\source\\img\\default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"themes\\fluid\\source\\img\\fluid.png","path":"img/fluid.png","modified":0,"renderable":1},{"_id":"themes\\fluid\\source\\img\\loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes\\fluid\\source\\img\\police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"themes\\fluid\\source\\js\\boot.js","path":"js/boot.js","modified":0,"renderable":1},{"_id":"themes\\fluid\\source\\js\\color-schema.js","path":"js/color-schema.js","modified":0,"renderable":1},{"_id":"themes\\fluid\\source\\js\\events.js","path":"js/events.js","modified":0,"renderable":1},{"_id":"themes\\fluid\\source\\js\\img-lazyload.js","path":"js/img-lazyload.js","modified":0,"renderable":1},{"_id":"themes\\fluid\\source\\js\\leancloud.js","path":"js/leancloud.js","modified":0,"renderable":1},{"_id":"themes\\fluid\\source\\js\\local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes\\fluid\\source\\js\\plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"themes\\fluid\\source\\js\\utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes\\fluid\\source\\xml\\local-search.xml","path":"xml/local-search.xml","modified":0,"renderable":1}],"Cache":[{"_id":"source\\_posts\\测试文章.md","hash":"06e232d251fce21ced218d6204c59865868156cb","modified":1718516157960},{"_id":"source\\about\\index.md","hash":"ab346442a060c86cb7488f56c20dfa56f3309115","modified":1718516742430},{"_id":"source\\_posts\\issues\\16eea8822b4d1239.jpg","hash":"4df0f5d5940fbe52ec3786a71295dbfac926c4af","modified":1715583343000},{"_id":"source\\_posts\\issues\\20201116121851148.png","hash":"122c2aae36678794b867ea4b0129ae92d36b0497","modified":1715583343000},{"_id":"source\\_posts\\issues\\BOM.png","hash":"2bb7c5ac8767a52751be258aaf32e9bb625a759b","modified":1715583343000},{"_id":"source\\_posts\\issues\\HTTP报文结构.jpg","hash":"ece53674c9578b372abb5e3256d3e50b37604dd8","modified":1715583343000},{"_id":"source\\_posts\\issues\\cookie session.jpg","hash":"facee7cbea009505b5e0a586a760093ed043eeb5","modified":1715583343000},{"_id":"source\\_posts\\issues\\flux.png","hash":"7f1951c7089f2474cdaab8932d0b4d43713f1111","modified":1715583343000},{"_id":"source\\_posts\\issues\\https-intro.png","hash":"14850fa8463ff0892e5258b5884b4e92cb66f481","modified":1715583343000},{"_id":"source\\_posts\\issues\\https.jpg","hash":"14a5c789dd5dd221f811fa48cf9a90ec3f7c92e6","modified":1715583343000},{"_id":"source\\_posts\\issues\\mvc_model.png","hash":"690dc692450c9346d9001bde7a591bf5ba6afa04","modified":1715583343000},{"_id":"source\\_posts\\issues\\mvvm_model.png","hash":"c96a7dc11e91fc8f55fe78cf9f6b0e2852d6f275","modified":1715583343000},{"_id":"source\\_posts\\issues\\react fiber 1.webp","hash":"b0a2e01d8091617f1402dfc72101fd8798ec0f58","modified":1715583343000},{"_id":"source\\_posts\\issues\\proto.png","hash":"a1289dd21f5300fd8ab2558cda837f492993bac0","modified":1715583343000},{"_id":"source\\_posts\\issues\\react fiber 2.webp","hash":"820c4a1c10515a76ea95c6fd2518741997b66af6","modified":1715583343000},{"_id":"source\\_posts\\issues\\tcp三次握手.jpg","hash":"3f1d09e76b2bf32435c1ed61ea23447e111c0a67","modified":1715583343000},{"_id":"source\\_posts\\issues\\tcp四次挥手.png","hash":"4693018f89c8091f8503dc2ad032820fda4dfbd9","modified":1715583343000},{"_id":"source\\_posts\\issues\\原始数据类型.png","hash":"e25ff037cfd10397c8dbea1043ca774c70cb998e","modified":1715583343000},{"_id":"source\\_posts\\issues\\回流和重绘.png","hash":"60b75b3ce712ec10c2110a9fd6169f8de9840ac9","modified":1715583343000},{"_id":"source\\_posts\\issues\\圣杯和双飞翼.jpg","hash":"be268f2da7e75195ed845256ba53b8f53afc35a1","modified":1715583343000},{"_id":"source\\_posts\\issues\\浏览器缓存.png","hash":"e3176c4f69caa6a133ea1e237fac6118a6261ad3","modified":1715583343000},{"_id":"source\\_posts\\issues\\生命周期.webp","hash":"0695dbee3adc6decfdeba746e327e5a32b10383c","modified":1715583343000},{"_id":"source\\_posts\\issues\\缓存请求指令.png","hash":"d6902e571fa98c5a51338c7a0c57e1b6b2c7049a","modified":1715583343000},{"_id":"source\\_posts\\issues\\请求报文和响应报文.jpg","hash":"a27e885a587e1d464e44c852944728702a9fee4c","modified":1715583343000},{"_id":"source\\_posts\\issues.md","hash":"329dd5f85874ff6eeb6d128385caf3b361d9c9d0","modified":1718523866054},{"_id":"source\\_posts\\issues\\20191119212535220.png","hash":"a7a43f70efb2786ae661b0b43571e64a5316775f","modified":1715583343000},{"_id":"source\\_posts\\issues\\640.png","hash":"0c6584fb7074bc48ff8fbc104558144a6120a456","modified":1715583343000},{"_id":"source\\_posts\\issues\\Expires.png","hash":"b544dd3afb2679fd6586d6b23daf63a115f00f1e","modified":1715583343000},{"_id":"source\\_posts\\issues\\HTTP非持久化.jpg","hash":"85b4d3742f1d71d3897b35a676280733374ce1b2","modified":1715583343000},{"_id":"source\\_posts\\issues\\display opacity visibility 对比.png","hash":"b863c409983212e2c4827651a26dfd8b1b019c92","modified":1715583343000},{"_id":"source\\_posts\\issues\\mvc_q.png","hash":"56564a4325f9da2171199ea778daea2216e0cf86","modified":1715583343000},{"_id":"source\\_posts\\issues\\tcp udp的应用.png","hash":"2b74c11810a7e93702f639adcbfcbaeacacfcb24","modified":1715583343000},{"_id":"source\\_posts\\issues\\引用数据类型.png","hash":"a99dbce8a3edd0f2fbebd720b07f6a4b4e7d26a5","modified":1715583343000},{"_id":"source\\_posts\\issues\\报文实例.jpg","hash":"b5ad622194fe01a1ad4f48faf414cf86a55842e6","modified":1715583343000},{"_id":"source\\_posts\\issues\\缓存响应指令.png","hash":"52f19e06ca75376321401fcca805357be36a7266","modified":1715583343000},{"_id":"source\\_posts\\issues\\cookie字段.bmp","hash":"fb172a24b2e94a01d226ff986ab35ba3b3c1d77b","modified":1715583343000},{"_id":"source\\_posts\\issues\\http状态码.bmp","hash":"c7398b1ad798a8d4cff44ad3fcd6d3d3207e5093","modified":1715583343000},{"_id":"themes\\fluid\\source\\css\\_pages\\_tag\\tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1702719015000},{"_id":"source\\_posts\\issues\\通用首部字段.bmp","hash":"ec538ee1133474ed1c00c2037f0842626b160b8c","modified":1715583343000},{"_id":"source\\_posts\\issues\\响应首部字段.bmp","hash":"c93877000a59f5f96f22bc0bb161ac8199a26de2","modified":1715583343000},{"_id":"themes\\fluid\\.eslintrc","hash":"4bc2b19ce2b8c4d242f97d4ccf2d741e68ab0097","modified":1702719015000},{"_id":"themes\\fluid\\.editorconfig","hash":"33218fbd623feb43edf5f99f15965392cecc44a6","modified":1702719015000},{"_id":"themes\\fluid\\.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1702719015000},{"_id":"themes\\fluid\\.gitignore","hash":"ae3bfcb89777657c5dfb5169d91445dcb0e5ab98","modified":1702719015000},{"_id":"themes\\fluid\\LICENSE","hash":"26f9356fd6e84b5a88df6d9014378f41b65ba209","modified":1702719015000},{"_id":"themes\\fluid\\README.md","hash":"ff9b0e1fb9dba665af2f1e4a577f8cb9e840464b","modified":1702719015000},{"_id":"themes\\fluid\\README_en.md","hash":"365184a73af40e7365504c3077f3d80dfee1d80e","modified":1702719015000},{"_id":"themes\\fluid\\_config.yml","hash":"fa25bc358eaeff42f3de8568f945212dd524cabb","modified":1718516694007},{"_id":"themes\\fluid\\package.json","hash":"c640b57695b7b6002399711f1a7708b0f6c05b84","modified":1702719015000},{"_id":"themes\\fluid\\languages\\de.yml","hash":"0e7d455d9e004ff15d8924b7a0c35cea25ee5b1d","modified":1702719015000},{"_id":"themes\\fluid\\languages\\en.yml","hash":"cb11b39f44ea069652c9647179606b6cecc98d50","modified":1702719015000},{"_id":"themes\\fluid\\languages\\eo.yml","hash":"a556251cc50a5680578c03f1efbf252b1f4ab860","modified":1702719015000},{"_id":"themes\\fluid\\languages\\es.yml","hash":"7112594259c88c04714be152af7fd377687dad40","modified":1702719015000},{"_id":"themes\\fluid\\languages\\ja.yml","hash":"3dd6d20f8d26585a7c154a8e59fe8d5d902f4c6a","modified":1702719015000},{"_id":"themes\\fluid\\languages\\ru.yml","hash":"7dc78f22696649a4c68dc65a9b52d9a992fa82a0","modified":1702719015000},{"_id":"themes\\fluid\\languages\\zh-CN.yml","hash":"2253e1bc61694b3bdc5e434ea2660d13d941b50e","modified":1702719015000},{"_id":"themes\\fluid\\languages\\zh-HK.yml","hash":"80ed400a7adaa92ea54fc7f5d534c9af795bed00","modified":1702719015000},{"_id":"themes\\fluid\\languages\\zh-TW.yml","hash":"596d031dff3826ae8e4ffc8931fff28977b73247","modified":1702719015000},{"_id":"themes\\fluid\\layout\\404.ejs","hash":"b84d575c7b7f778b4cb64e89ad3d0aed4a896820","modified":1702719015000},{"_id":"themes\\fluid\\layout\\about.ejs","hash":"163bee643e6a38912d3ae70923c83c48d57222e7","modified":1702719015000},{"_id":"themes\\fluid\\layout\\archive.ejs","hash":"7c1f44005849791feae4abaa10fae4cb983d3277","modified":1702719015000},{"_id":"themes\\fluid\\layout\\categories.ejs","hash":"13859726c27b6c79b5876ec174176d0f9c1ee164","modified":1702719015000},{"_id":"themes\\fluid\\layout\\category.ejs","hash":"f099161b738a16a32253f42085b5444f902018ed","modified":1702719015000},{"_id":"themes\\fluid\\layout\\index.ejs","hash":"33c3317cdcee062789de2336dd8d0cc7f86d3650","modified":1702719015000},{"_id":"themes\\fluid\\layout\\layout.ejs","hash":"7e0023474128fbe4d68c467704c41f1712432415","modified":1702719015000},{"_id":"themes\\fluid\\layout\\links.ejs","hash":"1cac32ec4579aaf7b9fa39d317497331d4c5e1dd","modified":1702719015000},{"_id":"themes\\fluid\\layout\\page.ejs","hash":"ed5007a3feb8f14d3d2843271bfb298eb0c56219","modified":1702719015000},{"_id":"themes\\fluid\\layout\\post.ejs","hash":"9bf0d357a607a282f3b9cb04525a4df0cc2a8b76","modified":1702719015000},{"_id":"themes\\fluid\\layout\\tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":1702719015000},{"_id":"themes\\fluid\\layout\\tag.ejs","hash":"9d686364c4d16a1a9219471623af452035c5b966","modified":1702719015000},{"_id":"themes\\fluid\\.github\\ISSUE_TEMPLATE\\bug_report.md","hash":"554c0d0e086a0784d83ee71c83f8bceeb60aecc8","modified":1702719015000},{"_id":"themes\\fluid\\.github\\ISSUE_TEMPLATE\\bug_report_zh.md","hash":"c8b0d49c49e3c88872fd3b37909345ff5b2b6aa0","modified":1702719015000},{"_id":"themes\\fluid\\.github\\ISSUE_TEMPLATE\\feature_request.md","hash":"c134dd57ffd269b93402ccfffe7dbe0f0b583bec","modified":1702719015000},{"_id":"themes\\fluid\\.github\\ISSUE_TEMPLATE\\feature_request_zh.md","hash":"ed08574b196447376dd74411cca664ac9227a5d4","modified":1702719015000},{"_id":"themes\\fluid\\.github\\ISSUE_TEMPLATE\\question.md","hash":"ab5eab9e3ff889c4ba7fd82846e7f5b7ae15bebc","modified":1702719015000},{"_id":"themes\\fluid\\.github\\ISSUE_TEMPLATE\\question_zh.md","hash":"fff07ce0472afc368d388637cb9d438195da9b5b","modified":1702719015000},{"_id":"themes\\fluid\\.github\\workflows\\cr.yaml","hash":"19a8a00f5ba9607d82265572fe1202b64a8b0822","modified":1702719015000},{"_id":"themes\\fluid\\.github\\workflows\\limit.yaml","hash":"f8bd2edeb4424ee7a055b31583445d5d5dff91a4","modified":1702719015000},{"_id":"themes\\fluid\\.github\\workflows\\publish.yaml","hash":"6f02e6440d88629229556e3fd47d0280fe2240db","modified":1702719015000},{"_id":"themes\\fluid\\layout\\_partials\\archive-list.ejs","hash":"7520fbf91f762207c2ab06b2c293235cd5b23905","modified":1702719015000},{"_id":"themes\\fluid\\layout\\_partials\\category-chains.ejs","hash":"18309584aab83bc4deb20723ebad832149dd2e24","modified":1702719015000},{"_id":"themes\\fluid\\layout\\_partials\\category-list.ejs","hash":"f8d2f1907450e61968e6d54443e9be8138196a77","modified":1702719015000},{"_id":"themes\\fluid\\layout\\_partials\\comments.ejs","hash":"d707c47b2638c94e489bc43d4cfd098b7c58447f","modified":1702719015000},{"_id":"themes\\fluid\\layout\\_partials\\css.ejs","hash":"85f6e051550907681ab4ed2e268ac8f6e9ebf931","modified":1702719015000},{"_id":"themes\\fluid\\layout\\_partials\\footer.ejs","hash":"10ccfb8eef4e16182183c9a3e175c90d5b6397d3","modified":1702719015000},{"_id":"themes\\fluid\\layout\\_partials\\head.ejs","hash":"7b7b1d098726e86687a15fe3d520d178577ffcae","modified":1702719015000},{"_id":"themes\\fluid\\layout\\_partials\\header.ejs","hash":"0d5e397d30051e5fbabe7b47cfd1f1e6a5820af1","modified":1702719015000},{"_id":"themes\\fluid\\layout\\_partials\\markdown-plugins.ejs","hash":"fc4bdf7de0cf1a66d0e5e4fba1b31d6f7ed49468","modified":1702719015000},{"_id":"themes\\fluid\\layout\\_partials\\paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":1702719015000},{"_id":"themes\\fluid\\layout\\_partials\\scripts.ejs","hash":"da5810785105e5075861593c7ac22c7aa9665a72","modified":1702719015000},{"_id":"themes\\fluid\\layout\\_partials\\search.ejs","hash":"70e1c929e084ca8a2648cedabf29b372511ea2b8","modified":1702719015000},{"_id":"themes\\fluid\\scripts\\events\\index.js","hash":"79de5a379b28cad759a49048351c7f6b8915bd7d","modified":1702719015000},{"_id":"themes\\fluid\\scripts\\filters\\default-injects.js","hash":"b2013ae8e189cd07ebc8a2ff48a78e153345210f","modified":1702719015000},{"_id":"themes\\fluid\\scripts\\filters\\locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":1702719015000},{"_id":"themes\\fluid\\scripts\\filters\\post-filter.js","hash":"82bb06686158ebe160a631c79f156cd4fde35656","modified":1702719015000},{"_id":"themes\\fluid\\scripts\\generators\\index-generator.js","hash":"9159fc22fa84a7b605dd15fe4104f01fe9c71147","modified":1702719015000},{"_id":"themes\\fluid\\scripts\\generators\\local-search.js","hash":"9ac5ddad06e9b0e6015ce531430018182a4bc0fa","modified":1702719015000},{"_id":"themes\\fluid\\scripts\\generators\\pages.js","hash":"d3e75f53c59674d171309e50702954671f31f1a4","modified":1702719015000},{"_id":"themes\\fluid\\scripts\\helpers\\date.js","hash":"9bda6382f61b40a20c24af466fe10c8366ebb74c","modified":1702719015000},{"_id":"themes\\fluid\\scripts\\helpers\\engine.js","hash":"d3a231d106795ce99cb0bc77eb65f9ae44515933","modified":1702719015000},{"_id":"themes\\fluid\\scripts\\helpers\\export-config.js","hash":"8e67b522c47aa250860e3fe2c733f1f958a506c0","modified":1702719015000},{"_id":"themes\\fluid\\scripts\\helpers\\import.js","hash":"ca53e8dbf7d44cfd372cfa79ac60f35a7d5b0076","modified":1702719015000},{"_id":"themes\\fluid\\scripts\\helpers\\injects.js","hash":"1ad2ae6b11bd8806ee7dd6eb7140d8b54a95d613","modified":1702719015000},{"_id":"themes\\fluid\\scripts\\helpers\\page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":1702719015000},{"_id":"themes\\fluid\\scripts\\helpers\\scope.js","hash":"d41d9d658fcb54964b388598e996747aadb85b0f","modified":1702719015000},{"_id":"themes\\fluid\\scripts\\helpers\\url.js","hash":"2a6a8288176d0e0f6ec008056bf2745a86e8943e","modified":1702719015000},{"_id":"themes\\fluid\\scripts\\helpers\\utils.js","hash":"966689d7c5e4320008285395fbaa2751f6209be5","modified":1702719015000},{"_id":"themes\\fluid\\scripts\\helpers\\wordcount.js","hash":"4d48c424e47ff9a17a563167ea5f480890267adf","modified":1702719015000},{"_id":"themes\\fluid\\scripts\\tags\\button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":1702719015000},{"_id":"themes\\fluid\\scripts\\tags\\checkbox.js","hash":"0857aa86db2a711ae5c77218a9e3fa686d0e87b1","modified":1702719015000},{"_id":"themes\\fluid\\scripts\\tags\\fold.js","hash":"73e4fd12ce3e47981479391ed354b7d9d3279f70","modified":1702719015000},{"_id":"themes\\fluid\\scripts\\tags\\group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1702719015000},{"_id":"themes\\fluid\\scripts\\tags\\label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":1702719015000},{"_id":"themes\\fluid\\scripts\\tags\\mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":1702719015000},{"_id":"themes\\fluid\\scripts\\tags\\note.js","hash":"e3b456a079e5dc0032473b516c865b20f83d2c26","modified":1702719015000},{"_id":"themes\\fluid\\scripts\\utils\\compare-versions.js","hash":"dbbc928c914fc2bd242cd66aa0c45971aec13a5d","modified":1702719015000},{"_id":"themes\\fluid\\scripts\\utils\\crypto.js","hash":"ae4ad8a188ef5b3fa6818b01629fc962b3de8551","modified":1702719015000},{"_id":"themes\\fluid\\scripts\\utils\\object.js","hash":"33b57e4decdc5e75c518859f168c8ba80b2c665b","modified":1702719015000},{"_id":"themes\\fluid\\scripts\\utils\\resolve.js","hash":"8c4a8b62aa8608f12f1e9046231dff04859dc3e9","modified":1702719015000},{"_id":"themes\\fluid\\scripts\\utils\\url-join.js","hash":"718aab5e7b2059a06b093ca738de420d9afa44ba","modified":1702719015000},{"_id":"themes\\fluid\\source\\css\\gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1702719015000},{"_id":"themes\\fluid\\source\\css\\highlight-dark.styl","hash":"45695ef75c31a4aa57324dd408b7e2327a337018","modified":1702719015000},{"_id":"themes\\fluid\\source\\css\\highlight.styl","hash":"a9efc52a646a9e585439c768557e3e3c9e3326dc","modified":1702719015000},{"_id":"themes\\fluid\\source\\css\\main.styl","hash":"855ae5fe229c51afa57f7645f6997a27a705d7e4","modified":1702719015000},{"_id":"themes\\fluid\\source\\img\\avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1702719015000},{"_id":"themes\\fluid\\source\\img\\fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1702719015000},{"_id":"themes\\fluid\\source\\img\\loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1702719015000},{"_id":"themes\\fluid\\source\\img\\police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1702719015000},{"_id":"themes\\fluid\\source\\js\\boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1702719015000},{"_id":"themes\\fluid\\source\\js\\color-schema.js","hash":"c5939d14065d38c86e16d1642e154dde5a23e830","modified":1702719015000},{"_id":"themes\\fluid\\source\\js\\events.js","hash":"5891534506b959a2f559f29e122baa3eb9159d93","modified":1702719015000},{"_id":"themes\\fluid\\source\\js\\img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1702719015000},{"_id":"themes\\fluid\\source\\js\\leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1702719015000},{"_id":"themes\\fluid\\source\\js\\local-search.js","hash":"b9945f76f8682f3ec32edfb285b26eb559f7b7e8","modified":1702719015000},{"_id":"themes\\fluid\\source\\js\\plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":1702719015000},{"_id":"themes\\fluid\\source\\js\\utils.js","hash":"b82e7c289a66dfd36064470fd41c0e96fc598b43","modified":1702719015000},{"_id":"themes\\fluid\\source\\xml\\local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1702719015000},{"_id":"themes\\fluid\\layout\\_partials\\comments\\changyan.ejs","hash":"c9b2d68ed3d375f1953e7007307d2a3f75ed6249","modified":1702719015000},{"_id":"themes\\fluid\\layout\\_partials\\comments\\cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":1702719015000},{"_id":"themes\\fluid\\layout\\_partials\\comments\\discuss.ejs","hash":"98d065b58ce06b7d18bff3c974e96fa0f34ae03a","modified":1702719015000},{"_id":"themes\\fluid\\layout\\_partials\\comments\\disqus.ejs","hash":"aab4a4d24c55231a37db308ae94414319cecdd9b","modified":1702719015000},{"_id":"themes\\fluid\\layout\\_partials\\comments\\giscus.ejs","hash":"95f8b866b158eff9352c381c243b332a155a5110","modified":1702719015000},{"_id":"themes\\fluid\\layout\\_partials\\comments\\livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":1702719015000},{"_id":"themes\\fluid\\layout\\_partials\\comments\\gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":1702719015000},{"_id":"themes\\fluid\\layout\\_partials\\comments\\remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":1702719015000},{"_id":"themes\\fluid\\layout\\_partials\\comments\\twikoo.ejs","hash":"d84bcb5ccd78470a60c067fc914ac0ac67ac8777","modified":1702719015000},{"_id":"themes\\fluid\\layout\\_partials\\comments\\utterances.ejs","hash":"c7ccf7f28308334a6da6f5425b141a24b5eca0e2","modified":1702719015000},{"_id":"themes\\fluid\\layout\\_partials\\comments\\valine.ejs","hash":"19ba937553dddd317f827d682661a1066a7b1f30","modified":1702719015000},{"_id":"themes\\fluid\\layout\\_partials\\comments\\waline.ejs","hash":"12727da7cf3ac83443270f550be4d1c06135b52b","modified":1702719015000},{"_id":"themes\\fluid\\layout\\_partials\\footer\\beian.ejs","hash":"4fb9b5dd3f3e41a586d6af44e5069afe7c81fff2","modified":1702719015000},{"_id":"themes\\fluid\\layout\\_partials\\footer\\statistics.ejs","hash":"454d8dd4c39f9494ebeb03ca0746f5bc122af76a","modified":1702719015000},{"_id":"themes\\fluid\\layout\\_partials\\header\\banner.ejs","hash":"e07757b59e7b89eea213d0e595cb5932f812fd32","modified":1702719015000},{"_id":"themes\\fluid\\layout\\_partials\\header\\navigation.ejs","hash":"37d750428772d7c71ba36ce0c2540780d90fadea","modified":1702719015000},{"_id":"themes\\fluid\\layout\\_partials\\plugins\\analytics.ejs","hash":"4f68c80bd1395e2f6d11e373116e54de11cb62e8","modified":1702719015000},{"_id":"themes\\fluid\\layout\\_partials\\plugins\\anchorjs.ejs","hash":"40181442d3a2b8734783a0ad7caf2d2522e3f2ab","modified":1702719015000},{"_id":"themes\\fluid\\layout\\_partials\\plugins\\code-widget.ejs","hash":"3a505cba37942badf62a56bbb8b605b72af330aa","modified":1702719015000},{"_id":"themes\\fluid\\layout\\_partials\\plugins\\encrypt.ejs","hash":"0fff24cf5bf99fbe5c56c292e2eac4a89bf29db4","modified":1702719015000},{"_id":"themes\\fluid\\layout\\_partials\\plugins\\fancybox.ejs","hash":"9d1ea2a46b8c8ad8c168594d578f40764818ef13","modified":1702719015000},{"_id":"themes\\fluid\\layout\\_partials\\plugins\\highlight.ejs","hash":"7529dd215b09d3557804333942377b9e20fa554e","modified":1702719015000},{"_id":"themes\\fluid\\layout\\_partials\\plugins\\math.ejs","hash":"dcbf9a381ee76f2f1f75fcbc22c50a502ec85023","modified":1702719015000},{"_id":"themes\\fluid\\layout\\_partials\\plugins\\mermaid.ejs","hash":"03ac02762f801970d1c4e73d6ec8d4c503780e50","modified":1702719015000},{"_id":"themes\\fluid\\layout\\_partials\\plugins\\moment.ejs","hash":"4ff3fb1b60ccc95a0af3bbdbd0757fedefc088b5","modified":1702719015000},{"_id":"themes\\fluid\\layout\\_partials\\plugins\\nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":1702719015000},{"_id":"themes\\fluid\\layout\\_partials\\plugins\\typed.ejs","hash":"f345374885cd6a334f09a11f59c443b5d577c06c","modified":1702719015000},{"_id":"themes\\fluid\\layout\\_partials\\post\\category-bar.ejs","hash":"8772bce97ed297e7a88523f4e939ed6436c22f87","modified":1702719015000},{"_id":"themes\\fluid\\layout\\_partials\\post\\copyright.ejs","hash":"529f3069742b3d338c769ba2d836e7f3c342a09d","modified":1702719015000},{"_id":"themes\\fluid\\layout\\_partials\\post\\meta-bottom.ejs","hash":"375974ec017696e294dc12469fb0ae257800dc2d","modified":1702719015000},{"_id":"themes\\fluid\\layout\\_partials\\post\\meta-top.ejs","hash":"ce6e9f578f4faa45840abddf8f46af3f4b69c177","modified":1702719015000},{"_id":"themes\\fluid\\layout\\_partials\\post\\sidebar-left.ejs","hash":"9992c99b3eb728ad195970e1b84d665f2c8691c4","modified":1702719015000},{"_id":"themes\\fluid\\layout\\_partials\\post\\sidebar-right.ejs","hash":"d5fcc9b60e02f869a29a8c17a16a6028ecc1e6d8","modified":1702719015000},{"_id":"themes\\fluid\\layout\\_partials\\post\\toc.ejs","hash":"635a89060fbf72eeda066fc4bd0a97462f069417","modified":1702719015000},{"_id":"themes\\fluid\\scripts\\events\\lib\\compatible-configs.js","hash":"ef474d1fa5bbafc52619ced0f9dc7eaf2affb363","modified":1702719015000},{"_id":"themes\\fluid\\scripts\\events\\lib\\footnote.js","hash":"c19ac8050b82c3676b0332a56099ccfcc36d9d52","modified":1702719015000},{"_id":"themes\\fluid\\scripts\\events\\lib\\hello.js","hash":"bd8376e1cf7892dc2daa58f2f443574be559fdbf","modified":1702719015000},{"_id":"themes\\fluid\\scripts\\events\\lib\\highlight.js","hash":"a5fe1deccb73b5f578797dbb11038efc15f63ce8","modified":1702719015000},{"_id":"themes\\fluid\\scripts\\events\\lib\\injects.js","hash":"5ae4b07204683e54b5a1b74e931702bbce2ac23e","modified":1702719015000},{"_id":"themes\\fluid\\scripts\\events\\lib\\lazyload.js","hash":"9ba0d4bc224e22af8a5a48d6ff13e5a0fcfee2a4","modified":1702719015000},{"_id":"themes\\fluid\\scripts\\events\\lib\\merge-configs.js","hash":"7c944c43b2ece5dd84859bd9d1fe955d13427387","modified":1702719015000},{"_id":"themes\\fluid\\source\\css\\_functions\\base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1702719015000},{"_id":"themes\\fluid\\source\\css\\_mixins\\base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1702719015000},{"_id":"themes\\fluid\\source\\css\\_pages\\pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1702719015000},{"_id":"themes\\fluid\\source\\css\\_variables\\base.styl","hash":"4ed5f0ae105ef4c7dd92eaf652ceda176c38e502","modified":1702719015000},{"_id":"themes\\fluid\\source\\css\\_pages\\_about\\about.styl","hash":"97fe42516ea531fdad771489b68aa8b2a7f6ae46","modified":1702719015000},{"_id":"themes\\fluid\\source\\css\\_pages\\_archive\\archive.styl","hash":"c475e6681546d30350eaed11f23081ecae80c375","modified":1702719015000},{"_id":"themes\\fluid\\source\\css\\_pages\\_base\\base.styl","hash":"643284c567665f96915f0b64e59934dda315f74d","modified":1702719015000},{"_id":"themes\\fluid\\source\\css\\_pages\\_base\\color-schema.styl","hash":"85492ef64d7e5f70f0f7e46d570bbc911e686d7e","modified":1702719015000},{"_id":"themes\\fluid\\source\\css\\_pages\\_base\\inline.styl","hash":"411a3fa3f924a87e00ff04d18b5c83283b049a4d","modified":1702719015000},{"_id":"themes\\fluid\\source\\css\\_pages\\_base\\print.styl","hash":"166afbc596ea4b552bad7290ec372d25ec34db7b","modified":1702719015000},{"_id":"themes\\fluid\\source\\css\\_pages\\_category\\category-bar.styl","hash":"cc6df43fef6bb3efecbfdd8b9e467424a1dea581","modified":1702719015000},{"_id":"themes\\fluid\\source\\css\\_pages\\_category\\category-chain.styl","hash":"0cdf7ef50dfd0669d3b257821384ff31cd81b7c9","modified":1702719015000},{"_id":"themes\\fluid\\source\\css\\_pages\\_category\\category-list.styl","hash":"7edfe1b571ecca7d08f5f4dbcf76f4ffdcfbf0b5","modified":1702719015000},{"_id":"themes\\fluid\\source\\css\\_pages\\_index\\index.styl","hash":"25fb6fa4c783b847c632584c49a7e1593cdb2f5d","modified":1702719015000},{"_id":"themes\\fluid\\source\\css\\_pages\\_links\\links.styl","hash":"5c7f2044e3f1da05a3229537c06bd879836f8d6e","modified":1702719015000},{"_id":"themes\\fluid\\source\\css\\_pages\\_post\\comment.styl","hash":"780f3788e7357bcd3f3262d781cb91bb53976a93","modified":1702719015000},{"_id":"themes\\fluid\\source\\css\\_pages\\_post\\highlight.styl","hash":"4df764d298fe556e501db4afc2b05686fe6ebcfb","modified":1702719015000},{"_id":"themes\\fluid\\source\\css\\_pages\\_post\\markdown.styl","hash":"1e3d3a82721e7c10bcfcecec6d81cf2979039452","modified":1702719015000},{"_id":"themes\\fluid\\source\\css\\_pages\\_post\\post-page.styl","hash":"cd432a6411ccac7df47e6a300fb1a872cfc763e7","modified":1702719015000},{"_id":"themes\\fluid\\source\\css\\_pages\\_post\\post-tag.styl","hash":"c96d36aa8fe20f0c3c1a29ee2473cd8064b10f73","modified":1702719015000},{"_id":"themes\\fluid\\source\\css\\_pages\\_base\\keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1702719015000},{"_id":"themes\\fluid\\source\\css\\_pages\\_tag\\tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":1702719015000},{"_id":"themes\\fluid\\source\\css\\_pages\\_base\\_widget\\anchorjs.styl","hash":"e0cebda4a6f499aff75e71417d88caa7ceb13b94","modified":1702719015000},{"_id":"themes\\fluid\\source\\css\\_pages\\_base\\_widget\\board.styl","hash":"4397037fc3f0033dbe546c33cd9dbdabd8cb1632","modified":1702719015000},{"_id":"themes\\fluid\\source\\css\\_pages\\_base\\_widget\\banner.styl","hash":"7a0bd629bc234fc75e3cc8e3715ffada92f09e73","modified":1702719015000},{"_id":"themes\\fluid\\source\\css\\_pages\\_base\\_widget\\code-widget.styl","hash":"b66ab013f0f37d724a149b85b3c7432afcf460ad","modified":1702719015000},{"_id":"themes\\fluid\\source\\css\\_pages\\_base\\_widget\\copyright.styl","hash":"26f71a9cd60d96bb0cb5bbdf58150b8e524d9707","modified":1702719015000},{"_id":"themes\\fluid\\source\\css\\_pages\\_base\\_widget\\footer.styl","hash":"2caaca71dd1ff63d583099ed817677dd267b457e","modified":1702719015000},{"_id":"themes\\fluid\\source\\css\\_pages\\_base\\_widget\\footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1702719015000},{"_id":"themes\\fluid\\source\\css\\_pages\\_base\\_widget\\header.styl","hash":"c4459248c66ea1326feed021179b847ae91d465f","modified":1702719015000},{"_id":"themes\\fluid\\source\\css\\_pages\\_base\\_widget\\modal.styl","hash":"adf6c1e5c8e1fb41c77ce6e2258001df61245aa2","modified":1702719015000},{"_id":"themes\\fluid\\source\\css\\_pages\\_base\\_widget\\ngrogress.styl","hash":"5d225357b4a58d46118e6616377168336ed44cb2","modified":1702719015000},{"_id":"themes\\fluid\\source\\css\\_pages\\_base\\_widget\\noscript.styl","hash":"0cf2f2bb44f456150d428016675d5876a9d2e2aa","modified":1702719015000},{"_id":"themes\\fluid\\source\\css\\_pages\\_base\\_widget\\pagination.styl","hash":"8bb1b68e5f3552cb48c2ffa31edbc53646a8fb4c","modified":1702719015000},{"_id":"themes\\fluid\\source\\css\\_pages\\_base\\_widget\\qrcode.styl","hash":"78704a94c0436097abfb0e0a57abeb3429c749b7","modified":1702719015000},{"_id":"themes\\fluid\\source\\css\\_pages\\_base\\_widget\\search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1702719015000},{"_id":"themes\\fluid\\source\\css\\_pages\\_base\\_widget\\toc.styl","hash":"9e7452aa2372153f25d7a4675c9d36d281a65d24","modified":1702719015000},{"_id":"themes\\fluid\\source\\css\\_pages\\_base\\_widget\\scroll-btn.styl","hash":"f0e429a27fa8a7658fcbddbb4d4dbe4afa12499a","modified":1702719015000},{"_id":"source\\_posts\\issues\\实体首部字段.bmp","hash":"9d1cc1e986fe018852b81e912829cb5b5754adb4","modified":1715583343000},{"_id":"source\\_posts\\issues\\http方法.bmp","hash":"15d91606200b98746b6d5cc83be9a5656ca96af1","modified":1715583343000},{"_id":"source\\_posts\\issues\\总结几种常见web攻击手段及其防御方式 - jiajun_geek - 博客园.pdf","hash":"9638ea47f5b5325ee5a268010dd7687370ae59f6","modified":1715583343000},{"_id":"themes\\fluid\\source\\img\\default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1702719015000},{"_id":"source\\_posts\\issues\\readystate.bmp","hash":"df7ff2c4ac282836bedb6bd19b832d46d16b1140","modified":1715583343000},{"_id":"source\\_posts\\issues\\请求首部字段.bmp","hash":"54070075130660352ff1481a45fd43d5d6e9b98e","modified":1715583343000},{"_id":"source\\_posts\\issues\\生命周期2.bmp","hash":"3e40f1bfc6c399883cd51265dd14e39bb7f15858","modified":1715583343000},{"_id":"source\\_posts\\issues\\面试专题总结：手撕代码.pdf","hash":"8be3e4bf09fffe374d60b80f3c7a3ec7047142ba","modified":1715583343000}],"Category":[{"name":"test","_id":"clxh8kkpp0003nwufetosgoaf"},{"name":"前端","_id":"clxh8kkpr0005nwuf70s0d2cj"}],"Data":[],"Page":[{"title":"about","date":"2024-06-16T05:45:23.000Z","layout":"about","_content":"about...\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2024-06-16 13:45:23\nlayout: about\n---\nabout...\n","updated":"2024-06-16T05:45:42.430Z","path":"about/index.html","comments":1,"_id":"clxh8kkpk0000nwuf0u0jbsi2","content":"<p>about…</p>\n","excerpt":"","more":"<p>about…</p>\n"}],"Post":[{"title":"测试文章","date":"2024-06-16T05:35:39.000Z","_content":"something...\n","source":"_posts/测试文章.md","raw":"---\ntitle: 测试文章\ndate: 2024-06-16 13:35:39\ntags:\n- test\ncategories:\n- test\n---\nsomething...\n","slug":"测试文章","published":1,"updated":"2024-06-16T05:35:57.960Z","comments":1,"layout":"post","photos":[],"_id":"clxh8kkpm0001nwuf8tlj8k3y","content":"<p>something…</p>\n","excerpt":"","more":"<p>something…</p>\n"},{"title":"面试八股","date":"2024-06-16T05:44:20.000Z","_content":"\n# JavaScript\n\n\n\n## 1  原始值和引用值类型及区别\n\n[JavaScript 深入了解基本类型和引用类型的值](https://www.runoob.com/w3cnote/javascript-basic-types-and-reference-types.html)\n\n**原始值（简单数据类型）**：存储在栈中的简单数据段，也就是说，它们的值直接存储在变量访问的位置。\n6种简单数据类型：undefined、null、boolean、number、string、symbol；可以通过typeof 运算符来判断一个值是否在某种类型的范围内，如果它是原始类型，还可以判断它表示哪种原始类型(除null)。\n\n<img src=\"原始数据类型.png\" style=\"zoom:80%;\" />\n\n**引用值（复杂数据类型）**：存储在堆中的对象，放在变量的栈空间中的值是该对象存储在堆中的地址，也就是说，存储在变量处的值是一个指针（内存地址），指向存储对象的堆内存中。\n包含：Object、function、array等。\n\n<img src=\"引用数据类型.png\"  />\n\n**<font color=\"#dd0000\">区别：</font>**\n\n简单数据类型的值是储存在栈中，当把一个变量传递给另一个变量时，是把一个栈中的东西复制到另一个到栈中，并且这两个变量互不影响，修改其中的变量值时，不会改变另外一个变量的结果。\n\n引用数据类型是把变量标识符和和指向堆内存中该对象的指针（内存地址）存储在栈中，但是把其实际对象存储在堆中，栈中的内存地址指向堆中的实际对象，当把引用对象传递给另一个变量时，复制的其实是指向实际对象的指针（内存地址），此时两者指向的是同一个数据，若通过方法改变其中一个变量的值，则访问另一个变量时，其值也会跟着改变。\n\n------\n\n\n\n## 2 判断数据类型\n\n### typeof\n\n优点：能快速检查undefined,string,number,boolean,function类型\n缺点：当类型为object,null,array时都会返回object,所以不能区分这三类\n\n### instanceof\n\n用于检测构造函数的 prototype 属性是否出现在某个实例对象的原型链上。\n\n优点：能检测array,function,object类型 \n缺点:  检测不了字面量定义的number,boolean,string\n\n### Object.prototype.toString.call()\n\n优点：能准确的判断所有的类型。\n缺点：写法过于繁琐\n\n### constructor\n\n- 构造函数的原型中包含属性 `constructor` 指向该构造函数,但是他是不安全的，因为contructor的指向是可以被改变\n- null、undefined没有construstor方法，因此constructor不能判断undefined和null。\n\n***\n\n\n\n## 3 类数组与数组的区别与转换\n\n- 类数组对象：arguments对象、DOM对象列表;\n\n- 类数组对象也有length属性,可以这种取值: NodeList[0]、NodeList.item(0);\n\n  **<font color=\"#dd0000\">区别：</font>**：数组对象的类型是Array,类数组对象的类型是object，也就是说类数组原型是Object;类数组不具有数组所具有的方法。\n\n  **<font color=\"#dd0000\">转换：</font>**\n\n  1. Array.prototype.slice.call(arrayLike, start);\n  2.  Array.from(arrayLike)\n  3. 扩展运算符`[...arrayLike]`\n\n***\n\n## 4 数组常见API\n\n[js数组方法整理](https://www.cnblogs.com/zyfeng/p/10541133.html)\n\n***\n\n## 5 call,apply,bind\n\n[JavaScript 中 call()、apply()、bind() 的用法](https://www.runoob.com/w3cnote/js-call-apply-bind.html)\n\n***\n\n## 6 new的原理\n\n1. 创建一个空对象obj（{}）；\n2. 将obj的[[prototype]]属性指向构造函数constrc的原型（即obj.[[prototype]] = constrc.prototype）；\n3. 将构造函数constrc内部的this绑定到新建的对象obj，执行constrc（也就是跟调用普通函数一样，只是此时函数的this为新创建的对象obj）；\n4. 若构造函数没有返回引用类型，则返回该新建的对象obj（默认会添加return this）。否则，返回引用类型的值。\n\n<img src=\"20191119212535220.png\" style=\"zoom: 67%;\" />\n\n***\n\n## 7 正确判断this\n\n[前端JS必备知识点：如何正确的判断this的指向?](https://blog.csdn.net/weixin_42721322/article/details/106391922)\n\n***\n\n## 8 闭包及其作用\n\n闭包指子函数可以访问外部作用域变量的函数特性，即使在子函数作用域外也可以访问。如果没有闭包那么在处理事件绑定，异步请求时都会变得困难。\n\n由于在Javascript语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成\"定义在一个函数内部的函数\"。所以，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。\n\n- JS中的所有函数都是闭包\n- 闭包一般在子函数本身作用域以外执行，即延伸作用域\n\n闭包可以用在许多地方。它的最大用处有两个：\n\n- 在函数外可以读取函数内部的变量\n- 让这些变量的值始终保持在内存中。\n\n坏处：\n\n由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。\n解决方法是，在退出函数之前，将不使用的局部变量全部删除。\n\n[彻底理解JS闭包](https://www.cnblogs.com/itjeff/p/10106855.html)\n[学习Javascript闭包（Closure）](https://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html)\n[setTimeout函数之循环和闭包](https://www.jianshu.com/p/e5225ba4a025)\n\n***\n\n## 9 原型\n\n<img src=\"proto.png\" style=\"zoom:67%;\" />\n\n[ 原型基础](https://houdunren.gitee.io/note/js/11%20%E5%8E%9F%E5%9E%8B%E4%B8%8E%E7%BB%A7%E6%89%BF.html#%E5%8E%9F%E5%9E%8B%E5%9F%BA%E7%A1%80)\n\n***\n\n\n\n## 10 继承的几种方式\n\n[JavaScript深入之继承的多种方式和优缺点](https://github.com/mqyqingfeng/Blog/issues/16)\n\n### ①原型链继承\n\n1.引用类型的属性被所有实例共享\n2.在创建 Child 的实例时，不能向Parent传参\n\n```javascript\nfunction Parent () {\n    this.name = 'kevin';\n}\nParent.prototype.getName = function () {\n    console.log(this.name);\n}\nfunction Child () {}\nChild.prototype = new Parent();\nvar child = new Child();\nconsole.log(child.getName()) // kevin\n```\n\n### ②借用构造函数（经典继承）\n\n优点：\n\n1.避免了引用类型的属性被所有实例共享\n\n2.可以在 Child 中向 Parent 传参\n\n缺点：\n\n方法都在构造函数中定义，每次创建实例都会创建一遍方法。\n\n```javascript\nfunction Parent () {\n    this.names = ['kevin', 'daisy'];\n}\nfunction Child () {\n    Parent.call(this);\n}\nvar child1 = new Child();\nchild1.names.push('yayu');\nconsole.log(child1.names); // [\"kevin\", \"daisy\", \"yayu\"]\n\nvar child2 = new Child();\nconsole.log(child2.names); // [\"kevin\", \"daisy\"]\n```\n\n### ③组合继承\n\n优点：融合原型链继承和构造函数的优点，是 JavaScript 中最常用的继承模式。\n\n```javascript\nfunction Parent (name) {\n    this.name = name;\n    this.colors = ['red', 'blue', 'green'];\n}\nParent.prototype.getName = function () {\n    console.log(this.name)\n}\n\nfunction Child (name, age) {\n    Parent.call(this, name);\n    this.age = age;\n}\n\nChild.prototype = new Parent();\nChild.prototype.constructor = Child;\n\nvar child1 = new Child('kevin', '18');\nchild1.colors.push('black');\nconsole.log(child1.name); // kevin\nconsole.log(child1.age); // 18\nconsole.log(child1.colors); // [\"red\", \"blue\", \"green\", \"black\"]\n\nvar child2 = new Child('daisy', '20');\nconsole.log(child2.name); // daisy\nconsole.log(child2.age); // 20\nconsole.log(child2.colors); // [\"red\", \"blue\", \"green\"]\n```\n\n### ④原型式继承\n\n原型式继承继承的基本思想：在 object() 函数内部，先创建一个临时性的构造函数，然后将传入的对象作为这个构造函数的原型，最后返回了这个临时类型的一个新实例。相当于Object.create()\n\n缺点：\n\n包含引用类型值的属性会被所有实例共享，这点跟原型链继承一样。\n\n```javascript\nfunction createObj(o) {\n    function F(){}\n    F.prototype = o;\n    return new F();\n}\n```\n\n### ⑤寄生式继承\n\n创建一个仅用于封装继承过程的函数，该函数在内部以某种形式来做增强对象，最后返回对象\n\n缺点：跟借用构造函数模式一样，每次创建对象都会创建一遍方法。\n\n```javascript\nfunction createObj (o) {\n    var clone = Object.create(o);\n    clone.sayName = function () {\n        console.log('hi');\n    }\n    return clone;\n}\n```\n\n### ⑥寄生组合式继承\n\n这种方式的高效率体现它只调用了一次 Parent 构造函数，并且因此避免了在 Parent.prototype 上面创建不必要的、多余的属性。\n\n与此同时，原型链还能保持不变；因此，还能够正常使用 instanceof 和 isPrototypeOf。\n\n开发人员普遍认为寄生组合式继承是引用类型最理想的继承范式。\n\n```javascript\nfunction object(o) {\n    function F() {}\n    F.prototype = o;\n    return new F();\n}\n\nfunction prototype(child, parent) {\n    var prototype = object(parent.prototype);\n    prototype.constructor = child;\n    child.prototype = prototype;\n}\n\n// 当我们使用的时候：\nprototype(Child, Parent);\n```\n\n***\n\n## 11 深拷贝与浅拷贝\n\n- 浅拷贝：for in,Object.assign,展开语法。\n- 深拷贝：\n\n```javascript\nJSON.parse(JSON.stringify(obj))\n```\n\n```javascript\nfunction copy(object) {\n  let obj = object instanceof Array ? [] : {};\n  for (const [k, v] of Object.entries(object)) {\n    obj[k] = typeof v == \"object\" ? copy(v) : v;\n  }\n  return obj;\n}\n```\n\n***\n\n## 12  防抖和节流\n\n[js 函数的防抖(debounce)与节流(throttle)](https://www.cnblogs.com/cc-freiheit/p/10827372.html)\n\n### 防抖\n\n```javascript\n//每次执行都将前一次清掉，只执行最后一次\nfunction debounce(fn, delay) {\n    let timer = null\n    return function () {\n        clearTimeout(timer)\n        timer = setTimeout(() => {\n            fn.apply(this, arguments)\n        }, delay)\n    }\n}\n$('#content').onmousemove = debounce(fn,1000)\n```\n\n### 节流\n\n```javascript\n//一段时间只执行一次\nfunction throttle(fn, delay) {\n    let pre = 0\n    return function () {\n        let now = Date.now()\n        if (now - pre > delay) {\n            fn.apply(this, arguments)\n            pre = now\n        }\n    }\n}\n//计时器方法，如果timeout正在计时，就不执行，这样一段时间只执行一次\nfunction throttle2(fn, delay) {\n    let timeout\n    return function () {\n        if (!timeout) {\n            timeout = setTimeout(() => {\n                timeout = null\n                fn.apply(this, arguments)\n            }, delay)\n        }\n    }\n}\n$('#content').onmousemove = throttle(fn,1000)\n```\n\n***\n\n## <font color='red'>13  作用域和作用域链、执行期上下文</font>\n\n### 词法作用域\n\n词法作用域是指在词法分析阶段就确定了，不会改变。变量的作用域是在定义时决定而不是执行时决定，也就是说词法作用域取决于源码，通过静态分析就能确定，因此词法作用域也叫做静态作用域。\n\n```javascript\nlet value = 10\nfunction a() {\n    console.log(value)\n}\nfunction b() {\n    let value = 22\n    a()\n}\nb()//10\n```\n\n### 上下文(context)\n\n指作用域。每个上下文都有一个关联的变量对象（variable object），这个上下文中定义的所有变量和函数都存在于这个对象上。上下文中的代码在执行的时候，会创建变量对象的一个作用域链（scope chain）\n\n### 作用域链\n\n当查找变量的时候，会先从当前上下文的变量对象中查找，如果没有找到，就会从父级(词法层面上的父级)执行上下文的变量对象中查找，一直找到全局上下文的变量对象，也就是全局对象。这样由多个执行上下文的变量对象构成的链表就叫做作用域链。\n\n### 执行期上下文\n\n[https://blog.csdn.net/qq_27626333/article/details/78463565](https://blog.csdn.net/qq_27626333/article/details/78463565)\n\n***\n\n\n\n## 14 DOM常见操作\n\n[DOM基础知识](https://houdunren.gitee.io/note/js/18%20DOM.html#%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86)\n\n***\n\n\n\n## 15 Array.sort()方法与实现机制\n\n插入排序，快排（chrome)\n\n***\n\n\n\n## 16 AJAX的请求过程\n\n1. 创建XMLHttpRequest对象xhr\n2. 设置回调函数\n3. open方法初始化请求参数\n4. send方法发送数据\n5. 在回调函数中处理响应状态\n\n<img src=\"readystate.bmp\" style=\"zoom: 80%;\" />\n\n```javascript\n\nvar xhr = new XMLHttpRequest();\nxhr.onreadystatechange = function(){\n  if (xhr.readyState === 4 && xhr.status === 200) console.log(xhr.responseText)\n  else {console.error(xhr.statusText);\n}\nxhr.open('GET', '/endpoint', true);\nxhr.send(data);\n\n```\n\n***\n\n## 17 JS的垃圾回收机制\n\n[前端面试：谈谈 JS 垃圾回收机制](https://segmentfault.com/a/1190000018605776)\n\n1. 垃圾:一般来说没有被引用的对象就是垃圾，就是要被清除， 有个例外如果几个对象引用形成一个环，互相引用，但根访问不到它们，这几个对象也是垃圾，也要被清除。\n\n2. 垃圾回收算法\n\n   - 标记清除：\n     1. 垃圾回收器获取根并“标记”。（根：无法删除的基本的固有可达值：①函数的变量，参数。②嵌套调用链上的其他函数的变量和参数。③全局变量等\n     2. 然后它访问并“标记”所有来自根的引用。\n     3. 然后它访问标记的对象并标记它们的引用。所有被访问的对象都被记住，以便以后不再访问同一个对象两次。 \n     4. 以此类推，直到有未访问的引用(可以从根访问)为止。\n     5. 除标记的对象外，所有对象都被删除。\n   - 引用计数\n\n   所谓”引用计数”是指语言引擎有一张”引用表”，保存了内存里面所有的资源（通常是各种值）的引用次数。如果一个值的引用次数是0，就表示这个值不再用到了，因此可以将这块内存释放\n\n***\n\n## 18 String,Math方法\n\n[总结JS中string、math、array的常用的方法](https://www.cnblogs.com/lihuijuan/p/8490578.html)\n\n## 19 addEventListener和onClick()的区别\n\n- onClick直接触发事件，同一时间只能指向唯一对象，会被覆盖掉.\n- addEventListener，同一事件类型可以设置多个事件处理程序，按设置的顺序先后执行，且可以控制触发阶段，`{ capture: true/false }`\n\n***\n\n\n\n## 20 new和Object.create区别\n\n- new将对象的\\_\\_proto\\_\\_指向构造函数的prototype\n- Object.create将新对象的\\_\\_proto\\_\\_指向指定的对象\n\n***\n\n\n\n## 21 DOM的location对象\n\n<img src=\"16eea8822b4d1239.jpg\"  />\n\n***\n\n\n\n## 22 BOM属性对象方法\n\n<img src=\"BOM.png\"/>\n\n[JS BOM详解](https://juejin.cn/post/6844904015646441485)\n\n***\n\n## 23 浏览器从输入URL到页面渲染的整个流程\n\n1. DNS解析\n2. TCP连接\n3. 发送HTTP请求\n4. 服务器处理请求并返回HTTP报文\n5. 浏览器解析渲染页面\n6. 连接结束\n\n详细：\n\n- 输入url后，首先需要找到这个url域名的服务器ip,为了寻找这个ip，浏览器首先会寻找缓存，查看缓存中是否有记录，缓存的查找记录为：浏览器缓存-》系统缓存-》路由器缓存，缓存中没有则查找系统的hosts文件中是否有记录，如果没有则查询DNS服务器，得到服务器的ip地址。\n- 三次握手建立TCP连接\n\n- 浏览器构建http请求，并将这个http请求封装在一个tcp包中，这个tcp包会依次经过传输层，网络层，数据链路层，物理层到达服务器，服务器解析这个请求来作出响应，返回相应的html给浏览器\n\n- 渲染页面：\n  1. 构建DOM树(DOM tree)：从上到下解析HTML文档生成DOM节点树（DOM tree）；\n  2. 构建CSS对象模型(CSS Object Model)树：加载解析样式生成CSSOM树；\n  3. 执行JavaScript：加载并执行JavaScript代码（js代码会造成阻塞）；\n  4. 构建渲染树(render tree)：根据DOM树和CSSOM树,生成渲染树(render tree)；\n  5. 渲染树：按顺序展示在屏幕上的一系列矩形，这些矩形带有字体，颜色和尺寸等视觉属性。\n  6. 布局（layout）：根据渲染树将节点树的每一个节点布局在屏幕上的正确位置；\n  7. 绘制（painting）：遍历渲染树绘制所有节点，为每一个节点适用对应的样式，这一过程是通过UI后端模块完成；\n  \n- 关闭连接\n\n***\n\n## 24 跨域、同源策略及跨域实现方式和原理\n\n[前端多种跨域方式实现原理详解](https://segmentfault.com/a/1190000022304066)\n[跨域资源共享 CORS 详解](http://www.ruanyifeng.com/blog/2016/04/cors.html)\n\n***\n\n## 25 浏览器的回流（Reflow）和重绘（Repaints）\n\n浏览器渲染过程如下：\n\n1. 解析HTML，生成DOM树，解析CSS，生成CSSOM树\n2. 将DOM树和CSSOM树结合，生成渲染树(Render Tree)\n3. Layout(回流):根据生成的渲染树，进行回流(Layout)，得到节点的几何信息（位置，大小）\n4. Painting(重绘):根据渲染树以及回流得到的几何信息，得到节点的绝对像素\n5. Display:将像素发送给GPU，展示在页面上。\n\n<img src=\"回流和重绘.png\"  />\n\n- 回流：这一阶段主要是计算节点的位置和几何信息，那么当<font color='red'>页面布局和几何信息</font>发生变化的时候，就需要回流\n  - 添加或删除可见的DOM元素\n  - 元素的位置发生变化\n  - 元素的尺寸发生变化（包括外边距、内边框、边框大小、高度和宽度等）\n  - 内容发生变化，比如文本变化或图片被另一个不同尺寸的图片所替代。\n  - 页面一开始渲染的时候（这肯定避免不了）\n  - 浏览器的窗口尺寸变化（因为回流是根据视口的大小来计算元素的位置和大小的）\n- 重绘：由于节点的几何属性发生改变或者由于样式发生改变而不会影响布局的，称为重绘，例如`outline`, `visibility`, `color`、`background-color`等\n- <font color='red'>回流一定会触发重绘，而重绘不一定会回流</font>\n- 减少重绘与回流：[介绍下重绘和回流（Repaint & Reflow），以及如何进行优化](https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/24)\n\n***\n\n## 26  arguments\n\narguments 是函数获得到所有参数集合\n\n```javascript\nfunction sum() {\n  return [...arguments].reduce((total, num) => {\n    return (total += num);\n  }, 0);\n}\nconsole.log(sum(2, 3, 4, 2, 6)); //17\n```\n\n***\n\n## 27 EventLoop事件循环，宏任务，微任务\n\nJavaScript 语言的一大特点就是单线程，也就是说同一个时间只能处理一个任务。为了协调事件、用户交互、脚本、UI 渲染和网络处理等行为，防止主线程的不阻塞，（事件循环）Event Loop的方案应用而生。\n\nJavaScript 处理任务是在等待任务、执行任务 、休眠等待新任务中不断循环中，也称这种机制为事件循环。\n\n- 主线程中的任务执行完后，才执行任务队列中的任务\n- 有新任务到来时会将其放入队列，采取先进先执行的策略执行队列中的任务\n- 比如多个 `setTimeout` 同时到时间了，就要依次执行\n\n任务包括 script(整体代码)、 setTimeout、setInterval、DOM渲染、DOM事件、Promise、XMLHTTPREQUEST等\n\n- 宏任务：\n\n  ```text\n  script(整体代码)\n  setTimeout\n  setInterval\n  I/O\n  UI交互事件\n  postMessage\n  MessageChannel\n  setImmediate(Node.js 环境)\n  ```\n\n- 微任务:微任务一般由用户代码产生，微任务较宏任务执行优先级更高\n\n  ```text\n  Promise.then\n  Object.observe\n  MutaionObserver\n  process.nextTick(Node.js 环境)\n  ```\n\n***\n\n## 28 函数柯里化及其通用封装\n\n柯里化是一种将使用多个参数的一个函数转换成一系列使用一个参数的函数的技术。\n函数柯里化，其实就是把多次调用的变量保存在闭包中，每次调用都查看一下变量数和原函数的形参数量是否相等。不相等就继续递归。直到相等为止就处理了\n\n```javascript\n //ES5\nfunction curry1(func, ...args) {\n     if (args.length < func.length) {\n         return function () {\n             return curry(func, ...args, ...arguments)\n         }\n     }\n     else return func(...args)\n }\n//ES6\nlet curry2 = (func, ...args) => args.length < func.length ? (...args2) => curry2(func, ...args, ...args2) : func(...args)\n\nfunction add(a, b) {\n    return a + b;\n}\n\nvar addCurry = curry(add);\nconsole.log(addCurry(1)(2))\n```\n\n***\n\n\n\n## 29 ==和===区别\n\n`===` 严格相等，会比较两个值的类型和值\n`==`  抽象相等，比较时，会先进行类型转换，然后再比较值\n\n```javascript\nvar num = 0;\nvar obj = new String(\"0\");\nvar str = \"0\";\nvar b = false;\n\nconsole.log(num === num); // true\nconsole.log(obj === obj); // true\nconsole.log(str === str); // true\n\nconsole.log(num === obj); // false\nconsole.log(num === str); // false\nconsole.log(obj === str); // false\nconsole.log(null === undefined); // false\nconsole.log(obj === null); // false\nconsole.log(obj === undefined); // false\n```\n\n```javascript\nvar num = 0;\nvar obj = new String(\"0\");\nvar str = \"0\";\nvar b = false;\n\nconsole.log(num == num); // true\nconsole.log(obj == obj); // true\nconsole.log(str == str); // true\n\nconsole.log(num == obj); // true\nconsole.log(num == str); // true\nconsole.log(obj == str); // true\nconsole.log(null == undefined); // true\n\n// both false, except in rare cases\nconsole.log(obj == null);\nconsole.log(obj == undefined);\n```\n\n***\n\n\n\n## 30 setTimeout 误差\n\n主线程执行任务花费时间大于定时器时间，定时器的回调在宏任务队列里，来不及调用\n\n\n```javascript\nconsole.log(\"start\");\nsetTimeout(function(){\n    console.log(\"timeout\");\n},5000);\nfor(let i = 0;i <= 500000;i++){\n    console.log(\"i:\",i);\n}\nconsole.log(\"end\");\n\n结果：\nstart\ni:1 \n(...) //一直输出到500000\n//耗时14秒左右\nend\n//没有等待\ntimeout\n```\n\n***\n\n## 31 循环比较\n\n1. for循环，写法麻烦\n\n2. 数组`foreach`，无法中途跳出`forEach`循环，`break`命令或`return`命令都不能奏效。\n\n3. `for...in`循环可以遍历数组的键名。\n\n   ```javascript\n   for (var index in myArray) {\n     console.log(myArray[index]);\n   }\n   ```\n\n   `for...in`循环有几个缺点。\n\n   - 数组的键名是数字，但是`for...in`循环是以字符串作为键名“0”、“1”、“2”等等。\n   - `for...in`循环不仅遍历数字键名，还会遍历手动添加的其他键，甚至包括原型链上的键。\n   - 某些情况下，`for...in`循环会以任意顺序遍历键名。\n\n   总之，`for...in`循环主要是为遍历对象而设计的，不适用于遍历数组。\n\n4. for...of循环内部调用的是数据结构的遍历器。`for...of`循环相比上面几种做法，有一些显著的优点:\n\n   - 有着同`for...in`一样的简洁语法，但是没有`for...in`那些缺点。\n   - 不同于`forEach`方法，它可以与`break`、`continue`和`return`配合使用。\n   - 提供了遍历所有数据结构的统一操作接口\n\n***\n\n## 32 异步方式比较\n\n- 回调：回调地狱\n- promise:代码完全都是 Promise 的 API（`then`、`catch`等等）\n- generator:必须有一个任务运行器，自动执行 Generator 函数；而且必须保证`yield`语句后面的表达式，必须返回一个 Promise\n- async:实现最简洁\n\n***\n\n## 33 模块加载方案比较\n\n- CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用。\n\n  ```\n  CommonJS 模块输出的是值的拷贝，也就是说，一旦输出一个值，模块内部的变化就影响不到这个值。\n  ```\n\n- CommonJS 模块是运行时加载，ES6 模块是编译时输出接口。\n\n  ```\n  CommonJS 加载的是一个对象（即`module.exports`属性），该对象只有在脚本运行完才会生成。而 ES6 模块不是对象，它的对外接口只是一种静态定义，在代码静态解析阶段就会生成。\n  ES6 模块的运行机制与 CommonJS 不一样。JS 引擎对脚本静态分析的时候，遇到模块加载命令import，就会生成一个只读引用。等到脚本真正执行时，再根据这个只读引用，到被加载的那个模块里面去取值。原始值变了，import加载的值也会跟着变。因此，ES6 模块是动态引用，并且不会缓存值，模块里面的变量绑定其所在的模块。\n  ```\n\n- CommonJS 模块的`require()`是同步加载模块，ES6 模块的`import`命令是异步加载，有一个独立的模块依赖的解析阶段。\n\n  ```\n  默认情况下，浏览器是同步加载 JavaScript 脚本，即渲染引擎遇到<script>标签就会停下来，等到执行完脚本，再继续向下渲染。如果是外部脚本，还必须加入脚本下载的时间。<script>标签打开defer或async属性，脚本就会异步加载。渲染引擎遇到这一行命令，就会开始下载外部脚本，但不会等它下载和执行，而是直接执行后面的命令。`defer`是“渲染完再执行”，`async`是“下载完就执行”。\n  \n  浏览器对于带有`type=\"module\"`的`<script>`，都是异步加载，不会造成堵塞浏览器，即等到整个页面渲染完，再执行模块脚本，<font color='orange'>等同于打开了`<script>`标签的`defer`属性。</font>\n  ```\n\n\n***\n\n\n\n## 34  ES6,ES5继承内置类\n\n- ES5中，这些原生构造函数是无法继承的，因为子类无法获得原生构造函数的内部属性，通过Array.apply()或者分配给原型对象都不行。原生构造函数会忽略apply方法传入的this，也就是说，原生构造函数的this无法绑定，导致拿不到内部属性。ES5 是先新建子类的实例对象this，再将父类的属性添加到子类上，由于父类的内部属性无法获取，导致无法继承原生的构造函数\n\n- ES6 允许继承原生构造函数定义子类，因为 ES6 是先新建父类的实例对象`this`，然后再用子类的构造函数修饰`this`，使得父类的所有行为都可以继承。\n\n***\n\n# Html&CSS\n\n## 1 CSS权重及其引入方式\n\n引入方式：内联式（行内），嵌入式（页内style标签)，外链式(link)，导入式(import)\n\n权重：\n\n- 内联式优先级最高；嵌入式，外链式在后面的优先级高。\n- id优先级高于class\n- important > 内嵌样式 > ID > 类 > 标签 | 伪类 | 属性选择 > 伪对象 > 继承 > 通配符\n\n权重值：把特殊性分为4个等级，每个等级代表一类选择器，每个等级的值为其所代表的选择器的个数乘以这一等级的权值，最后把所有等级的值相加得出选择器的特殊值。\n\n1. 第一等：代表内联样式，如: style=””，权值为1000。\n2. 第二等：代表ID选择器，如：#content，权值为100。\n3. 第三等：代表类，伪类和属性选择器，如.content a:link :[title]，权值为10。\n4. 第四等：代表类型选择器和伪元素选择器，如div p ::before，权值为1。\n5. 通配符 * 没有权重，权值为0.\n\n***\n\n## 2  a标签全部作用\n\n- 外部页面链接  `<a href=\"http://www.baidu.com\" target=\"_blank\">百度</a>`\n- 本地页面链接 `<a href=\"demo02.html\" target=\"_blank\">打开demo02</a>`\n- 锚点链接（页面内部区域跳转）`<a href=\"#part1\">第1章</a>`跳到 `<p id=\"part1\">第1章</p>`\n\n***\n\n## 3 用CSS画三角形\n\n```css\n#demo {\n            width: 0px;\n            height: 0px;\n            border: 60px solid transparent;//transparent使背景透明\n            border-bottom: 60px solid red;\n        }\n```\n\n***\n\n## 4 未知宽高元素水平垂直居中（方案及比较）\n\n1. 定位：\n\n   ```css\n           .father {\n               position: relative;\n               width: 200px;\n               height: 200px;\n               background: skyblue;\n           }\n           .son {\n               position: absolute;\n               top: 50%;\n               left: 50%;\n               transform: translate(-50%,-50%);\n               width: 100px;\n               height: 100px;\n               background: red;\n           }\n   ```\n\n2. flex/grid:\n\n   ```css\n           .father {\n               display: flex/grid;\n               justify-content: center;\n               align-items: center;\n               width: 200px;\n               height: 200px;\n               background: skyblue;\n           }\n           .son {\n               width: 100px;\n               height: 100px;\n               background: red;\n           }\n   ```\n\n3. table布局\n\n   ```css\n     .father {\n               display: table-cell;\n               width: 200px;\n               height: 200px;\n               background: skyblue;\n               vertical-align: middle;\n               text-align: center;\n           }\n           .son {\n               display: inline-block;\n               width: 100px;\n               height: 100px;\n               background: red;\n           }\n   ```\n\n***\n\n## 5 HTML元素划分\n\n### 块级元素\n\n在html中`div,p,h1,form,ul,li`就是块级元素。设置`display:block`就是将元素显示为块级元素。块级元素特点：\n\n- 每个块级元素都从新的一行开始，并且其后的元素也另起一行；（**一个块级元素独占一行**）\n- 元素的高度、宽度、行高以及顶和底边距都可设置；\n- 元素宽度在不设置的情况下，是它本身父容器的*100%（和父元素的宽度一致），除非设定一个宽度。\n\n### 内联元素\n\n在html中`span,a,label,input,img,strong,em`就是典型的内联元素（行内元素）（inline）元素。当然块状元素也可以通过代码`display:inline`将元素设置为内联元素。内联元素特点：\n\n- 和其他元素都在一行上\n- 元素的高度、宽度、行高及顶部和底部边距不可设置；\n- 元素的宽度就是它包含的文字或图片的宽度，不可改变。\n\n注意：为 a 元素设置了宽和高，但都没有起到作用，原因是**a在默认的时候是内联元素，内联元素是不可以设置宽和高的**。\n\n### 内联块状元素\n\n内联块状元素（`inline-block`）就是同时具备内联元素、块状元素的特点，代码`display:inline-block`就是将元素设置为内联块状元素。inline-block元素特点：\n\n- **和其他元素都在一行上；**\n- **元素的高度、宽度、行高以及顶和底边距都可设置**\n\n<font color='orange'>注意：img是inline元素，但是他同时也是替换元素，他有着特殊的表现：</font>\n\n- **可以设置width/height;**\n- 默认的，img元素在屏幕占据的空间与其图片的实际像素一致，除非CSS有设置或者自身的width/height HTML 属性有设置；\n- 如果img标签的包裹元素为也为inline元素，则img的边界可以超出其直接父元素的边界，直到自己的宽、高达到最大或者设定值为止，而且文档流中img的兄弟元素也不能遮盖住img。最常见的就是a标签里面包含的img标签；\n- 所以从行为上看,img元素作为替换元素，有着类似于Inline-block的行为，尽管在SPEC里面，他的确是一个inline元素。\n\n***\n\n\n\n## 6 盒子模型，定位\n\n[菜鸟教程](https://www.runoob.com/css/css-positioning.html)\n\n***\n\n\n\n## 7 margin塌陷及合并问题\n\n### margin塌陷\n\n嵌套父子块级元素垂直方向（次方向）的margin会结合到一起，并取最大的值，子元素的margin会往父元素顶部上方方向塌陷（父盒子里面没有文字，也没有边框（border），也没有padding-top ）\n\n<font color='red'>解决方法</font>:\n\n1. 给父级设置边框或内边距(不建议使用)\n2. 触发BFC：\n   - position:absolute/fixed\n   - display:inline-block;\n   - float:left/right;\n   - overflow:hidden;\n\n### margin合并\n\n兄弟块级元素间垂直方向的margin值会合并在一起并取最大值\n\n<font color='red'>解决方法</font>:给任意一个元素加一个父级元素并触发BFC就可以将其子元素不受到外界影响，如同加了一个“顶”\n\n***\n\n## 8 display及相关属性\n\n[CSS display 属性](https://www.runoob.com/cssref/pr-class-display.html)\n\n[CSS中用 opacity、visibility、display 属性将 元素隐藏 的 对比分析](https://segmentfault.com/a/1190000015116392)\n\n![](display opacity visibility 对比.png)\n\n***\n\n## 9 IFC 与 BFC\n\n[BFC与IFC概念理解+布局规则+形成方法+用处](https://segmentfault.com/a/1190000009545742)\n\n[深入理解BFC](https://segmentfault.com/a/1190000016721094?utm_source=sf-related)\n\nFormatting context 是 W3C CSS2.1 规范中的一个概念。<font color='orange'>它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用</font>。最常见的 Formatting context 有 Block fomatting context (简称BFC)和 Inline formatting context (简称IFC)。**Block formatting context直译为\"块级格式化上下文\"。它是一个独立的渲染区域，只有Block-level box参与， 它规定了内部的Block-level Box如何布局，并且与这个区域外部毫不相干**。**通俗地讲，BFC是一个容器，用于管理块级元素。**\n\n触发BFC：\n\n- float为 left|right\n- overflow为 hidden|auto|scroll\n- display为 table-cell|table-caption|inline-block|inline-flex|flex\n- position为 absolute|fixed\n- 根元素\n\nBFC布局规则：\n\n- 内部的Box会在垂直方向，一个接一个地放置(即块级元素独占一行)。\n- BFC的区域不会与float box重叠(**利用这点可以实现自适应两栏布局**)。\n- 内部的Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠(**margin重叠三个条件:同属于一个BFC;相邻;块级元素**)。\n- 计算BFC的高度时，浮动元素也参与计算。（清除浮动 haslayout）\n- BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。\n\n***\n\n## 10 圣杯布局和双飞翼布局\n\n<img src=\"圣杯和双飞翼.jpg\" style=\"zoom:50%;\" />\n\n[css布局之圣杯布局和双飞翼布局](https://juejin.cn/post/6844903568718184461#heading-1)\n\n```html\n//圣杯布局\n<body>\n    <div id='container'>\n        <div id=\"center\" class=\"column\">center</div>\n        <div id=\"left\" class=\"column\">left</div>\n        <div id=\"right\" class=\"column\">right</div>\n    </div>\n</body>\n<style>\n        #container {\n            padding: 0 200px;\n            overflow: hidden;\n        }\n        #center {\n            float:left;\n            width: 100%;\n            background-color: lightblue;\n        }\n        #left {\n            float:left;\n            width: 200px;\n            position: relative;\n            left: -200px;\n            margin-left: -100%;\n            background-color: orange;\n        }\n        #right {\n            float:left;\n            width: 200px;\n            position: relative;\n            right: -200px;\n            margin-left: -200px;\n            background-color: orange;\n        }\n</style>\n```\n\n```html\n//双飞翼\n<body>\n    <div id=\"header\">header</div>\n    <div id=\"container\">\n        <div id=\"center\" class=\"column\">\n            <div id=\"inner\">center</div>\n        </div>\n        <div id=\"left\" class=\"column\">left</div>\n        <div id=\"right\" class=\"column\">right</div>\n    </div>\n    <div id=\"footer\">footer</div>\n</body>\n   <style>\n        #container {\n            overflow: hidden;\n        }\n\n        #footer,\n        #header {\n            background-color: dimgrey;\n        }\n\n        .column {\n            float: left;\n            height: 60vh;\n        }\n\n        #center {\n            width: 100%;\n        }\n\n        #inner {\n            height: 100%;\n            margin: 0 200px;\n            background: lightgrey;\n        }\n\n        #left {\n            width: 200px;\n            margin-left: -100%;\n            background-color: lightblue;\n        }\n\n        #right {\n            width: 200px;\n            margin-left: -200px;\n            background-color: orange;\n        }\n    </style>\n```\n\n***\n\n## 11 flex 布局\n\n[Flex 布局教程](http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html)\n\n***\n\n## 12 px,em,rem 区别\n\n[响应式Web 设计—px-em-rem三者区别及rem的使用](https://www.jianshu.com/p/a0bdd3e9133d)\n\n***\n\n## 13 css预处理语言\n\nCSS 预处理器是一个能让你通过预处理器自己独有的语法来生成CSS的程序。\n\n其基本思想是：**用一种专门的编程语言，为CSS增加了一些编程的特性**，将CSS作为目标生成文件，然后开发者就只要使用这种语言进行编码工作。\n\n通俗的说，**CSS预处理器用一种专门的编程语言，进行Web页面样式设计，然后再编译成正常的CSS文件**，以供项目使用。\n\n- [Sass](http://sass-lang.com/)\n- [LESS](https://less.bootcss.com)\n\n***\n\n## 14 媒体查询\n\ncss中使用@media,可以针对不同的媒体类型定义不同的样式.\n@media 可以针对不同的屏幕尺寸设置不同的样式，特别是如果需要设置设计响应式的页面，@media 是非常有用的\n\n[媒体查询](https://houdunren.gitee.io/note/css/15%20%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2.html)\n\n***\n\n## 15 H5语义化标签\n\n- header\n- nav\n- article\n- section\n- aside\n- footer\n\n作用：\n\n- 比`<div>`标签有更加丰富的含义，使文档结构清晰，方便开发与维护\n- 搜索引擎能更方便的识别页面的每个部分\n- 方便其他设备解析（如移动设备、盲人阅读器等）\n\n[H5语义化标签](https://segmentfault.com/a/1190000013901244)\n\n***\n\n## 16 Web Worker和Web Socket\n\n### Web Worker\n\nH5中提供了一个JavaScript多线程解决方案，Web Worker是H5中的工作线程，是运行在后台的JavaScript,它能够独立于其他的脚本\n当 Web Worker工作时，不会影响页面的性能，用户依然可以进行点击，选取等操作\n\n调用 Web Worker 时，需要将单独执行的 JavaScript 代码放到一个独立的JS文件内，然后在页面内调用Worker构造函数来创建一个线程，参数是文件路径。\n`let worker = new Worker('worker.js')`\n\n<font color='orange'>因为Worker不能影响页面性能，所以Worker 中执行的代码不能访问页面或窗口对象</font>，通过onmessage获取后台信息，postMessage向后台发送信息\n\n```javascript\n//监听消息\nworker.onmessage=function(e){}\n//发送消息\nworker.postMessage(data)\n//停止Worker\nworker.terminate()\n//或者worker内部调用close方法\nclose()\n\n```\n\n### Web Socket\n\n在浏览器服务器之间建立一个双向通道，后台可以随时向前端推送消息，允许跨域\n\n```javascript\nlet ws = new WebSocket('ws://localhost:8080');\nws.send(data);\nws.onopen = function(){};\nws.onmessage = function(msg){};\nws.onclose = function(){}\n```\n\n***\n\n## 17 CSS3 动画\n\n- transition\n- animation\n\n[css3动画](https://www.runoob.com/css3/css3-animations.html)\n\n***\n\n## 18 如何实现响应式布局\n\n- 媒体查询\n- rem布局\n- 视口单位\n- 百分比布局\n- flex ,grid 等方案\n\n[前端响应式布局原理与方案](https://juejin.cn/post/6844903814332432397#heading-13)\n\n***\n\n## 19 SEO的概念及实现\n\n搜索引擎优化：使用特定的技术使得网站的各种关键词排名提升到搜索引擎的理想位置，从搜索引擎中获得更多的免费流量，以及更好地展现网站形象。\n\n优化方案：\n\n- 设置合理的title、description、keywords\n- 重要的关键词不要超过2次，而且要靠前，不同页面的title要不同\n- 使用语义化的html代码，符合w3c规范，语义化代码让搜索引擎容易理解网页\n- 重要的内容放在html代码最前，搜索引擎抓取页面是自上而下的，有的搜索引擎对抓取的长度有限制\n- 重要的内容不要通过JS输出，搜索引擎不会执行JS获取内容\n- 少用iframe，搜索引擎不会抓取iframe\n- 非装饰性图片必须加上alt\n- <font color='orangered'>服务端使用模板引擎渲染</font>\n\n***\n\n## 20 H5新特性\n\n### 语义化标签\n\n结构元素：article、aside、header、hgroup、footer、figure、section、nav\n\n其他元素：video、audio、canvas、embed、mark、progress、meter、time、command、details、datagrid、keygen、output、source、menu、ruby、wbr、bdi、dialog、\n\n### 新增API\n\n- canvas\n\n- svg\n\n- audio/video\n\n- Geolocation 定位`navigator.geolocation.getCurrentLocation(onSuccess,onError,options)`\n\n- Communication：跨文档消息通信，可以确保iframe、标签页、窗口间安全地进行跨源通信。\n\n  ```javascript\n  window.postMessage(msg,url);\n  window.addEventListener('message',function(e){})\n  ```\n\n  \n\n- XMLHttpRequest Level2：改进了跨源XMLHttpRequest和进度事件，XMLHttpRequest Level2通过CORS实现了跨源XMLHttpRequest。跨源HTTP请求包含一个Origin头部，它为服务器提供HTTP请求的源信息。\n\n- WebSockets：要连接远程主机，只需新建一个WebSocket实例，提供希望连接的对端URL。\n\n- Forms：新表单元素tel、email、url、search、range、number 未来的表单元素color、datetime、datetime-local、time、date、week、month\n\n- 新表单特性和函数：placeholder、autocomplete、autofocus、spellcheck、list特性、datalist元素、min和max、step、required\n\n- 拖放API：draggable属性、拖放事件(dragstart、drag、dragenter、dragleave、dragover、drap、dragend)、dataTransfer对象\n\n- Web Workers API：Web Workers可以让Web应用程序具备后台处理能力，对多线程的支持性非常好。但是在Web Workers中执行的脚本不能访问该页面的window对象，也就是Web Workers不能直接访问Web页面和DOM API。虽然Web Workers不会导致浏览器UI停止响应，但是仍然会消耗CPU周期，导致系统反应速度变慢。\n\n- Web Storage API：sessionStorage(保存在session中，浏览器关闭，数据消失)、localStorage(保存在客户端本地，除非手动删除，否则一直保存)\n\n***\n\n## 21 css3新特性（大概）\n\n- 圆角（border-radius） \n- 阴影（box-shadow）\n- 过渡效果（transition）\n- 翻转（transform）\n- 动画（animation）\n- 媒体查询（@media）\n- 弹性盒子（flex）\n\n***\n\n# 计算机网络和HTTP\n\n## 1 HTTP报文\n\n用于HTTP协议交互的信息称为HTTP报文。请求端的叫请求报文，响应端的叫响应报文。<font color='orange'>HTTP报文本身是由多行数据构成的字符串文本</font>\n\nHTTP报文大致可分为报文首部和报文主体，报文主体是可选项。\n\n<br/><br/>\n\nHTTP报文结构：\n\n<img src=\"HTTP报文结构.jpg\"/>\n\n<br/><br/>请求报文和响应报文结构：\n\n<img src=\"请求报文和响应报文.jpg\"/>\n\n<br/><br/>请求报文和响应报文实例：\n\n<img src=\"报文实例.jpg\"/>\n\n***\n\n## 2 HTTP建立持久连接的意义\n\nHTTP协议初始版本中，每进行一次通信就要断开一次TCP连接，这在一个页面内可能发生多个TCP连接中断，增加了通信开销。\n\n<img src=\"HTTP非持久化.jpg\" style=\"zoom:80%;\" />\n\nHTTP持久连接：只要任意一端没有明确提出断开连接，则保持TCP连接状态。<font color='orange'>持久化连接旨在建立一次TCP请求后进行多次HTTP请求和响应 的交互。减少多次TCP的开销，使HTTP请求尽快结束</font>>\n\n<img src=\"20201116121851148.png\"/>\n\n***\n\n## 3 HTTP首部字段\n\n<img src=\"请求报文和响应报文.jpg\"/>\n\n### 通用首部字段\n\n<img src=\"通用首部字段.bmp\"/>\n\n### 请求首部字段\n\n<img src=\"请求首部字段.bmp\"/>\n\n### 响应首部字段\n\n<img src=\"响应首部字段.bmp\"/>\n\n### 实体首部字段\n\n<img src=\"实体首部字段.bmp\"/>\n\n### 为cookie服务的首部字段\n\n<img src=\"cookie字段.bmp\"/>\n\n***\n\n\n\n## 14 浏览器缓存机制\n\n[彻底理解浏览器的缓存机制](https://juejin.cn/post/6844903593275817998#heading-3)\n\n[彻底弄懂浏览器缓存策略](https://www.jiqizhixin.com/articles/2020-07-24-12)\n\n### 强缓存 Cache-Control 与 Expires\n\n**Cache-Control（通用首部字段）**\n\n在HTTP/1.1中，Cache-Control是最重要的规则，主要用于控制网页缓存，主要取值为：\n\n- public：所有内容都将被缓存（客户端和代理服务器都可缓存）\n- private：所有内容只有客户端可以缓存，Cache-Control的默认取值\n- no-cache：客户端缓存内容，但是是否使用缓存则需要经过协商缓存来验证决定\n- no-store：所有内容都不会被缓存，即不使用强制缓存，也不使用协商缓存\n- max-age=xxx (xxx is numeric)：缓存内容将在xxx秒后失效\n\n请求指令\n\n<img src=\"缓存请求指令.png\"/>\n\n响应指令\n\n<img src=\"缓存响应指令.png\"/>\n\n**Expires（实体首部字段）**\n\nExpires是HTTP/1.0控制网页缓存的字段，其值为服务器返回该请求结果缓存的到期时间，即再次发起该请求时，如果客户端的时间小于Expires的值时，直接使用缓存结果。\nCache-Control 有指定 max-age 时，优先处理 max-age。\n\n<img src=\"Expires.png\"/>\n\n### 协商缓存与强缓存\n\n<img src=\"640.png\" style=\"zoom: 50%;\" />\n\n<img src=\"浏览器缓存.png\" style=\"zoom:80%;\" />\n\n\n\n## 4 HTTP方法，状态码\n\n<img src=\"http方法.bmp\"/>\n\n<img src=\"http状态码.bmp\"/>\n\n***\n\n## 5 HTTP和HTTPS\n\n[HTTP 与 HTTPS 的区别](https://www.runoob.com/w3cnote/http-vs-https.html)\n\n[SSL/TLS协议运行机制的概述](http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html)\n\n[十分钟搞懂HTTP和HTTPS协议](https://www.zhihu.com/tardis/zm/art/72616216?source_id=1003)\n\nhttp缺点：\n\n- 窃听风险\n- 冒充风险（需要第三方颁发证书）\n- 篡改风险\n\n<font color='orange'>HTTP+加密+证书+校验机制=HTTPS</font>\n\nHTTPS并不是新协议，只是HTTP通信接口部分用SSL/TLS协议代替。HTTP先和SSL通信，再由SSL和TCP通信。\n\n```\n1994年，NetScape公司设计了SSL协议（Secure Sockets Layer）的1.0版，但是未发布。\n1995年，NetScape公司发布SSL 2.0版，很快发现有严重漏洞。\n1996年，SSL 3.0版问世，得到大规模应用。\n1999年，互联网标准化组织ISOC接替NetScape公司，发布了SSL的升级版TLS 1.0版。\n2006年和2008年，TLS进行了两次升级，分别为TLS 1.1版和TLS 1.2版。最新的变动是2011年TLS 1.2的修订版。\n\n目前，应用最广泛的是TLS 1.0，接下来是SSL 3.0。但是，主流浏览器都已经实现了TLS 1.2的支持。\nTLS 1.0通常被标示为SSL 3.1，TLS 1.1为SSL 3.2，TLS 1.2为SSL 3.3。\n```\n\n<img src=\"https.jpg\" style=\"zoom:67%;\" />\n\nSSL/TLS协议的基本过程是这样的：\n\n1.  客户端向服务器端索要并验证公钥。\n2. 双方协商生成\"对话密钥\"。\n3.  双方采用\"对话密钥\"进行加密通信（普通HTTP，但用 “会话秘钥” 加密）。\n\n<img src=\"https-intro.png\" style=\"zoom: 80%;\" />\n\n***\n\n## 6 HTTP追加\n\n### SPDY\n\n- 多路复用（一个TCP连接多个HTTP请求）\n- 赋予请求优先级\n- 压缩HTTP首部\n- 支付服务器向客户端推送\n\n### WebSocket\n\n### HTTP  2.0\n\n主要特性同SPDY\n\n***\n\n## 7 WEB攻击\n\n见PDF\n\n***\n\n## 8 TCP/IP协议分层管理\n\n应用层：向用户提供应用服务时通信的活动。HTTP,DNS,FTP\n\n传输层：提供处于网络连接中的两台计算机之间的数据传输。TCP，UDP\n\n网络层：网络层用来处理在网络上流动的数据包。IP\n\n网络接口层：对实际的网络媒体的管理。设备驱动，网络接口卡\n\n***\n\n## 9 Get Post 区别\n\n- 请求参数：GET请求参数是通过URL传递的，多个参数以&连接，POST请求放在request body中。\n- 请求缓存：GET请求会被缓存，而POST请求不会，除非手动设置。\n- 收藏为书签：GET请求支持，POST请求不支持。\n- 安全性：POST比GET安全，GET请求在浏览器回退时是无害的，而POST会再次请求。\n- 历史记录：GET请求参数会被完整保留在浏览历史记录里，而POST中的参数不会被保留。\n- 编码方式：GET请求只能进行url编码，而POST支持多种编码方式。\n- 对参数的数据类型：GET只接受ASCII字符，而POST没有限制。\n\n****\n\n## 10 web服务器及其组成\n\n- Apache\n- IIS\n- Nginx\n\nwebserver 基本由这些组成:\n\n- 绑定TCP端口，监听客户端（浏览器）请求\n- 处理客户端（浏览器）请求\n- 响应客户端（浏览器）请求\n\n***\n\n## 11 TCP和UDP区别\n\n1. TCP是面向连接的，udp是无连接的即发送数据前不需要先建立链接。\n2. TCP提供可靠的服务。也就是说，通过TCP连接传送的数据，无差错，不丢失，不重复，且按序到达;UDP尽最大努力交付，即不保证可靠交付。 \n3. TCP是面向字节流，UDP面向报文。\n4. TCP只能是1对1的，UDP支持1对1,1对多。\n5. TCP的首部较大为20字节，而UDP只有8字节。\n\n<img src=\"tcp udp的应用.png\" style=\"zoom: 67%;\" />\n\n***\n\n## 12 cookie session sessionStorage localStorage\n\n### cookie\n\nHTTP Cookie 是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。通常，它用于告知服务端两个请求是否来自同一浏览器，如保持用户的登录状态。Cookie 使基于无状态的 HTTP 协议记录稳定的状态信息成为了可能。\n\nCookie 主要用于以下三个方面：\n\n会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息）\n个性化设置（如用户自定义设置、主题等）\n浏览器行为跟踪（如跟踪分析用户行为等）\n\n### session\n\nSession 代表着服务器和客户端一次会话的过程。Session 对象存储特定用户会话所需的属性及配置信息。这样，当用户在应用程序的 Web 页之间跳转时，存储在 Session 对象中的变量将不会丢失，而是在整个用户会话中一直存在下去。当客户端关闭会话，或者 Session 超时失效时会话结束。\n\n### cookie session 区别联系\n\n关系：\n\n用户第一次请求服务器的时候，服务器根据用户提交的相关信息，创建创建对应的 Session ，请求返回时将此 Session 的唯一标识信息 SessionID 返回给浏览器，浏览器接收到服务器返回的 SessionID 信息后，会将此信息存入到 Cookie 中，同时 Cookie 记录此 SessionID 属于哪个域名。\n\n当用户第二次访问服务器的时候，请求会自动判断此域名下是否存在 Cookie 信息，如果存在自动将 Cookie 信息也发送给服务端，服务端会从 Cookie 中获取 SessionID，再根据 SessionID 查找对应的 Session 信息，如果没有找到说明用户没有登录或者登录失效，如果找到 Session 证明用户已经登录可执行后面操作。\n\n根据以上流程可知，SessionID 是连接 Cookie 和 Session 的一道桥梁，大部分系统也是根据此原理来验证用户登录状态\n\n<img src=\"cookie session.jpg\" style=\"zoom:150%;\" />\n\n区别：\n\n- 作用范围不同，Cookie 保存在客户端（浏览器），Session 保存在服务器端。\n- 存取方式的不同，Cookie 只能保存 ASCII，Session 可以存任意数据类型，一般情况下我们可以在 Session 中保持一些常用变量信息，比如说 UserId 等。\n- 有效期不同，Cookie 可设置为长时间保持，比如我们经常使用的默认登录功能，Session 一般失效时间较短，客户端关闭或者 Session 超时都会失效。\n- 隐私策略不同，Cookie 存储在客户端，比较容易遭到不法获取；Session 存储在服务端，安全性相对 Cookie 要好一些。\n- 存储大小不同， 单个 Cookie 保存的数据不能超过 4K，Session 可存储数据远高于 Cookie。\n\n### localStorage和sessionStorage\n\n本地5MB存储，与HTTP无关，不与服务器通信，采取同源策略\n\nlocalStorage生命周期是永久的，除非被清除。sessionStorage尽在当前会话有效，关闭页面或浏览器后数据消失\n\n***\n\n## 13 TCP三次握手四次挥手\n\n```\n 3次握手：1、听得到吗？2、听得到，你呢？3、我也听到了。开始对话 \n 4次挥手：1、老师，下课了。2、好，我知道了，我说完这点。3、好了，说完了，下课吧。4、谢谢老师，老师再见\n```\n\n\n\n### TCP三次握手\n\n1. 第一次握手：TCP客户进程向服务器发出连接请求报文，报文首部中的同步位SYN=1，同时选择一个初始序列号 seq=x ，此时，TCP客户端进程进入了 SYN-SENT（同步已发送状态）状态\n\n2. 第二次握手：TCP服务器发出确认报文。确认报文中应该 ACK=1，SYN=1，确认号是ack=x+1，同时也要为自己初始化一个序列号 seq=y，此时，TCP服务器进程进入了SYN-RCVD（同步收到）状态\n\n3. 第三次握手：TCP客户进程收到确认后，还要向服务器给出确认。确认报文的ACK=1，ack=y+1，自己的序列号seq=x+1。服务器收到并确认，Client和Server进入ESTABLISHED状态，完成三次握手，随后Client和Server就可以开始传输数据。\n\n   <font color='red'>三次握手原因</font>:一句话，主要防止已经失效的连接请求报文突然又传送到了服务器，从而产生错误。\n\n   ```\n   如果使用的是两次握手建立连接，假设有这样一种场景，客户端发送了第一个请求连接并且没有丢失，只是因为在网络结点中滞留的时间太长了，由于TCP的客户端迟迟没有收到确认报文，以为服务器没有收到，此时重新向服务器发送这条报文，此后客户端和服务器经过两次握手完成连接，传输数据，然后关闭连接。此时此前滞留的那一次请求连接，网络通畅了到达了服务器，这个报文本该是失效的，但是，两次握手的机制将会让客户端和服务器再次建立连接，这将导致不必要的错误和资源的浪费。\n   \n   如果采用的是三次握手，就算是那一次失效的报文传送过来了，服务端接受到了那条失效报文并且回复了确认报文，但是客户端不会再次发出确认。由于服务器收不到确认，就知道客户端并没有请求连接。\n   ```\n\n   \n\n<img src=\"tcp三次握手.jpg\" style=\"zoom: 67%;\" />\n\n### 四次挥手\n\n1. 客户端进程发出连接释放报文，并且停止发送数据。FIN=1，其序列号为seq=u，客户端进入FIN-WAIT-1（终止等待1）状态\n2. 服务器收到连接释放报文，发出确认报文，ACK=1，ack=u+1，并且带上自己的序列号seq=v，此时，服务端就进入了CLOSE-WAIT（关闭等待）状态，客户端收到确认后，进入FIN-WAIT-2（终止等待2）状态\n3. 服务器将最后的数据发送完毕后，就向客户端发送连接释放报文，FIN=1，ack=u+1，假定此时的序列号为seq=w，此时，服务器就进入了LAST-ACK（最后确认）状态，等待客户端的确认\n4. 客户端收到服务器的连接释放报文后，必须发出确认，ACK=1，ack=w+1，而自己的序列号是seq=u+1，此时，客户端就进入了TIME-WAIT（时间等待）状态\n5. 服务器只要收到了客户端发出的确认，立即进入CLOSED状态，客户端最后还要等待2MSL\n\n<img src=\"tcp四次挥手.png\" style=\"zoom:67%;\" />\n\n<font color='orangeRed'>为什么客户端最后还要等待2MSL？</font>\n\n```\nMSL（Maximum Segment Lifetime），TCP允许不同的实现可以设置不同的MSL值。\n\n第一，保证客户端发送的最后一个ACK报文能够到达服务器，因为这个ACK报文可能丢失，服务器会重传FIN+ACK报文，而客户端就能在这个2MSL时间段内收到这个重传的报文，接着给出回应报文，并且会重启2MSL计时器。\n\n第二，防止类似与“三次握手”中提到了的“已经失效的连接请求报文段”出现在本连接中。客户端发送完最后一个确认报文后，在这个2MSL时间中，就可以使本连接持续的时间内所产生的所有报文段都从网络中消失。这样新的连接中不会出现旧连接的请求报文。\n\n```\n\n***\n\n\n\n# React\n\n## 1 特点\n\n1. 声明式设计。采用声明规范，用ReactDOM.render()来声明\n2. 高效：虚拟DOM。\n3. 灵活：可以与已知的框架或库很好的配合。\n4. JSX语法。\n5. 组件：构建组件，使代码更容易得到复用，能够很好地应用在大项目的开发中。\n6. 单向响应的数据流：组件不会改变props。它们只会监听props的变化，当props发生变化时它们会使用接收到的新值，而不是去修改已有的值。\n\n***\n\n\n\n## 2 虚拟DOM DIFF算法\n\n```html\n<div id=\"app\">\n  <p class=\"text\">hello world!!!</p>\n</div>\n```\n\n```javascript\n{\n  tag: 'div',\n  props: {\n    id: 'app'\n  },\n  chidren: [\n    {\n      tag: 'p',\n      props: {\n        className: 'text'\n      },\n      chidren: [\n        'hello world!!!'\n      ]\n    }\n  ]\n}\n\n```\n\n虚拟DOM就是一个JS对象，DOM操作很耗性能，比较JS对象节约了性能。\n\nreact中减少了真实DOM的创建，对比。取而代之操作JS对象，实现了性能飞跃\n\nJSX  => createElement => JS对象（虚拟DOM） => render => 真实DOM\n\n[DIFF算法](https://hustyichi.github.io/2020/09/16/vdom/)\n\n***\n\n## 3 生命周期\n\n<img src=\"生命周期.webp\"  />\n\n<img src=\"生命周期2.bmp\" style=\"zoom:80%;\" />\n\n***\n\n## 4 vue react 异同\n\n### 相同点\n\n1. 都使用虚拟DOM\n2. 组件化思想\n3. 专注于核心库，路由、全局状态管理则由配套库进行处理。\n\n### 区别\n\n[Vue和React区别](https://juejin.cn/post/6844903668446134286)\n\n***\n\n## 5 受控组件与非受控组件\n\n### 受控组件\n\n使 React 的 state 成为“唯一数据源”。渲染表单的 React 组件还控制着用户输入过程中表单发生的操作。被 React 以这种方式控制取值的表单输入元素就叫做“受控组件”。(用value和onChange控制输入元素)\n\n```javascript\nclass NameForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {value: ''};\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {    \n      this.setState({\n          value: event.target.value\n      });  \n  }\n  handleSubmit(event) {\n    alert('提交的名字: ' + this.state.value);\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          名字:\n          <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\n        </label>\n        <input type=\"submit\" value=\"提交\" />\n      </form>\n    );\n  }\n}\n```\n\n### 非受控组件\n\n使用非受控组件，这时表单数据将交由 DOM 节点来处理。不必为每个状态更新都编写数据处理函数，使用 ref 来从 DOM 节点中获取表单数据。\n\n```javascript\nclass NameForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.input = React.createRef();  }\n\n  handleSubmit(event) {\n    alert('A name was submitted: ' + this.input.current.value);\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          Name:\n          <input type=\"text\" ref={this.input} />\n        </label>\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n    );\n  }\n}\n```\n\n***\n\n## 6 高阶组件\n\n[HOC](https://segmentfault.com/a/1190000019153177)\n\n***\n\n## 7 Flux架构模式\n\n### MVC\n\n1. Model负责管理数据，大部分业务逻辑放在Model中\n2. View负责渲染用户界面，传送指令到 Controller\n3. Controller负责接收用户输入，根据用户输入调用对应的Model部分逻辑，把产生的数据结果交给View，让View渲染\n\n<img src=\"mvc_model.png\" style=\"zoom:67%;\" />\n\n<font color='orangered'>缺点：实际开发中，总是允许View和Model直接通信，造成混乱的数据流</font>\n\n<img src=\"mvc_q.png\" style=\"zoom:50%;\" />\n\n### MVVM\n\nMVVM是Model-View-ViewModel的简写。它本质上就是MVC 的改进版。MVVM 就是将其中的`View` 的状态和行为抽象化，让我们将视图 UI 和业务逻辑分开。，它可以取出 `Model` 的数据同时帮忙处理 `View` 中由于需要展示内容而涉及的业务逻辑。\n\n1. Model：代表的是模型、数据，可以在 Model 层中定义数据修改和操作的业务逻辑。\n2. View：代表的是视图，模版。它用来显示数据。\n3. ViewModel：MVVM模式的核心，它是连接view和model的桥梁。它有两个方向：\n   1. 将`Model`转化成`View`，即将后端传递的数据转化成所看到的页面。实现的方式是：数据绑定。\n   2. 将`View`转化成`Model`，即将所看到的页面转化成后端的数据。实现的方式是：DOM 事件监听。\n\n<img src=\"mvvm_model.png\" style=\"zoom: 80%;\" />\n\n<font color='orange'>总结：</font>\n在MVVM的框架下视图View和模型Model是不能直接通信的。它们通过ViewModel来通信。\nViewModel通常要实现一个observer观察者，当数据发生变化，ViewModel能够监听到数据的这种变化，然后通知到对应的视图做自动更新。\n而当用户操作视图，ViewModel也能监听到视图的变化，然后通知数据做改动。\n\n<font color='red'>这称之为数据的双向绑定</font>。并且MVVM中的View 和 ViewModel可以互相通信\n\n缺点：\n\n1. 数据绑定也使得bug很难被调试。比如页面异常了，有可能是View的代码有bug，也可能是model的代码有问题。数据绑定使得一个位置的Bug被快速传递到别的位置，要定位原始出问题的地方就变得不那么容易了。\n2. 数据双向绑定不利于代码重用。客户端开发最常用的是View，但是数据双向绑定技术，让一个View都绑定了一个model，不同的模块model都不同。那就不能简单重用view了\n3.  一个大的模块中，model也会很大，虽然使用方便了也很容易保证数据的一致性，但是长期持有，不释放内存就造成话费更多的内存\n\n### Flux\n\n<font color='orange'>Flux的核心思想就是数据和逻辑永远单向流动</font>\n\n<img src=\"flux.png\" style=\"zoom:80%;\" />\n\nMVC最大的问题就是无法禁绝View和Model之间的直接对话。在Flux中，Store只有getter,没有setter，不可能直接修改Store内部状态，只能派发一个action对象给Dispatcher\n\n不足：\n\n1. store之间有依赖关系\n2. 难以进行服务端渲染\n3. store混杂了逻辑和状态\n\n***\n\n## 8 Redux\n\n### 设计理念\n\nWeb 应用就是状态与 UI 一一对应的关系，Redux 就是我们 Web 应用的一个状态管理方案。\n单纯的从架构层面而言，UI 与状态完全分离，并且单向的数据流确保了状态可控。\n\n- 每一个 `State` 的变化可预测\n- 动作和状态统一管理\n\n### 基本原则\n\n1. 唯一数据源：应用的状态数据只存储在一个Store中\n\n2. 状态只读：修改状态必须通过派发action\n\n3. 数据改变只能通过纯函数完成：Reducer 就是纯函数，它接受当前的 state 和 action。然后返回一个新的 state。所以这里，state 不会更新，只会替换。\n\n   保持 reducer 纯净非常重要。**永远不要**在 reducer 里做这些操作：\n\n   - 修改传入参数；\n   - 执行有副作用的操作，如 API 请求和路由跳转；\n   - 调用非纯函数，如 `Date.now()` 或 `Math.random()`。\n\n   reducer 一定要保持纯净。**只要传入参数相同，返回计算得到的下一个 state 就一定相同。没有特殊情况、没有副作用，没有 API 请求、没有变量修改，单纯执行计算。**\n\n***\n\n## 9 PureComponent 与 shouldComponentUpdate\n\n如果一个组件只和props和state有关系，给定相同的props和state就会渲染相同的结果，那么这个组件就叫作**纯组件**。\n\n普通组件可以通过在shouldComponentUpdate中对比决定是否更新，节约性能。\n\nPureComponent 实现了shouldComponentUpdate，对props和state的“浅比较”，组件会自动判断是否重新渲染。\n\n***\n\n## 10 React Fiber\n\n[由浅入深React的Fiber架构](https://juejin.cn/post/6844904193958887431#heading-8)\n[手写React的Fiber架构，深入理解其原理](https://segmentfault.com/a/1190000022995622)\n\nReact的diff算法是同步的，如果有大量深度嵌套节点需要更新，React diff递归对比vDom，JS线程的运行时间会比较长，阻塞浏览器响应。\n\n- Fiber是一个执行单元\n\n  Fiber可以将长时间的同步任务<font color='orange'>拆分成多个小任务</font>，从而让浏览器能够抽身去响应其他事件，等进程空了再回来继续计算，使用 requestIdleCallback\n\n  <img src=\"react fiber 1.webp\" style=\"zoom:50%;\" />\n\n- Fiber也是一种数据结构\n\n  <font color='orange'>可以随时中断</font>，下次进来可以接着执行。Fiber改造了树结构，加上了指向父节点和兄弟节点的指针，变为一个链表\n\n  1. **child**: 父节点指向**第一个子元素**的指针。\n  2. **sibling**：从第一个子元素往后，指向下一个兄弟元素。\n  3. **return**：所有子元素都有的指向父元素的指针。\n\n  有了这几个指针后，可以在任意一个元素中断遍历并恢复。\n\n  <img src=\"react fiber 2.webp\"  />\n\n***\n\n## 11 React Hooks的作用及原理\n\n[五分钟带你了解 React Hooks 工作原理](https://segmentfault.com/a/1190000021057476)\n\n[一文彻底搞懂react hooks的原理和实现](https://juejin.cn/post/6844903975838285838)\n\nHook 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性\n\n1. useState 是基于 Array+Cursor 来实现。当调用 useState 的时候，传入一个state值，返回形如 `(变量, 函数)` 的一个元祖，自动调用`render`方法来触发视图更新\n   - 第一次渲染时候，根据 useState 顺序，逐个声明 state 并且将其放入全局 Array 中。每次声明 state，都要将 cursor 增加 1。\n   - 更新 state，触发再次渲染的时候。**cursor 被重置为 0**。按照 useState 的声明顺序，依次拿出最新的 state 的值，视图更新\n2. useEffect 可以让你在函数组件中执行副作用操作，数据获取，设置订阅以及手动更改 React 组件中的 DOM 都属于副作用，**useEffect 能根据需要，避免多余的 render**\n\n```javascript\nlet memoizedState = []; // hooks 存放在这个数组\nlet cursor = 0; // 当前 memoizedState 下标\n\nfunction useState(initialValue) {\n  memoizedState[cursor] = memoizedState[cursor] || initialValue;\n  const currentCursor = cursor;\n  function setState(newState) {\n    memoizedState[currentCursor] = newState;\n    render();\n  }\n  return [memoizedState[cursor++], setState]; // 返回当前 state，并把 cursor 加 1\n}\n\nfunction useEffect(callback, depArray) {\n  const hasNoDeps = !depArray;\n  const deps = memoizedState[cursor];\n  const hasChangedDeps = deps\n    ? !depArray.every((el, i) => el === deps[i])\n    : true;\n  \n  if (hasNoDeps || hasChangedDeps) {\n    callback();\n    memoizedState[cursor] = depArray;\n  }\n  \n  cursor++;\n}\n10.31 test git\n```\n\n***\n\n# 计算机基础\n\n## 1 进程和线程\n\n进程：指在系统中运行的一个应用程序，<font color='red'>是系统进行资源分配和调度的基本单位</font>。每个进程都有自己的独立内存空间.\n\n线程：是进程的子任务，进程之内独立执行的一个单元执行流，<font color='red'>是CPU调度和分派的基本单位</font>。\n\n[一篇让你明白进程与线程之间的区别与联系](https://juejin.cn/post/6844903801321685000)\n\n[进程间通信和线程间通信的几种方式](https://www.cnblogs.com/fanguangdexiaoyuer/p/10834737.html#_label5)\n\n------\n\n# TypeScript笔记\n\n**声明语句中只能定义类型，切勿在声明语句中定义具体的实现**\n\n\n\n## 什么是声明文件\n\n通常我们会把声明语句放到一个单独的文件（`jQuery.d.ts`）中，这就是声明文件。声明文件必需以 `.d.ts` 为后缀\n\n```typescript\n// src/jQuery.d.ts\ndeclare var jQuery: (selector: string) => any;\n\n// src/index.ts\njQuery('#foo');\n```\n\n------\n\n\n\n## 书写声明文件\n\n### 全局变量\n\n全局变量的声明文件主要有以下几种语法（<font color=\"red\">**就是使用declare声明类型**</font>）：\n\n- [`declare var/let/const`](https://ts.xcatliu.com/basics/declaration-files.html#declare-var) 声明全局变量\n- [`declare function`](https://ts.xcatliu.com/basics/declaration-files.html#declare-function) 声明全局方法\n- [`declare class`](https://ts.xcatliu.com/basics/declaration-files.html#declare-class) 声明全局类\n- [`declare enum`](https://ts.xcatliu.com/basics/declaration-files.html#declare-enum) 声明全局枚举类型\n- [`declare namespace`](https://ts.xcatliu.com/basics/declaration-files.html#declare-namespace) 声明（含有子属性的）全局对象\n- [`interface` 和 `type`](https://ts.xcatliu.com/basics/declaration-files.html#interface-he-type) 声明全局类型（<font color=\"red\">**不用declare**</font>）\n\n<font color=\"red\">**注意点：**</font>\n\n1. declare namespace内部直接使用 `function ajax` 来声明函数，而不是使用 `declare function ajax`。类似的，也可以使用 `const`, `class`, `enum` 等语句\n\n   ```typescript\n   // src/jQuery.d.ts\n   declare namespace jQuery {\n       function ajax(url: string, settings?: any): void;\n       const version: number;\n       class Event {\n           blur(eventType: EventType): void\n       }\n       enum EventType {\n           CustomClick\n       }\n   }\n   ```\n   \n2. 类型声明文件中，可以直接使用 `interface` 或 `type` 来声明一个全局的接口或类型，<font color=\"red\">**不用declare**</font>，在其他文件中也可以使用这个接口或类型\n\n   ```typescript\n   // src/jQuery.d.ts\n   interface AjaxSettings {\n       method?: 'GET' | 'POST'\n       data?: any;\n   }\n   declare namespace jQuery {\n       function ajax(url: string, settings?: AjaxSettings): void;\n   }\n   \n   // src/index.ts\n   let settings: AjaxSettings = {\n       method: 'POST',\n       data: {\n           name: 'foo'\n       }\n   };\n   jQuery.ajax('/api/post_something', settings);\n   ```\n\n3. 暴露在最外层的 `interface` 或 `type` 会作为全局类型作用于整个项目中，故最好将他们放到 `namespace` 下\n\n4. 声明合并：可以组合多个声明语句，它们会不冲突的合并起来\n\n   ```typescript\n   // src/jQuery.d.ts\n   declare function jQuery(selector: string): any;\n   declare namespace jQuery {\n       function ajax(url: string, settings?: any): void;\n   }\n   \n   // src/index.ts\n   jQuery('#foo');\n   jQuery.ajax('/api/get_something');\n   ```\n\n------\n\n\n\n### npm 包\n\n- 声明文件位置：\n\n1. 与该 npm 包绑定在一起。 `package.json` 中有 `types` 字段，或者有一个 `index.d.ts` 声明文件\n2. 发布到 `@types` 里。尝试安装一下对应的 `@types` 包， `npm install @types/foo --save-dev\n\n\n\n- npm 包的声明文件主要有以下几种语法：\n\n  [`export`](https://ts.xcatliu.com/basics/declaration-files.html#export) 导出变量\n\n  [`export namespace`](https://ts.xcatliu.com/basics/declaration-files.html#export-namespace) 导出（含有子属性的）对象\n\n  [`export default`](https://ts.xcatliu.com/basics/declaration-files.html#export-default) ES6 默认导出\n\n  [`export =`](https://ts.xcatliu.com/basics/declaration-files.html#export-1) commonjs 导出模块\n  \n  \n\n- 在 npm 包的声明文件中，<font color=\"red\">使用 `declare` 不再会声明一个全局变量</font>，而只会在当前文件中声明一个局部变量。只有在声明文件中使用 `export` 导出，然后在使用方 `import` 导入后，才会应用到这些类型声明。\n\n\n\n<font color=\"red\">**用法:**</font>\n\n直接`export`导出类型\n\n```typescript\n// types/foo/index.d.ts\n\nexport const name: string;\nexport function getName(): string;\nexport class Animal {\n    constructor(name: string);\n    sayHi(): string;\n}\nexport enum Directions {\n    Up,\n    Down,\n    Left,\n    Right\n}\nexport interface Options {\n    data: any;\n}\n```\n\n使用 `declare` 先声明多个变量，用 `export` 导出\n\n```typescript\n// types/foo/index.d.ts\n\ndeclare const name: string;\ndeclare function getName(): string;\ndeclare class Animal {\n    constructor(name: string);\n    sayHi(): string;\n}\ndeclare enum Directions {\n    Up,\n    Down,\n    Left,\n    Right\n}\ninterface Options {\n    data: any;\n}\n\nexport { name, getName, Animal, Directions, Options };\n```\n\n------\n\n\n\n### 声明文件中的依赖\n\n一个声明文件有时会依赖另一个声明文件中的类型。除了可以在声明文件中通过 `import` 导入另一个声明文件中的类型之外，还可以使用三斜线指令。\n\n- 书写一个全局变量的声明文件时\n\n  全局变量的声明文件中，是不允许出现 `import`, `export` 关键字的。一旦出现了，那么他就会被视为一个 npm 包或 UMD 库，就不再是全局变量的声明文件了。故当我们在书写一个全局变量的声明文件时，如果需要引用另一个库的类型，那么就必须用三斜线指令\n\n  ```typescript\n  // types/jquery-plugin/index.d.ts\n  \n  /// <reference types=\"jquery\" />\n  \n  declare function foo(options: JQuery.AjaxSettings): string;\n  \n  // src/index.ts\n  foo({});\n  ```\n\n- 需要依赖一个全局变量的声明文件时\n\n  需要依赖一个全局变量的声明文件时，由于全局变量不支持通过 `import` 导入，当然也就必须使用三斜线指令来引入\n\n  ```typescript\n  // types/node-plugin/index.d.ts\n  \n  /// <reference types=\"node\" />\n  \n  export function foo(p: NodeJS.Process): string;\n  \n  // src/index.ts\n  import { foo } from 'node-plugin';\n  \n  foo(global.process);\n  ```\n\n  \n","source":"_posts/issues.md","raw":"---\ntitle: 面试八股\ndate: 2024-06-16 13:44:20\ntags:\n- 八股\ncategories:\n- 前端\n---\n\n# JavaScript\n\n\n\n## 1  原始值和引用值类型及区别\n\n[JavaScript 深入了解基本类型和引用类型的值](https://www.runoob.com/w3cnote/javascript-basic-types-and-reference-types.html)\n\n**原始值（简单数据类型）**：存储在栈中的简单数据段，也就是说，它们的值直接存储在变量访问的位置。\n6种简单数据类型：undefined、null、boolean、number、string、symbol；可以通过typeof 运算符来判断一个值是否在某种类型的范围内，如果它是原始类型，还可以判断它表示哪种原始类型(除null)。\n\n<img src=\"原始数据类型.png\" style=\"zoom:80%;\" />\n\n**引用值（复杂数据类型）**：存储在堆中的对象，放在变量的栈空间中的值是该对象存储在堆中的地址，也就是说，存储在变量处的值是一个指针（内存地址），指向存储对象的堆内存中。\n包含：Object、function、array等。\n\n<img src=\"引用数据类型.png\"  />\n\n**<font color=\"#dd0000\">区别：</font>**\n\n简单数据类型的值是储存在栈中，当把一个变量传递给另一个变量时，是把一个栈中的东西复制到另一个到栈中，并且这两个变量互不影响，修改其中的变量值时，不会改变另外一个变量的结果。\n\n引用数据类型是把变量标识符和和指向堆内存中该对象的指针（内存地址）存储在栈中，但是把其实际对象存储在堆中，栈中的内存地址指向堆中的实际对象，当把引用对象传递给另一个变量时，复制的其实是指向实际对象的指针（内存地址），此时两者指向的是同一个数据，若通过方法改变其中一个变量的值，则访问另一个变量时，其值也会跟着改变。\n\n------\n\n\n\n## 2 判断数据类型\n\n### typeof\n\n优点：能快速检查undefined,string,number,boolean,function类型\n缺点：当类型为object,null,array时都会返回object,所以不能区分这三类\n\n### instanceof\n\n用于检测构造函数的 prototype 属性是否出现在某个实例对象的原型链上。\n\n优点：能检测array,function,object类型 \n缺点:  检测不了字面量定义的number,boolean,string\n\n### Object.prototype.toString.call()\n\n优点：能准确的判断所有的类型。\n缺点：写法过于繁琐\n\n### constructor\n\n- 构造函数的原型中包含属性 `constructor` 指向该构造函数,但是他是不安全的，因为contructor的指向是可以被改变\n- null、undefined没有construstor方法，因此constructor不能判断undefined和null。\n\n***\n\n\n\n## 3 类数组与数组的区别与转换\n\n- 类数组对象：arguments对象、DOM对象列表;\n\n- 类数组对象也有length属性,可以这种取值: NodeList[0]、NodeList.item(0);\n\n  **<font color=\"#dd0000\">区别：</font>**：数组对象的类型是Array,类数组对象的类型是object，也就是说类数组原型是Object;类数组不具有数组所具有的方法。\n\n  **<font color=\"#dd0000\">转换：</font>**\n\n  1. Array.prototype.slice.call(arrayLike, start);\n  2.  Array.from(arrayLike)\n  3. 扩展运算符`[...arrayLike]`\n\n***\n\n## 4 数组常见API\n\n[js数组方法整理](https://www.cnblogs.com/zyfeng/p/10541133.html)\n\n***\n\n## 5 call,apply,bind\n\n[JavaScript 中 call()、apply()、bind() 的用法](https://www.runoob.com/w3cnote/js-call-apply-bind.html)\n\n***\n\n## 6 new的原理\n\n1. 创建一个空对象obj（{}）；\n2. 将obj的[[prototype]]属性指向构造函数constrc的原型（即obj.[[prototype]] = constrc.prototype）；\n3. 将构造函数constrc内部的this绑定到新建的对象obj，执行constrc（也就是跟调用普通函数一样，只是此时函数的this为新创建的对象obj）；\n4. 若构造函数没有返回引用类型，则返回该新建的对象obj（默认会添加return this）。否则，返回引用类型的值。\n\n<img src=\"20191119212535220.png\" style=\"zoom: 67%;\" />\n\n***\n\n## 7 正确判断this\n\n[前端JS必备知识点：如何正确的判断this的指向?](https://blog.csdn.net/weixin_42721322/article/details/106391922)\n\n***\n\n## 8 闭包及其作用\n\n闭包指子函数可以访问外部作用域变量的函数特性，即使在子函数作用域外也可以访问。如果没有闭包那么在处理事件绑定，异步请求时都会变得困难。\n\n由于在Javascript语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成\"定义在一个函数内部的函数\"。所以，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。\n\n- JS中的所有函数都是闭包\n- 闭包一般在子函数本身作用域以外执行，即延伸作用域\n\n闭包可以用在许多地方。它的最大用处有两个：\n\n- 在函数外可以读取函数内部的变量\n- 让这些变量的值始终保持在内存中。\n\n坏处：\n\n由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。\n解决方法是，在退出函数之前，将不使用的局部变量全部删除。\n\n[彻底理解JS闭包](https://www.cnblogs.com/itjeff/p/10106855.html)\n[学习Javascript闭包（Closure）](https://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html)\n[setTimeout函数之循环和闭包](https://www.jianshu.com/p/e5225ba4a025)\n\n***\n\n## 9 原型\n\n<img src=\"proto.png\" style=\"zoom:67%;\" />\n\n[ 原型基础](https://houdunren.gitee.io/note/js/11%20%E5%8E%9F%E5%9E%8B%E4%B8%8E%E7%BB%A7%E6%89%BF.html#%E5%8E%9F%E5%9E%8B%E5%9F%BA%E7%A1%80)\n\n***\n\n\n\n## 10 继承的几种方式\n\n[JavaScript深入之继承的多种方式和优缺点](https://github.com/mqyqingfeng/Blog/issues/16)\n\n### ①原型链继承\n\n1.引用类型的属性被所有实例共享\n2.在创建 Child 的实例时，不能向Parent传参\n\n```javascript\nfunction Parent () {\n    this.name = 'kevin';\n}\nParent.prototype.getName = function () {\n    console.log(this.name);\n}\nfunction Child () {}\nChild.prototype = new Parent();\nvar child = new Child();\nconsole.log(child.getName()) // kevin\n```\n\n### ②借用构造函数（经典继承）\n\n优点：\n\n1.避免了引用类型的属性被所有实例共享\n\n2.可以在 Child 中向 Parent 传参\n\n缺点：\n\n方法都在构造函数中定义，每次创建实例都会创建一遍方法。\n\n```javascript\nfunction Parent () {\n    this.names = ['kevin', 'daisy'];\n}\nfunction Child () {\n    Parent.call(this);\n}\nvar child1 = new Child();\nchild1.names.push('yayu');\nconsole.log(child1.names); // [\"kevin\", \"daisy\", \"yayu\"]\n\nvar child2 = new Child();\nconsole.log(child2.names); // [\"kevin\", \"daisy\"]\n```\n\n### ③组合继承\n\n优点：融合原型链继承和构造函数的优点，是 JavaScript 中最常用的继承模式。\n\n```javascript\nfunction Parent (name) {\n    this.name = name;\n    this.colors = ['red', 'blue', 'green'];\n}\nParent.prototype.getName = function () {\n    console.log(this.name)\n}\n\nfunction Child (name, age) {\n    Parent.call(this, name);\n    this.age = age;\n}\n\nChild.prototype = new Parent();\nChild.prototype.constructor = Child;\n\nvar child1 = new Child('kevin', '18');\nchild1.colors.push('black');\nconsole.log(child1.name); // kevin\nconsole.log(child1.age); // 18\nconsole.log(child1.colors); // [\"red\", \"blue\", \"green\", \"black\"]\n\nvar child2 = new Child('daisy', '20');\nconsole.log(child2.name); // daisy\nconsole.log(child2.age); // 20\nconsole.log(child2.colors); // [\"red\", \"blue\", \"green\"]\n```\n\n### ④原型式继承\n\n原型式继承继承的基本思想：在 object() 函数内部，先创建一个临时性的构造函数，然后将传入的对象作为这个构造函数的原型，最后返回了这个临时类型的一个新实例。相当于Object.create()\n\n缺点：\n\n包含引用类型值的属性会被所有实例共享，这点跟原型链继承一样。\n\n```javascript\nfunction createObj(o) {\n    function F(){}\n    F.prototype = o;\n    return new F();\n}\n```\n\n### ⑤寄生式继承\n\n创建一个仅用于封装继承过程的函数，该函数在内部以某种形式来做增强对象，最后返回对象\n\n缺点：跟借用构造函数模式一样，每次创建对象都会创建一遍方法。\n\n```javascript\nfunction createObj (o) {\n    var clone = Object.create(o);\n    clone.sayName = function () {\n        console.log('hi');\n    }\n    return clone;\n}\n```\n\n### ⑥寄生组合式继承\n\n这种方式的高效率体现它只调用了一次 Parent 构造函数，并且因此避免了在 Parent.prototype 上面创建不必要的、多余的属性。\n\n与此同时，原型链还能保持不变；因此，还能够正常使用 instanceof 和 isPrototypeOf。\n\n开发人员普遍认为寄生组合式继承是引用类型最理想的继承范式。\n\n```javascript\nfunction object(o) {\n    function F() {}\n    F.prototype = o;\n    return new F();\n}\n\nfunction prototype(child, parent) {\n    var prototype = object(parent.prototype);\n    prototype.constructor = child;\n    child.prototype = prototype;\n}\n\n// 当我们使用的时候：\nprototype(Child, Parent);\n```\n\n***\n\n## 11 深拷贝与浅拷贝\n\n- 浅拷贝：for in,Object.assign,展开语法。\n- 深拷贝：\n\n```javascript\nJSON.parse(JSON.stringify(obj))\n```\n\n```javascript\nfunction copy(object) {\n  let obj = object instanceof Array ? [] : {};\n  for (const [k, v] of Object.entries(object)) {\n    obj[k] = typeof v == \"object\" ? copy(v) : v;\n  }\n  return obj;\n}\n```\n\n***\n\n## 12  防抖和节流\n\n[js 函数的防抖(debounce)与节流(throttle)](https://www.cnblogs.com/cc-freiheit/p/10827372.html)\n\n### 防抖\n\n```javascript\n//每次执行都将前一次清掉，只执行最后一次\nfunction debounce(fn, delay) {\n    let timer = null\n    return function () {\n        clearTimeout(timer)\n        timer = setTimeout(() => {\n            fn.apply(this, arguments)\n        }, delay)\n    }\n}\n$('#content').onmousemove = debounce(fn,1000)\n```\n\n### 节流\n\n```javascript\n//一段时间只执行一次\nfunction throttle(fn, delay) {\n    let pre = 0\n    return function () {\n        let now = Date.now()\n        if (now - pre > delay) {\n            fn.apply(this, arguments)\n            pre = now\n        }\n    }\n}\n//计时器方法，如果timeout正在计时，就不执行，这样一段时间只执行一次\nfunction throttle2(fn, delay) {\n    let timeout\n    return function () {\n        if (!timeout) {\n            timeout = setTimeout(() => {\n                timeout = null\n                fn.apply(this, arguments)\n            }, delay)\n        }\n    }\n}\n$('#content').onmousemove = throttle(fn,1000)\n```\n\n***\n\n## <font color='red'>13  作用域和作用域链、执行期上下文</font>\n\n### 词法作用域\n\n词法作用域是指在词法分析阶段就确定了，不会改变。变量的作用域是在定义时决定而不是执行时决定，也就是说词法作用域取决于源码，通过静态分析就能确定，因此词法作用域也叫做静态作用域。\n\n```javascript\nlet value = 10\nfunction a() {\n    console.log(value)\n}\nfunction b() {\n    let value = 22\n    a()\n}\nb()//10\n```\n\n### 上下文(context)\n\n指作用域。每个上下文都有一个关联的变量对象（variable object），这个上下文中定义的所有变量和函数都存在于这个对象上。上下文中的代码在执行的时候，会创建变量对象的一个作用域链（scope chain）\n\n### 作用域链\n\n当查找变量的时候，会先从当前上下文的变量对象中查找，如果没有找到，就会从父级(词法层面上的父级)执行上下文的变量对象中查找，一直找到全局上下文的变量对象，也就是全局对象。这样由多个执行上下文的变量对象构成的链表就叫做作用域链。\n\n### 执行期上下文\n\n[https://blog.csdn.net/qq_27626333/article/details/78463565](https://blog.csdn.net/qq_27626333/article/details/78463565)\n\n***\n\n\n\n## 14 DOM常见操作\n\n[DOM基础知识](https://houdunren.gitee.io/note/js/18%20DOM.html#%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86)\n\n***\n\n\n\n## 15 Array.sort()方法与实现机制\n\n插入排序，快排（chrome)\n\n***\n\n\n\n## 16 AJAX的请求过程\n\n1. 创建XMLHttpRequest对象xhr\n2. 设置回调函数\n3. open方法初始化请求参数\n4. send方法发送数据\n5. 在回调函数中处理响应状态\n\n<img src=\"readystate.bmp\" style=\"zoom: 80%;\" />\n\n```javascript\n\nvar xhr = new XMLHttpRequest();\nxhr.onreadystatechange = function(){\n  if (xhr.readyState === 4 && xhr.status === 200) console.log(xhr.responseText)\n  else {console.error(xhr.statusText);\n}\nxhr.open('GET', '/endpoint', true);\nxhr.send(data);\n\n```\n\n***\n\n## 17 JS的垃圾回收机制\n\n[前端面试：谈谈 JS 垃圾回收机制](https://segmentfault.com/a/1190000018605776)\n\n1. 垃圾:一般来说没有被引用的对象就是垃圾，就是要被清除， 有个例外如果几个对象引用形成一个环，互相引用，但根访问不到它们，这几个对象也是垃圾，也要被清除。\n\n2. 垃圾回收算法\n\n   - 标记清除：\n     1. 垃圾回收器获取根并“标记”。（根：无法删除的基本的固有可达值：①函数的变量，参数。②嵌套调用链上的其他函数的变量和参数。③全局变量等\n     2. 然后它访问并“标记”所有来自根的引用。\n     3. 然后它访问标记的对象并标记它们的引用。所有被访问的对象都被记住，以便以后不再访问同一个对象两次。 \n     4. 以此类推，直到有未访问的引用(可以从根访问)为止。\n     5. 除标记的对象外，所有对象都被删除。\n   - 引用计数\n\n   所谓”引用计数”是指语言引擎有一张”引用表”，保存了内存里面所有的资源（通常是各种值）的引用次数。如果一个值的引用次数是0，就表示这个值不再用到了，因此可以将这块内存释放\n\n***\n\n## 18 String,Math方法\n\n[总结JS中string、math、array的常用的方法](https://www.cnblogs.com/lihuijuan/p/8490578.html)\n\n## 19 addEventListener和onClick()的区别\n\n- onClick直接触发事件，同一时间只能指向唯一对象，会被覆盖掉.\n- addEventListener，同一事件类型可以设置多个事件处理程序，按设置的顺序先后执行，且可以控制触发阶段，`{ capture: true/false }`\n\n***\n\n\n\n## 20 new和Object.create区别\n\n- new将对象的\\_\\_proto\\_\\_指向构造函数的prototype\n- Object.create将新对象的\\_\\_proto\\_\\_指向指定的对象\n\n***\n\n\n\n## 21 DOM的location对象\n\n<img src=\"16eea8822b4d1239.jpg\"  />\n\n***\n\n\n\n## 22 BOM属性对象方法\n\n<img src=\"BOM.png\"/>\n\n[JS BOM详解](https://juejin.cn/post/6844904015646441485)\n\n***\n\n## 23 浏览器从输入URL到页面渲染的整个流程\n\n1. DNS解析\n2. TCP连接\n3. 发送HTTP请求\n4. 服务器处理请求并返回HTTP报文\n5. 浏览器解析渲染页面\n6. 连接结束\n\n详细：\n\n- 输入url后，首先需要找到这个url域名的服务器ip,为了寻找这个ip，浏览器首先会寻找缓存，查看缓存中是否有记录，缓存的查找记录为：浏览器缓存-》系统缓存-》路由器缓存，缓存中没有则查找系统的hosts文件中是否有记录，如果没有则查询DNS服务器，得到服务器的ip地址。\n- 三次握手建立TCP连接\n\n- 浏览器构建http请求，并将这个http请求封装在一个tcp包中，这个tcp包会依次经过传输层，网络层，数据链路层，物理层到达服务器，服务器解析这个请求来作出响应，返回相应的html给浏览器\n\n- 渲染页面：\n  1. 构建DOM树(DOM tree)：从上到下解析HTML文档生成DOM节点树（DOM tree）；\n  2. 构建CSS对象模型(CSS Object Model)树：加载解析样式生成CSSOM树；\n  3. 执行JavaScript：加载并执行JavaScript代码（js代码会造成阻塞）；\n  4. 构建渲染树(render tree)：根据DOM树和CSSOM树,生成渲染树(render tree)；\n  5. 渲染树：按顺序展示在屏幕上的一系列矩形，这些矩形带有字体，颜色和尺寸等视觉属性。\n  6. 布局（layout）：根据渲染树将节点树的每一个节点布局在屏幕上的正确位置；\n  7. 绘制（painting）：遍历渲染树绘制所有节点，为每一个节点适用对应的样式，这一过程是通过UI后端模块完成；\n  \n- 关闭连接\n\n***\n\n## 24 跨域、同源策略及跨域实现方式和原理\n\n[前端多种跨域方式实现原理详解](https://segmentfault.com/a/1190000022304066)\n[跨域资源共享 CORS 详解](http://www.ruanyifeng.com/blog/2016/04/cors.html)\n\n***\n\n## 25 浏览器的回流（Reflow）和重绘（Repaints）\n\n浏览器渲染过程如下：\n\n1. 解析HTML，生成DOM树，解析CSS，生成CSSOM树\n2. 将DOM树和CSSOM树结合，生成渲染树(Render Tree)\n3. Layout(回流):根据生成的渲染树，进行回流(Layout)，得到节点的几何信息（位置，大小）\n4. Painting(重绘):根据渲染树以及回流得到的几何信息，得到节点的绝对像素\n5. Display:将像素发送给GPU，展示在页面上。\n\n<img src=\"回流和重绘.png\"  />\n\n- 回流：这一阶段主要是计算节点的位置和几何信息，那么当<font color='red'>页面布局和几何信息</font>发生变化的时候，就需要回流\n  - 添加或删除可见的DOM元素\n  - 元素的位置发生变化\n  - 元素的尺寸发生变化（包括外边距、内边框、边框大小、高度和宽度等）\n  - 内容发生变化，比如文本变化或图片被另一个不同尺寸的图片所替代。\n  - 页面一开始渲染的时候（这肯定避免不了）\n  - 浏览器的窗口尺寸变化（因为回流是根据视口的大小来计算元素的位置和大小的）\n- 重绘：由于节点的几何属性发生改变或者由于样式发生改变而不会影响布局的，称为重绘，例如`outline`, `visibility`, `color`、`background-color`等\n- <font color='red'>回流一定会触发重绘，而重绘不一定会回流</font>\n- 减少重绘与回流：[介绍下重绘和回流（Repaint & Reflow），以及如何进行优化](https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/24)\n\n***\n\n## 26  arguments\n\narguments 是函数获得到所有参数集合\n\n```javascript\nfunction sum() {\n  return [...arguments].reduce((total, num) => {\n    return (total += num);\n  }, 0);\n}\nconsole.log(sum(2, 3, 4, 2, 6)); //17\n```\n\n***\n\n## 27 EventLoop事件循环，宏任务，微任务\n\nJavaScript 语言的一大特点就是单线程，也就是说同一个时间只能处理一个任务。为了协调事件、用户交互、脚本、UI 渲染和网络处理等行为，防止主线程的不阻塞，（事件循环）Event Loop的方案应用而生。\n\nJavaScript 处理任务是在等待任务、执行任务 、休眠等待新任务中不断循环中，也称这种机制为事件循环。\n\n- 主线程中的任务执行完后，才执行任务队列中的任务\n- 有新任务到来时会将其放入队列，采取先进先执行的策略执行队列中的任务\n- 比如多个 `setTimeout` 同时到时间了，就要依次执行\n\n任务包括 script(整体代码)、 setTimeout、setInterval、DOM渲染、DOM事件、Promise、XMLHTTPREQUEST等\n\n- 宏任务：\n\n  ```text\n  script(整体代码)\n  setTimeout\n  setInterval\n  I/O\n  UI交互事件\n  postMessage\n  MessageChannel\n  setImmediate(Node.js 环境)\n  ```\n\n- 微任务:微任务一般由用户代码产生，微任务较宏任务执行优先级更高\n\n  ```text\n  Promise.then\n  Object.observe\n  MutaionObserver\n  process.nextTick(Node.js 环境)\n  ```\n\n***\n\n## 28 函数柯里化及其通用封装\n\n柯里化是一种将使用多个参数的一个函数转换成一系列使用一个参数的函数的技术。\n函数柯里化，其实就是把多次调用的变量保存在闭包中，每次调用都查看一下变量数和原函数的形参数量是否相等。不相等就继续递归。直到相等为止就处理了\n\n```javascript\n //ES5\nfunction curry1(func, ...args) {\n     if (args.length < func.length) {\n         return function () {\n             return curry(func, ...args, ...arguments)\n         }\n     }\n     else return func(...args)\n }\n//ES6\nlet curry2 = (func, ...args) => args.length < func.length ? (...args2) => curry2(func, ...args, ...args2) : func(...args)\n\nfunction add(a, b) {\n    return a + b;\n}\n\nvar addCurry = curry(add);\nconsole.log(addCurry(1)(2))\n```\n\n***\n\n\n\n## 29 ==和===区别\n\n`===` 严格相等，会比较两个值的类型和值\n`==`  抽象相等，比较时，会先进行类型转换，然后再比较值\n\n```javascript\nvar num = 0;\nvar obj = new String(\"0\");\nvar str = \"0\";\nvar b = false;\n\nconsole.log(num === num); // true\nconsole.log(obj === obj); // true\nconsole.log(str === str); // true\n\nconsole.log(num === obj); // false\nconsole.log(num === str); // false\nconsole.log(obj === str); // false\nconsole.log(null === undefined); // false\nconsole.log(obj === null); // false\nconsole.log(obj === undefined); // false\n```\n\n```javascript\nvar num = 0;\nvar obj = new String(\"0\");\nvar str = \"0\";\nvar b = false;\n\nconsole.log(num == num); // true\nconsole.log(obj == obj); // true\nconsole.log(str == str); // true\n\nconsole.log(num == obj); // true\nconsole.log(num == str); // true\nconsole.log(obj == str); // true\nconsole.log(null == undefined); // true\n\n// both false, except in rare cases\nconsole.log(obj == null);\nconsole.log(obj == undefined);\n```\n\n***\n\n\n\n## 30 setTimeout 误差\n\n主线程执行任务花费时间大于定时器时间，定时器的回调在宏任务队列里，来不及调用\n\n\n```javascript\nconsole.log(\"start\");\nsetTimeout(function(){\n    console.log(\"timeout\");\n},5000);\nfor(let i = 0;i <= 500000;i++){\n    console.log(\"i:\",i);\n}\nconsole.log(\"end\");\n\n结果：\nstart\ni:1 \n(...) //一直输出到500000\n//耗时14秒左右\nend\n//没有等待\ntimeout\n```\n\n***\n\n## 31 循环比较\n\n1. for循环，写法麻烦\n\n2. 数组`foreach`，无法中途跳出`forEach`循环，`break`命令或`return`命令都不能奏效。\n\n3. `for...in`循环可以遍历数组的键名。\n\n   ```javascript\n   for (var index in myArray) {\n     console.log(myArray[index]);\n   }\n   ```\n\n   `for...in`循环有几个缺点。\n\n   - 数组的键名是数字，但是`for...in`循环是以字符串作为键名“0”、“1”、“2”等等。\n   - `for...in`循环不仅遍历数字键名，还会遍历手动添加的其他键，甚至包括原型链上的键。\n   - 某些情况下，`for...in`循环会以任意顺序遍历键名。\n\n   总之，`for...in`循环主要是为遍历对象而设计的，不适用于遍历数组。\n\n4. for...of循环内部调用的是数据结构的遍历器。`for...of`循环相比上面几种做法，有一些显著的优点:\n\n   - 有着同`for...in`一样的简洁语法，但是没有`for...in`那些缺点。\n   - 不同于`forEach`方法，它可以与`break`、`continue`和`return`配合使用。\n   - 提供了遍历所有数据结构的统一操作接口\n\n***\n\n## 32 异步方式比较\n\n- 回调：回调地狱\n- promise:代码完全都是 Promise 的 API（`then`、`catch`等等）\n- generator:必须有一个任务运行器，自动执行 Generator 函数；而且必须保证`yield`语句后面的表达式，必须返回一个 Promise\n- async:实现最简洁\n\n***\n\n## 33 模块加载方案比较\n\n- CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用。\n\n  ```\n  CommonJS 模块输出的是值的拷贝，也就是说，一旦输出一个值，模块内部的变化就影响不到这个值。\n  ```\n\n- CommonJS 模块是运行时加载，ES6 模块是编译时输出接口。\n\n  ```\n  CommonJS 加载的是一个对象（即`module.exports`属性），该对象只有在脚本运行完才会生成。而 ES6 模块不是对象，它的对外接口只是一种静态定义，在代码静态解析阶段就会生成。\n  ES6 模块的运行机制与 CommonJS 不一样。JS 引擎对脚本静态分析的时候，遇到模块加载命令import，就会生成一个只读引用。等到脚本真正执行时，再根据这个只读引用，到被加载的那个模块里面去取值。原始值变了，import加载的值也会跟着变。因此，ES6 模块是动态引用，并且不会缓存值，模块里面的变量绑定其所在的模块。\n  ```\n\n- CommonJS 模块的`require()`是同步加载模块，ES6 模块的`import`命令是异步加载，有一个独立的模块依赖的解析阶段。\n\n  ```\n  默认情况下，浏览器是同步加载 JavaScript 脚本，即渲染引擎遇到<script>标签就会停下来，等到执行完脚本，再继续向下渲染。如果是外部脚本，还必须加入脚本下载的时间。<script>标签打开defer或async属性，脚本就会异步加载。渲染引擎遇到这一行命令，就会开始下载外部脚本，但不会等它下载和执行，而是直接执行后面的命令。`defer`是“渲染完再执行”，`async`是“下载完就执行”。\n  \n  浏览器对于带有`type=\"module\"`的`<script>`，都是异步加载，不会造成堵塞浏览器，即等到整个页面渲染完，再执行模块脚本，<font color='orange'>等同于打开了`<script>`标签的`defer`属性。</font>\n  ```\n\n\n***\n\n\n\n## 34  ES6,ES5继承内置类\n\n- ES5中，这些原生构造函数是无法继承的，因为子类无法获得原生构造函数的内部属性，通过Array.apply()或者分配给原型对象都不行。原生构造函数会忽略apply方法传入的this，也就是说，原生构造函数的this无法绑定，导致拿不到内部属性。ES5 是先新建子类的实例对象this，再将父类的属性添加到子类上，由于父类的内部属性无法获取，导致无法继承原生的构造函数\n\n- ES6 允许继承原生构造函数定义子类，因为 ES6 是先新建父类的实例对象`this`，然后再用子类的构造函数修饰`this`，使得父类的所有行为都可以继承。\n\n***\n\n# Html&CSS\n\n## 1 CSS权重及其引入方式\n\n引入方式：内联式（行内），嵌入式（页内style标签)，外链式(link)，导入式(import)\n\n权重：\n\n- 内联式优先级最高；嵌入式，外链式在后面的优先级高。\n- id优先级高于class\n- important > 内嵌样式 > ID > 类 > 标签 | 伪类 | 属性选择 > 伪对象 > 继承 > 通配符\n\n权重值：把特殊性分为4个等级，每个等级代表一类选择器，每个等级的值为其所代表的选择器的个数乘以这一等级的权值，最后把所有等级的值相加得出选择器的特殊值。\n\n1. 第一等：代表内联样式，如: style=””，权值为1000。\n2. 第二等：代表ID选择器，如：#content，权值为100。\n3. 第三等：代表类，伪类和属性选择器，如.content a:link :[title]，权值为10。\n4. 第四等：代表类型选择器和伪元素选择器，如div p ::before，权值为1。\n5. 通配符 * 没有权重，权值为0.\n\n***\n\n## 2  a标签全部作用\n\n- 外部页面链接  `<a href=\"http://www.baidu.com\" target=\"_blank\">百度</a>`\n- 本地页面链接 `<a href=\"demo02.html\" target=\"_blank\">打开demo02</a>`\n- 锚点链接（页面内部区域跳转）`<a href=\"#part1\">第1章</a>`跳到 `<p id=\"part1\">第1章</p>`\n\n***\n\n## 3 用CSS画三角形\n\n```css\n#demo {\n            width: 0px;\n            height: 0px;\n            border: 60px solid transparent;//transparent使背景透明\n            border-bottom: 60px solid red;\n        }\n```\n\n***\n\n## 4 未知宽高元素水平垂直居中（方案及比较）\n\n1. 定位：\n\n   ```css\n           .father {\n               position: relative;\n               width: 200px;\n               height: 200px;\n               background: skyblue;\n           }\n           .son {\n               position: absolute;\n               top: 50%;\n               left: 50%;\n               transform: translate(-50%,-50%);\n               width: 100px;\n               height: 100px;\n               background: red;\n           }\n   ```\n\n2. flex/grid:\n\n   ```css\n           .father {\n               display: flex/grid;\n               justify-content: center;\n               align-items: center;\n               width: 200px;\n               height: 200px;\n               background: skyblue;\n           }\n           .son {\n               width: 100px;\n               height: 100px;\n               background: red;\n           }\n   ```\n\n3. table布局\n\n   ```css\n     .father {\n               display: table-cell;\n               width: 200px;\n               height: 200px;\n               background: skyblue;\n               vertical-align: middle;\n               text-align: center;\n           }\n           .son {\n               display: inline-block;\n               width: 100px;\n               height: 100px;\n               background: red;\n           }\n   ```\n\n***\n\n## 5 HTML元素划分\n\n### 块级元素\n\n在html中`div,p,h1,form,ul,li`就是块级元素。设置`display:block`就是将元素显示为块级元素。块级元素特点：\n\n- 每个块级元素都从新的一行开始，并且其后的元素也另起一行；（**一个块级元素独占一行**）\n- 元素的高度、宽度、行高以及顶和底边距都可设置；\n- 元素宽度在不设置的情况下，是它本身父容器的*100%（和父元素的宽度一致），除非设定一个宽度。\n\n### 内联元素\n\n在html中`span,a,label,input,img,strong,em`就是典型的内联元素（行内元素）（inline）元素。当然块状元素也可以通过代码`display:inline`将元素设置为内联元素。内联元素特点：\n\n- 和其他元素都在一行上\n- 元素的高度、宽度、行高及顶部和底部边距不可设置；\n- 元素的宽度就是它包含的文字或图片的宽度，不可改变。\n\n注意：为 a 元素设置了宽和高，但都没有起到作用，原因是**a在默认的时候是内联元素，内联元素是不可以设置宽和高的**。\n\n### 内联块状元素\n\n内联块状元素（`inline-block`）就是同时具备内联元素、块状元素的特点，代码`display:inline-block`就是将元素设置为内联块状元素。inline-block元素特点：\n\n- **和其他元素都在一行上；**\n- **元素的高度、宽度、行高以及顶和底边距都可设置**\n\n<font color='orange'>注意：img是inline元素，但是他同时也是替换元素，他有着特殊的表现：</font>\n\n- **可以设置width/height;**\n- 默认的，img元素在屏幕占据的空间与其图片的实际像素一致，除非CSS有设置或者自身的width/height HTML 属性有设置；\n- 如果img标签的包裹元素为也为inline元素，则img的边界可以超出其直接父元素的边界，直到自己的宽、高达到最大或者设定值为止，而且文档流中img的兄弟元素也不能遮盖住img。最常见的就是a标签里面包含的img标签；\n- 所以从行为上看,img元素作为替换元素，有着类似于Inline-block的行为，尽管在SPEC里面，他的确是一个inline元素。\n\n***\n\n\n\n## 6 盒子模型，定位\n\n[菜鸟教程](https://www.runoob.com/css/css-positioning.html)\n\n***\n\n\n\n## 7 margin塌陷及合并问题\n\n### margin塌陷\n\n嵌套父子块级元素垂直方向（次方向）的margin会结合到一起，并取最大的值，子元素的margin会往父元素顶部上方方向塌陷（父盒子里面没有文字，也没有边框（border），也没有padding-top ）\n\n<font color='red'>解决方法</font>:\n\n1. 给父级设置边框或内边距(不建议使用)\n2. 触发BFC：\n   - position:absolute/fixed\n   - display:inline-block;\n   - float:left/right;\n   - overflow:hidden;\n\n### margin合并\n\n兄弟块级元素间垂直方向的margin值会合并在一起并取最大值\n\n<font color='red'>解决方法</font>:给任意一个元素加一个父级元素并触发BFC就可以将其子元素不受到外界影响，如同加了一个“顶”\n\n***\n\n## 8 display及相关属性\n\n[CSS display 属性](https://www.runoob.com/cssref/pr-class-display.html)\n\n[CSS中用 opacity、visibility、display 属性将 元素隐藏 的 对比分析](https://segmentfault.com/a/1190000015116392)\n\n![](display opacity visibility 对比.png)\n\n***\n\n## 9 IFC 与 BFC\n\n[BFC与IFC概念理解+布局规则+形成方法+用处](https://segmentfault.com/a/1190000009545742)\n\n[深入理解BFC](https://segmentfault.com/a/1190000016721094?utm_source=sf-related)\n\nFormatting context 是 W3C CSS2.1 规范中的一个概念。<font color='orange'>它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用</font>。最常见的 Formatting context 有 Block fomatting context (简称BFC)和 Inline formatting context (简称IFC)。**Block formatting context直译为\"块级格式化上下文\"。它是一个独立的渲染区域，只有Block-level box参与， 它规定了内部的Block-level Box如何布局，并且与这个区域外部毫不相干**。**通俗地讲，BFC是一个容器，用于管理块级元素。**\n\n触发BFC：\n\n- float为 left|right\n- overflow为 hidden|auto|scroll\n- display为 table-cell|table-caption|inline-block|inline-flex|flex\n- position为 absolute|fixed\n- 根元素\n\nBFC布局规则：\n\n- 内部的Box会在垂直方向，一个接一个地放置(即块级元素独占一行)。\n- BFC的区域不会与float box重叠(**利用这点可以实现自适应两栏布局**)。\n- 内部的Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠(**margin重叠三个条件:同属于一个BFC;相邻;块级元素**)。\n- 计算BFC的高度时，浮动元素也参与计算。（清除浮动 haslayout）\n- BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。\n\n***\n\n## 10 圣杯布局和双飞翼布局\n\n<img src=\"圣杯和双飞翼.jpg\" style=\"zoom:50%;\" />\n\n[css布局之圣杯布局和双飞翼布局](https://juejin.cn/post/6844903568718184461#heading-1)\n\n```html\n//圣杯布局\n<body>\n    <div id='container'>\n        <div id=\"center\" class=\"column\">center</div>\n        <div id=\"left\" class=\"column\">left</div>\n        <div id=\"right\" class=\"column\">right</div>\n    </div>\n</body>\n<style>\n        #container {\n            padding: 0 200px;\n            overflow: hidden;\n        }\n        #center {\n            float:left;\n            width: 100%;\n            background-color: lightblue;\n        }\n        #left {\n            float:left;\n            width: 200px;\n            position: relative;\n            left: -200px;\n            margin-left: -100%;\n            background-color: orange;\n        }\n        #right {\n            float:left;\n            width: 200px;\n            position: relative;\n            right: -200px;\n            margin-left: -200px;\n            background-color: orange;\n        }\n</style>\n```\n\n```html\n//双飞翼\n<body>\n    <div id=\"header\">header</div>\n    <div id=\"container\">\n        <div id=\"center\" class=\"column\">\n            <div id=\"inner\">center</div>\n        </div>\n        <div id=\"left\" class=\"column\">left</div>\n        <div id=\"right\" class=\"column\">right</div>\n    </div>\n    <div id=\"footer\">footer</div>\n</body>\n   <style>\n        #container {\n            overflow: hidden;\n        }\n\n        #footer,\n        #header {\n            background-color: dimgrey;\n        }\n\n        .column {\n            float: left;\n            height: 60vh;\n        }\n\n        #center {\n            width: 100%;\n        }\n\n        #inner {\n            height: 100%;\n            margin: 0 200px;\n            background: lightgrey;\n        }\n\n        #left {\n            width: 200px;\n            margin-left: -100%;\n            background-color: lightblue;\n        }\n\n        #right {\n            width: 200px;\n            margin-left: -200px;\n            background-color: orange;\n        }\n    </style>\n```\n\n***\n\n## 11 flex 布局\n\n[Flex 布局教程](http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html)\n\n***\n\n## 12 px,em,rem 区别\n\n[响应式Web 设计—px-em-rem三者区别及rem的使用](https://www.jianshu.com/p/a0bdd3e9133d)\n\n***\n\n## 13 css预处理语言\n\nCSS 预处理器是一个能让你通过预处理器自己独有的语法来生成CSS的程序。\n\n其基本思想是：**用一种专门的编程语言，为CSS增加了一些编程的特性**，将CSS作为目标生成文件，然后开发者就只要使用这种语言进行编码工作。\n\n通俗的说，**CSS预处理器用一种专门的编程语言，进行Web页面样式设计，然后再编译成正常的CSS文件**，以供项目使用。\n\n- [Sass](http://sass-lang.com/)\n- [LESS](https://less.bootcss.com)\n\n***\n\n## 14 媒体查询\n\ncss中使用@media,可以针对不同的媒体类型定义不同的样式.\n@media 可以针对不同的屏幕尺寸设置不同的样式，特别是如果需要设置设计响应式的页面，@media 是非常有用的\n\n[媒体查询](https://houdunren.gitee.io/note/css/15%20%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2.html)\n\n***\n\n## 15 H5语义化标签\n\n- header\n- nav\n- article\n- section\n- aside\n- footer\n\n作用：\n\n- 比`<div>`标签有更加丰富的含义，使文档结构清晰，方便开发与维护\n- 搜索引擎能更方便的识别页面的每个部分\n- 方便其他设备解析（如移动设备、盲人阅读器等）\n\n[H5语义化标签](https://segmentfault.com/a/1190000013901244)\n\n***\n\n## 16 Web Worker和Web Socket\n\n### Web Worker\n\nH5中提供了一个JavaScript多线程解决方案，Web Worker是H5中的工作线程，是运行在后台的JavaScript,它能够独立于其他的脚本\n当 Web Worker工作时，不会影响页面的性能，用户依然可以进行点击，选取等操作\n\n调用 Web Worker 时，需要将单独执行的 JavaScript 代码放到一个独立的JS文件内，然后在页面内调用Worker构造函数来创建一个线程，参数是文件路径。\n`let worker = new Worker('worker.js')`\n\n<font color='orange'>因为Worker不能影响页面性能，所以Worker 中执行的代码不能访问页面或窗口对象</font>，通过onmessage获取后台信息，postMessage向后台发送信息\n\n```javascript\n//监听消息\nworker.onmessage=function(e){}\n//发送消息\nworker.postMessage(data)\n//停止Worker\nworker.terminate()\n//或者worker内部调用close方法\nclose()\n\n```\n\n### Web Socket\n\n在浏览器服务器之间建立一个双向通道，后台可以随时向前端推送消息，允许跨域\n\n```javascript\nlet ws = new WebSocket('ws://localhost:8080');\nws.send(data);\nws.onopen = function(){};\nws.onmessage = function(msg){};\nws.onclose = function(){}\n```\n\n***\n\n## 17 CSS3 动画\n\n- transition\n- animation\n\n[css3动画](https://www.runoob.com/css3/css3-animations.html)\n\n***\n\n## 18 如何实现响应式布局\n\n- 媒体查询\n- rem布局\n- 视口单位\n- 百分比布局\n- flex ,grid 等方案\n\n[前端响应式布局原理与方案](https://juejin.cn/post/6844903814332432397#heading-13)\n\n***\n\n## 19 SEO的概念及实现\n\n搜索引擎优化：使用特定的技术使得网站的各种关键词排名提升到搜索引擎的理想位置，从搜索引擎中获得更多的免费流量，以及更好地展现网站形象。\n\n优化方案：\n\n- 设置合理的title、description、keywords\n- 重要的关键词不要超过2次，而且要靠前，不同页面的title要不同\n- 使用语义化的html代码，符合w3c规范，语义化代码让搜索引擎容易理解网页\n- 重要的内容放在html代码最前，搜索引擎抓取页面是自上而下的，有的搜索引擎对抓取的长度有限制\n- 重要的内容不要通过JS输出，搜索引擎不会执行JS获取内容\n- 少用iframe，搜索引擎不会抓取iframe\n- 非装饰性图片必须加上alt\n- <font color='orangered'>服务端使用模板引擎渲染</font>\n\n***\n\n## 20 H5新特性\n\n### 语义化标签\n\n结构元素：article、aside、header、hgroup、footer、figure、section、nav\n\n其他元素：video、audio、canvas、embed、mark、progress、meter、time、command、details、datagrid、keygen、output、source、menu、ruby、wbr、bdi、dialog、\n\n### 新增API\n\n- canvas\n\n- svg\n\n- audio/video\n\n- Geolocation 定位`navigator.geolocation.getCurrentLocation(onSuccess,onError,options)`\n\n- Communication：跨文档消息通信，可以确保iframe、标签页、窗口间安全地进行跨源通信。\n\n  ```javascript\n  window.postMessage(msg,url);\n  window.addEventListener('message',function(e){})\n  ```\n\n  \n\n- XMLHttpRequest Level2：改进了跨源XMLHttpRequest和进度事件，XMLHttpRequest Level2通过CORS实现了跨源XMLHttpRequest。跨源HTTP请求包含一个Origin头部，它为服务器提供HTTP请求的源信息。\n\n- WebSockets：要连接远程主机，只需新建一个WebSocket实例，提供希望连接的对端URL。\n\n- Forms：新表单元素tel、email、url、search、range、number 未来的表单元素color、datetime、datetime-local、time、date、week、month\n\n- 新表单特性和函数：placeholder、autocomplete、autofocus、spellcheck、list特性、datalist元素、min和max、step、required\n\n- 拖放API：draggable属性、拖放事件(dragstart、drag、dragenter、dragleave、dragover、drap、dragend)、dataTransfer对象\n\n- Web Workers API：Web Workers可以让Web应用程序具备后台处理能力，对多线程的支持性非常好。但是在Web Workers中执行的脚本不能访问该页面的window对象，也就是Web Workers不能直接访问Web页面和DOM API。虽然Web Workers不会导致浏览器UI停止响应，但是仍然会消耗CPU周期，导致系统反应速度变慢。\n\n- Web Storage API：sessionStorage(保存在session中，浏览器关闭，数据消失)、localStorage(保存在客户端本地，除非手动删除，否则一直保存)\n\n***\n\n## 21 css3新特性（大概）\n\n- 圆角（border-radius） \n- 阴影（box-shadow）\n- 过渡效果（transition）\n- 翻转（transform）\n- 动画（animation）\n- 媒体查询（@media）\n- 弹性盒子（flex）\n\n***\n\n# 计算机网络和HTTP\n\n## 1 HTTP报文\n\n用于HTTP协议交互的信息称为HTTP报文。请求端的叫请求报文，响应端的叫响应报文。<font color='orange'>HTTP报文本身是由多行数据构成的字符串文本</font>\n\nHTTP报文大致可分为报文首部和报文主体，报文主体是可选项。\n\n<br/><br/>\n\nHTTP报文结构：\n\n<img src=\"HTTP报文结构.jpg\"/>\n\n<br/><br/>请求报文和响应报文结构：\n\n<img src=\"请求报文和响应报文.jpg\"/>\n\n<br/><br/>请求报文和响应报文实例：\n\n<img src=\"报文实例.jpg\"/>\n\n***\n\n## 2 HTTP建立持久连接的意义\n\nHTTP协议初始版本中，每进行一次通信就要断开一次TCP连接，这在一个页面内可能发生多个TCP连接中断，增加了通信开销。\n\n<img src=\"HTTP非持久化.jpg\" style=\"zoom:80%;\" />\n\nHTTP持久连接：只要任意一端没有明确提出断开连接，则保持TCP连接状态。<font color='orange'>持久化连接旨在建立一次TCP请求后进行多次HTTP请求和响应 的交互。减少多次TCP的开销，使HTTP请求尽快结束</font>>\n\n<img src=\"20201116121851148.png\"/>\n\n***\n\n## 3 HTTP首部字段\n\n<img src=\"请求报文和响应报文.jpg\"/>\n\n### 通用首部字段\n\n<img src=\"通用首部字段.bmp\"/>\n\n### 请求首部字段\n\n<img src=\"请求首部字段.bmp\"/>\n\n### 响应首部字段\n\n<img src=\"响应首部字段.bmp\"/>\n\n### 实体首部字段\n\n<img src=\"实体首部字段.bmp\"/>\n\n### 为cookie服务的首部字段\n\n<img src=\"cookie字段.bmp\"/>\n\n***\n\n\n\n## 14 浏览器缓存机制\n\n[彻底理解浏览器的缓存机制](https://juejin.cn/post/6844903593275817998#heading-3)\n\n[彻底弄懂浏览器缓存策略](https://www.jiqizhixin.com/articles/2020-07-24-12)\n\n### 强缓存 Cache-Control 与 Expires\n\n**Cache-Control（通用首部字段）**\n\n在HTTP/1.1中，Cache-Control是最重要的规则，主要用于控制网页缓存，主要取值为：\n\n- public：所有内容都将被缓存（客户端和代理服务器都可缓存）\n- private：所有内容只有客户端可以缓存，Cache-Control的默认取值\n- no-cache：客户端缓存内容，但是是否使用缓存则需要经过协商缓存来验证决定\n- no-store：所有内容都不会被缓存，即不使用强制缓存，也不使用协商缓存\n- max-age=xxx (xxx is numeric)：缓存内容将在xxx秒后失效\n\n请求指令\n\n<img src=\"缓存请求指令.png\"/>\n\n响应指令\n\n<img src=\"缓存响应指令.png\"/>\n\n**Expires（实体首部字段）**\n\nExpires是HTTP/1.0控制网页缓存的字段，其值为服务器返回该请求结果缓存的到期时间，即再次发起该请求时，如果客户端的时间小于Expires的值时，直接使用缓存结果。\nCache-Control 有指定 max-age 时，优先处理 max-age。\n\n<img src=\"Expires.png\"/>\n\n### 协商缓存与强缓存\n\n<img src=\"640.png\" style=\"zoom: 50%;\" />\n\n<img src=\"浏览器缓存.png\" style=\"zoom:80%;\" />\n\n\n\n## 4 HTTP方法，状态码\n\n<img src=\"http方法.bmp\"/>\n\n<img src=\"http状态码.bmp\"/>\n\n***\n\n## 5 HTTP和HTTPS\n\n[HTTP 与 HTTPS 的区别](https://www.runoob.com/w3cnote/http-vs-https.html)\n\n[SSL/TLS协议运行机制的概述](http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html)\n\n[十分钟搞懂HTTP和HTTPS协议](https://www.zhihu.com/tardis/zm/art/72616216?source_id=1003)\n\nhttp缺点：\n\n- 窃听风险\n- 冒充风险（需要第三方颁发证书）\n- 篡改风险\n\n<font color='orange'>HTTP+加密+证书+校验机制=HTTPS</font>\n\nHTTPS并不是新协议，只是HTTP通信接口部分用SSL/TLS协议代替。HTTP先和SSL通信，再由SSL和TCP通信。\n\n```\n1994年，NetScape公司设计了SSL协议（Secure Sockets Layer）的1.0版，但是未发布。\n1995年，NetScape公司发布SSL 2.0版，很快发现有严重漏洞。\n1996年，SSL 3.0版问世，得到大规模应用。\n1999年，互联网标准化组织ISOC接替NetScape公司，发布了SSL的升级版TLS 1.0版。\n2006年和2008年，TLS进行了两次升级，分别为TLS 1.1版和TLS 1.2版。最新的变动是2011年TLS 1.2的修订版。\n\n目前，应用最广泛的是TLS 1.0，接下来是SSL 3.0。但是，主流浏览器都已经实现了TLS 1.2的支持。\nTLS 1.0通常被标示为SSL 3.1，TLS 1.1为SSL 3.2，TLS 1.2为SSL 3.3。\n```\n\n<img src=\"https.jpg\" style=\"zoom:67%;\" />\n\nSSL/TLS协议的基本过程是这样的：\n\n1.  客户端向服务器端索要并验证公钥。\n2. 双方协商生成\"对话密钥\"。\n3.  双方采用\"对话密钥\"进行加密通信（普通HTTP，但用 “会话秘钥” 加密）。\n\n<img src=\"https-intro.png\" style=\"zoom: 80%;\" />\n\n***\n\n## 6 HTTP追加\n\n### SPDY\n\n- 多路复用（一个TCP连接多个HTTP请求）\n- 赋予请求优先级\n- 压缩HTTP首部\n- 支付服务器向客户端推送\n\n### WebSocket\n\n### HTTP  2.0\n\n主要特性同SPDY\n\n***\n\n## 7 WEB攻击\n\n见PDF\n\n***\n\n## 8 TCP/IP协议分层管理\n\n应用层：向用户提供应用服务时通信的活动。HTTP,DNS,FTP\n\n传输层：提供处于网络连接中的两台计算机之间的数据传输。TCP，UDP\n\n网络层：网络层用来处理在网络上流动的数据包。IP\n\n网络接口层：对实际的网络媒体的管理。设备驱动，网络接口卡\n\n***\n\n## 9 Get Post 区别\n\n- 请求参数：GET请求参数是通过URL传递的，多个参数以&连接，POST请求放在request body中。\n- 请求缓存：GET请求会被缓存，而POST请求不会，除非手动设置。\n- 收藏为书签：GET请求支持，POST请求不支持。\n- 安全性：POST比GET安全，GET请求在浏览器回退时是无害的，而POST会再次请求。\n- 历史记录：GET请求参数会被完整保留在浏览历史记录里，而POST中的参数不会被保留。\n- 编码方式：GET请求只能进行url编码，而POST支持多种编码方式。\n- 对参数的数据类型：GET只接受ASCII字符，而POST没有限制。\n\n****\n\n## 10 web服务器及其组成\n\n- Apache\n- IIS\n- Nginx\n\nwebserver 基本由这些组成:\n\n- 绑定TCP端口，监听客户端（浏览器）请求\n- 处理客户端（浏览器）请求\n- 响应客户端（浏览器）请求\n\n***\n\n## 11 TCP和UDP区别\n\n1. TCP是面向连接的，udp是无连接的即发送数据前不需要先建立链接。\n2. TCP提供可靠的服务。也就是说，通过TCP连接传送的数据，无差错，不丢失，不重复，且按序到达;UDP尽最大努力交付，即不保证可靠交付。 \n3. TCP是面向字节流，UDP面向报文。\n4. TCP只能是1对1的，UDP支持1对1,1对多。\n5. TCP的首部较大为20字节，而UDP只有8字节。\n\n<img src=\"tcp udp的应用.png\" style=\"zoom: 67%;\" />\n\n***\n\n## 12 cookie session sessionStorage localStorage\n\n### cookie\n\nHTTP Cookie 是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。通常，它用于告知服务端两个请求是否来自同一浏览器，如保持用户的登录状态。Cookie 使基于无状态的 HTTP 协议记录稳定的状态信息成为了可能。\n\nCookie 主要用于以下三个方面：\n\n会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息）\n个性化设置（如用户自定义设置、主题等）\n浏览器行为跟踪（如跟踪分析用户行为等）\n\n### session\n\nSession 代表着服务器和客户端一次会话的过程。Session 对象存储特定用户会话所需的属性及配置信息。这样，当用户在应用程序的 Web 页之间跳转时，存储在 Session 对象中的变量将不会丢失，而是在整个用户会话中一直存在下去。当客户端关闭会话，或者 Session 超时失效时会话结束。\n\n### cookie session 区别联系\n\n关系：\n\n用户第一次请求服务器的时候，服务器根据用户提交的相关信息，创建创建对应的 Session ，请求返回时将此 Session 的唯一标识信息 SessionID 返回给浏览器，浏览器接收到服务器返回的 SessionID 信息后，会将此信息存入到 Cookie 中，同时 Cookie 记录此 SessionID 属于哪个域名。\n\n当用户第二次访问服务器的时候，请求会自动判断此域名下是否存在 Cookie 信息，如果存在自动将 Cookie 信息也发送给服务端，服务端会从 Cookie 中获取 SessionID，再根据 SessionID 查找对应的 Session 信息，如果没有找到说明用户没有登录或者登录失效，如果找到 Session 证明用户已经登录可执行后面操作。\n\n根据以上流程可知，SessionID 是连接 Cookie 和 Session 的一道桥梁，大部分系统也是根据此原理来验证用户登录状态\n\n<img src=\"cookie session.jpg\" style=\"zoom:150%;\" />\n\n区别：\n\n- 作用范围不同，Cookie 保存在客户端（浏览器），Session 保存在服务器端。\n- 存取方式的不同，Cookie 只能保存 ASCII，Session 可以存任意数据类型，一般情况下我们可以在 Session 中保持一些常用变量信息，比如说 UserId 等。\n- 有效期不同，Cookie 可设置为长时间保持，比如我们经常使用的默认登录功能，Session 一般失效时间较短，客户端关闭或者 Session 超时都会失效。\n- 隐私策略不同，Cookie 存储在客户端，比较容易遭到不法获取；Session 存储在服务端，安全性相对 Cookie 要好一些。\n- 存储大小不同， 单个 Cookie 保存的数据不能超过 4K，Session 可存储数据远高于 Cookie。\n\n### localStorage和sessionStorage\n\n本地5MB存储，与HTTP无关，不与服务器通信，采取同源策略\n\nlocalStorage生命周期是永久的，除非被清除。sessionStorage尽在当前会话有效，关闭页面或浏览器后数据消失\n\n***\n\n## 13 TCP三次握手四次挥手\n\n```\n 3次握手：1、听得到吗？2、听得到，你呢？3、我也听到了。开始对话 \n 4次挥手：1、老师，下课了。2、好，我知道了，我说完这点。3、好了，说完了，下课吧。4、谢谢老师，老师再见\n```\n\n\n\n### TCP三次握手\n\n1. 第一次握手：TCP客户进程向服务器发出连接请求报文，报文首部中的同步位SYN=1，同时选择一个初始序列号 seq=x ，此时，TCP客户端进程进入了 SYN-SENT（同步已发送状态）状态\n\n2. 第二次握手：TCP服务器发出确认报文。确认报文中应该 ACK=1，SYN=1，确认号是ack=x+1，同时也要为自己初始化一个序列号 seq=y，此时，TCP服务器进程进入了SYN-RCVD（同步收到）状态\n\n3. 第三次握手：TCP客户进程收到确认后，还要向服务器给出确认。确认报文的ACK=1，ack=y+1，自己的序列号seq=x+1。服务器收到并确认，Client和Server进入ESTABLISHED状态，完成三次握手，随后Client和Server就可以开始传输数据。\n\n   <font color='red'>三次握手原因</font>:一句话，主要防止已经失效的连接请求报文突然又传送到了服务器，从而产生错误。\n\n   ```\n   如果使用的是两次握手建立连接，假设有这样一种场景，客户端发送了第一个请求连接并且没有丢失，只是因为在网络结点中滞留的时间太长了，由于TCP的客户端迟迟没有收到确认报文，以为服务器没有收到，此时重新向服务器发送这条报文，此后客户端和服务器经过两次握手完成连接，传输数据，然后关闭连接。此时此前滞留的那一次请求连接，网络通畅了到达了服务器，这个报文本该是失效的，但是，两次握手的机制将会让客户端和服务器再次建立连接，这将导致不必要的错误和资源的浪费。\n   \n   如果采用的是三次握手，就算是那一次失效的报文传送过来了，服务端接受到了那条失效报文并且回复了确认报文，但是客户端不会再次发出确认。由于服务器收不到确认，就知道客户端并没有请求连接。\n   ```\n\n   \n\n<img src=\"tcp三次握手.jpg\" style=\"zoom: 67%;\" />\n\n### 四次挥手\n\n1. 客户端进程发出连接释放报文，并且停止发送数据。FIN=1，其序列号为seq=u，客户端进入FIN-WAIT-1（终止等待1）状态\n2. 服务器收到连接释放报文，发出确认报文，ACK=1，ack=u+1，并且带上自己的序列号seq=v，此时，服务端就进入了CLOSE-WAIT（关闭等待）状态，客户端收到确认后，进入FIN-WAIT-2（终止等待2）状态\n3. 服务器将最后的数据发送完毕后，就向客户端发送连接释放报文，FIN=1，ack=u+1，假定此时的序列号为seq=w，此时，服务器就进入了LAST-ACK（最后确认）状态，等待客户端的确认\n4. 客户端收到服务器的连接释放报文后，必须发出确认，ACK=1，ack=w+1，而自己的序列号是seq=u+1，此时，客户端就进入了TIME-WAIT（时间等待）状态\n5. 服务器只要收到了客户端发出的确认，立即进入CLOSED状态，客户端最后还要等待2MSL\n\n<img src=\"tcp四次挥手.png\" style=\"zoom:67%;\" />\n\n<font color='orangeRed'>为什么客户端最后还要等待2MSL？</font>\n\n```\nMSL（Maximum Segment Lifetime），TCP允许不同的实现可以设置不同的MSL值。\n\n第一，保证客户端发送的最后一个ACK报文能够到达服务器，因为这个ACK报文可能丢失，服务器会重传FIN+ACK报文，而客户端就能在这个2MSL时间段内收到这个重传的报文，接着给出回应报文，并且会重启2MSL计时器。\n\n第二，防止类似与“三次握手”中提到了的“已经失效的连接请求报文段”出现在本连接中。客户端发送完最后一个确认报文后，在这个2MSL时间中，就可以使本连接持续的时间内所产生的所有报文段都从网络中消失。这样新的连接中不会出现旧连接的请求报文。\n\n```\n\n***\n\n\n\n# React\n\n## 1 特点\n\n1. 声明式设计。采用声明规范，用ReactDOM.render()来声明\n2. 高效：虚拟DOM。\n3. 灵活：可以与已知的框架或库很好的配合。\n4. JSX语法。\n5. 组件：构建组件，使代码更容易得到复用，能够很好地应用在大项目的开发中。\n6. 单向响应的数据流：组件不会改变props。它们只会监听props的变化，当props发生变化时它们会使用接收到的新值，而不是去修改已有的值。\n\n***\n\n\n\n## 2 虚拟DOM DIFF算法\n\n```html\n<div id=\"app\">\n  <p class=\"text\">hello world!!!</p>\n</div>\n```\n\n```javascript\n{\n  tag: 'div',\n  props: {\n    id: 'app'\n  },\n  chidren: [\n    {\n      tag: 'p',\n      props: {\n        className: 'text'\n      },\n      chidren: [\n        'hello world!!!'\n      ]\n    }\n  ]\n}\n\n```\n\n虚拟DOM就是一个JS对象，DOM操作很耗性能，比较JS对象节约了性能。\n\nreact中减少了真实DOM的创建，对比。取而代之操作JS对象，实现了性能飞跃\n\nJSX  => createElement => JS对象（虚拟DOM） => render => 真实DOM\n\n[DIFF算法](https://hustyichi.github.io/2020/09/16/vdom/)\n\n***\n\n## 3 生命周期\n\n<img src=\"生命周期.webp\"  />\n\n<img src=\"生命周期2.bmp\" style=\"zoom:80%;\" />\n\n***\n\n## 4 vue react 异同\n\n### 相同点\n\n1. 都使用虚拟DOM\n2. 组件化思想\n3. 专注于核心库，路由、全局状态管理则由配套库进行处理。\n\n### 区别\n\n[Vue和React区别](https://juejin.cn/post/6844903668446134286)\n\n***\n\n## 5 受控组件与非受控组件\n\n### 受控组件\n\n使 React 的 state 成为“唯一数据源”。渲染表单的 React 组件还控制着用户输入过程中表单发生的操作。被 React 以这种方式控制取值的表单输入元素就叫做“受控组件”。(用value和onChange控制输入元素)\n\n```javascript\nclass NameForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {value: ''};\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {    \n      this.setState({\n          value: event.target.value\n      });  \n  }\n  handleSubmit(event) {\n    alert('提交的名字: ' + this.state.value);\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          名字:\n          <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\n        </label>\n        <input type=\"submit\" value=\"提交\" />\n      </form>\n    );\n  }\n}\n```\n\n### 非受控组件\n\n使用非受控组件，这时表单数据将交由 DOM 节点来处理。不必为每个状态更新都编写数据处理函数，使用 ref 来从 DOM 节点中获取表单数据。\n\n```javascript\nclass NameForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.input = React.createRef();  }\n\n  handleSubmit(event) {\n    alert('A name was submitted: ' + this.input.current.value);\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          Name:\n          <input type=\"text\" ref={this.input} />\n        </label>\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n    );\n  }\n}\n```\n\n***\n\n## 6 高阶组件\n\n[HOC](https://segmentfault.com/a/1190000019153177)\n\n***\n\n## 7 Flux架构模式\n\n### MVC\n\n1. Model负责管理数据，大部分业务逻辑放在Model中\n2. View负责渲染用户界面，传送指令到 Controller\n3. Controller负责接收用户输入，根据用户输入调用对应的Model部分逻辑，把产生的数据结果交给View，让View渲染\n\n<img src=\"mvc_model.png\" style=\"zoom:67%;\" />\n\n<font color='orangered'>缺点：实际开发中，总是允许View和Model直接通信，造成混乱的数据流</font>\n\n<img src=\"mvc_q.png\" style=\"zoom:50%;\" />\n\n### MVVM\n\nMVVM是Model-View-ViewModel的简写。它本质上就是MVC 的改进版。MVVM 就是将其中的`View` 的状态和行为抽象化，让我们将视图 UI 和业务逻辑分开。，它可以取出 `Model` 的数据同时帮忙处理 `View` 中由于需要展示内容而涉及的业务逻辑。\n\n1. Model：代表的是模型、数据，可以在 Model 层中定义数据修改和操作的业务逻辑。\n2. View：代表的是视图，模版。它用来显示数据。\n3. ViewModel：MVVM模式的核心，它是连接view和model的桥梁。它有两个方向：\n   1. 将`Model`转化成`View`，即将后端传递的数据转化成所看到的页面。实现的方式是：数据绑定。\n   2. 将`View`转化成`Model`，即将所看到的页面转化成后端的数据。实现的方式是：DOM 事件监听。\n\n<img src=\"mvvm_model.png\" style=\"zoom: 80%;\" />\n\n<font color='orange'>总结：</font>\n在MVVM的框架下视图View和模型Model是不能直接通信的。它们通过ViewModel来通信。\nViewModel通常要实现一个observer观察者，当数据发生变化，ViewModel能够监听到数据的这种变化，然后通知到对应的视图做自动更新。\n而当用户操作视图，ViewModel也能监听到视图的变化，然后通知数据做改动。\n\n<font color='red'>这称之为数据的双向绑定</font>。并且MVVM中的View 和 ViewModel可以互相通信\n\n缺点：\n\n1. 数据绑定也使得bug很难被调试。比如页面异常了，有可能是View的代码有bug，也可能是model的代码有问题。数据绑定使得一个位置的Bug被快速传递到别的位置，要定位原始出问题的地方就变得不那么容易了。\n2. 数据双向绑定不利于代码重用。客户端开发最常用的是View，但是数据双向绑定技术，让一个View都绑定了一个model，不同的模块model都不同。那就不能简单重用view了\n3.  一个大的模块中，model也会很大，虽然使用方便了也很容易保证数据的一致性，但是长期持有，不释放内存就造成话费更多的内存\n\n### Flux\n\n<font color='orange'>Flux的核心思想就是数据和逻辑永远单向流动</font>\n\n<img src=\"flux.png\" style=\"zoom:80%;\" />\n\nMVC最大的问题就是无法禁绝View和Model之间的直接对话。在Flux中，Store只有getter,没有setter，不可能直接修改Store内部状态，只能派发一个action对象给Dispatcher\n\n不足：\n\n1. store之间有依赖关系\n2. 难以进行服务端渲染\n3. store混杂了逻辑和状态\n\n***\n\n## 8 Redux\n\n### 设计理念\n\nWeb 应用就是状态与 UI 一一对应的关系，Redux 就是我们 Web 应用的一个状态管理方案。\n单纯的从架构层面而言，UI 与状态完全分离，并且单向的数据流确保了状态可控。\n\n- 每一个 `State` 的变化可预测\n- 动作和状态统一管理\n\n### 基本原则\n\n1. 唯一数据源：应用的状态数据只存储在一个Store中\n\n2. 状态只读：修改状态必须通过派发action\n\n3. 数据改变只能通过纯函数完成：Reducer 就是纯函数，它接受当前的 state 和 action。然后返回一个新的 state。所以这里，state 不会更新，只会替换。\n\n   保持 reducer 纯净非常重要。**永远不要**在 reducer 里做这些操作：\n\n   - 修改传入参数；\n   - 执行有副作用的操作，如 API 请求和路由跳转；\n   - 调用非纯函数，如 `Date.now()` 或 `Math.random()`。\n\n   reducer 一定要保持纯净。**只要传入参数相同，返回计算得到的下一个 state 就一定相同。没有特殊情况、没有副作用，没有 API 请求、没有变量修改，单纯执行计算。**\n\n***\n\n## 9 PureComponent 与 shouldComponentUpdate\n\n如果一个组件只和props和state有关系，给定相同的props和state就会渲染相同的结果，那么这个组件就叫作**纯组件**。\n\n普通组件可以通过在shouldComponentUpdate中对比决定是否更新，节约性能。\n\nPureComponent 实现了shouldComponentUpdate，对props和state的“浅比较”，组件会自动判断是否重新渲染。\n\n***\n\n## 10 React Fiber\n\n[由浅入深React的Fiber架构](https://juejin.cn/post/6844904193958887431#heading-8)\n[手写React的Fiber架构，深入理解其原理](https://segmentfault.com/a/1190000022995622)\n\nReact的diff算法是同步的，如果有大量深度嵌套节点需要更新，React diff递归对比vDom，JS线程的运行时间会比较长，阻塞浏览器响应。\n\n- Fiber是一个执行单元\n\n  Fiber可以将长时间的同步任务<font color='orange'>拆分成多个小任务</font>，从而让浏览器能够抽身去响应其他事件，等进程空了再回来继续计算，使用 requestIdleCallback\n\n  <img src=\"react fiber 1.webp\" style=\"zoom:50%;\" />\n\n- Fiber也是一种数据结构\n\n  <font color='orange'>可以随时中断</font>，下次进来可以接着执行。Fiber改造了树结构，加上了指向父节点和兄弟节点的指针，变为一个链表\n\n  1. **child**: 父节点指向**第一个子元素**的指针。\n  2. **sibling**：从第一个子元素往后，指向下一个兄弟元素。\n  3. **return**：所有子元素都有的指向父元素的指针。\n\n  有了这几个指针后，可以在任意一个元素中断遍历并恢复。\n\n  <img src=\"react fiber 2.webp\"  />\n\n***\n\n## 11 React Hooks的作用及原理\n\n[五分钟带你了解 React Hooks 工作原理](https://segmentfault.com/a/1190000021057476)\n\n[一文彻底搞懂react hooks的原理和实现](https://juejin.cn/post/6844903975838285838)\n\nHook 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性\n\n1. useState 是基于 Array+Cursor 来实现。当调用 useState 的时候，传入一个state值，返回形如 `(变量, 函数)` 的一个元祖，自动调用`render`方法来触发视图更新\n   - 第一次渲染时候，根据 useState 顺序，逐个声明 state 并且将其放入全局 Array 中。每次声明 state，都要将 cursor 增加 1。\n   - 更新 state，触发再次渲染的时候。**cursor 被重置为 0**。按照 useState 的声明顺序，依次拿出最新的 state 的值，视图更新\n2. useEffect 可以让你在函数组件中执行副作用操作，数据获取，设置订阅以及手动更改 React 组件中的 DOM 都属于副作用，**useEffect 能根据需要，避免多余的 render**\n\n```javascript\nlet memoizedState = []; // hooks 存放在这个数组\nlet cursor = 0; // 当前 memoizedState 下标\n\nfunction useState(initialValue) {\n  memoizedState[cursor] = memoizedState[cursor] || initialValue;\n  const currentCursor = cursor;\n  function setState(newState) {\n    memoizedState[currentCursor] = newState;\n    render();\n  }\n  return [memoizedState[cursor++], setState]; // 返回当前 state，并把 cursor 加 1\n}\n\nfunction useEffect(callback, depArray) {\n  const hasNoDeps = !depArray;\n  const deps = memoizedState[cursor];\n  const hasChangedDeps = deps\n    ? !depArray.every((el, i) => el === deps[i])\n    : true;\n  \n  if (hasNoDeps || hasChangedDeps) {\n    callback();\n    memoizedState[cursor] = depArray;\n  }\n  \n  cursor++;\n}\n10.31 test git\n```\n\n***\n\n# 计算机基础\n\n## 1 进程和线程\n\n进程：指在系统中运行的一个应用程序，<font color='red'>是系统进行资源分配和调度的基本单位</font>。每个进程都有自己的独立内存空间.\n\n线程：是进程的子任务，进程之内独立执行的一个单元执行流，<font color='red'>是CPU调度和分派的基本单位</font>。\n\n[一篇让你明白进程与线程之间的区别与联系](https://juejin.cn/post/6844903801321685000)\n\n[进程间通信和线程间通信的几种方式](https://www.cnblogs.com/fanguangdexiaoyuer/p/10834737.html#_label5)\n\n------\n\n# TypeScript笔记\n\n**声明语句中只能定义类型，切勿在声明语句中定义具体的实现**\n\n\n\n## 什么是声明文件\n\n通常我们会把声明语句放到一个单独的文件（`jQuery.d.ts`）中，这就是声明文件。声明文件必需以 `.d.ts` 为后缀\n\n```typescript\n// src/jQuery.d.ts\ndeclare var jQuery: (selector: string) => any;\n\n// src/index.ts\njQuery('#foo');\n```\n\n------\n\n\n\n## 书写声明文件\n\n### 全局变量\n\n全局变量的声明文件主要有以下几种语法（<font color=\"red\">**就是使用declare声明类型**</font>）：\n\n- [`declare var/let/const`](https://ts.xcatliu.com/basics/declaration-files.html#declare-var) 声明全局变量\n- [`declare function`](https://ts.xcatliu.com/basics/declaration-files.html#declare-function) 声明全局方法\n- [`declare class`](https://ts.xcatliu.com/basics/declaration-files.html#declare-class) 声明全局类\n- [`declare enum`](https://ts.xcatliu.com/basics/declaration-files.html#declare-enum) 声明全局枚举类型\n- [`declare namespace`](https://ts.xcatliu.com/basics/declaration-files.html#declare-namespace) 声明（含有子属性的）全局对象\n- [`interface` 和 `type`](https://ts.xcatliu.com/basics/declaration-files.html#interface-he-type) 声明全局类型（<font color=\"red\">**不用declare**</font>）\n\n<font color=\"red\">**注意点：**</font>\n\n1. declare namespace内部直接使用 `function ajax` 来声明函数，而不是使用 `declare function ajax`。类似的，也可以使用 `const`, `class`, `enum` 等语句\n\n   ```typescript\n   // src/jQuery.d.ts\n   declare namespace jQuery {\n       function ajax(url: string, settings?: any): void;\n       const version: number;\n       class Event {\n           blur(eventType: EventType): void\n       }\n       enum EventType {\n           CustomClick\n       }\n   }\n   ```\n   \n2. 类型声明文件中，可以直接使用 `interface` 或 `type` 来声明一个全局的接口或类型，<font color=\"red\">**不用declare**</font>，在其他文件中也可以使用这个接口或类型\n\n   ```typescript\n   // src/jQuery.d.ts\n   interface AjaxSettings {\n       method?: 'GET' | 'POST'\n       data?: any;\n   }\n   declare namespace jQuery {\n       function ajax(url: string, settings?: AjaxSettings): void;\n   }\n   \n   // src/index.ts\n   let settings: AjaxSettings = {\n       method: 'POST',\n       data: {\n           name: 'foo'\n       }\n   };\n   jQuery.ajax('/api/post_something', settings);\n   ```\n\n3. 暴露在最外层的 `interface` 或 `type` 会作为全局类型作用于整个项目中，故最好将他们放到 `namespace` 下\n\n4. 声明合并：可以组合多个声明语句，它们会不冲突的合并起来\n\n   ```typescript\n   // src/jQuery.d.ts\n   declare function jQuery(selector: string): any;\n   declare namespace jQuery {\n       function ajax(url: string, settings?: any): void;\n   }\n   \n   // src/index.ts\n   jQuery('#foo');\n   jQuery.ajax('/api/get_something');\n   ```\n\n------\n\n\n\n### npm 包\n\n- 声明文件位置：\n\n1. 与该 npm 包绑定在一起。 `package.json` 中有 `types` 字段，或者有一个 `index.d.ts` 声明文件\n2. 发布到 `@types` 里。尝试安装一下对应的 `@types` 包， `npm install @types/foo --save-dev\n\n\n\n- npm 包的声明文件主要有以下几种语法：\n\n  [`export`](https://ts.xcatliu.com/basics/declaration-files.html#export) 导出变量\n\n  [`export namespace`](https://ts.xcatliu.com/basics/declaration-files.html#export-namespace) 导出（含有子属性的）对象\n\n  [`export default`](https://ts.xcatliu.com/basics/declaration-files.html#export-default) ES6 默认导出\n\n  [`export =`](https://ts.xcatliu.com/basics/declaration-files.html#export-1) commonjs 导出模块\n  \n  \n\n- 在 npm 包的声明文件中，<font color=\"red\">使用 `declare` 不再会声明一个全局变量</font>，而只会在当前文件中声明一个局部变量。只有在声明文件中使用 `export` 导出，然后在使用方 `import` 导入后，才会应用到这些类型声明。\n\n\n\n<font color=\"red\">**用法:**</font>\n\n直接`export`导出类型\n\n```typescript\n// types/foo/index.d.ts\n\nexport const name: string;\nexport function getName(): string;\nexport class Animal {\n    constructor(name: string);\n    sayHi(): string;\n}\nexport enum Directions {\n    Up,\n    Down,\n    Left,\n    Right\n}\nexport interface Options {\n    data: any;\n}\n```\n\n使用 `declare` 先声明多个变量，用 `export` 导出\n\n```typescript\n// types/foo/index.d.ts\n\ndeclare const name: string;\ndeclare function getName(): string;\ndeclare class Animal {\n    constructor(name: string);\n    sayHi(): string;\n}\ndeclare enum Directions {\n    Up,\n    Down,\n    Left,\n    Right\n}\ninterface Options {\n    data: any;\n}\n\nexport { name, getName, Animal, Directions, Options };\n```\n\n------\n\n\n\n### 声明文件中的依赖\n\n一个声明文件有时会依赖另一个声明文件中的类型。除了可以在声明文件中通过 `import` 导入另一个声明文件中的类型之外，还可以使用三斜线指令。\n\n- 书写一个全局变量的声明文件时\n\n  全局变量的声明文件中，是不允许出现 `import`, `export` 关键字的。一旦出现了，那么他就会被视为一个 npm 包或 UMD 库，就不再是全局变量的声明文件了。故当我们在书写一个全局变量的声明文件时，如果需要引用另一个库的类型，那么就必须用三斜线指令\n\n  ```typescript\n  // types/jquery-plugin/index.d.ts\n  \n  /// <reference types=\"jquery\" />\n  \n  declare function foo(options: JQuery.AjaxSettings): string;\n  \n  // src/index.ts\n  foo({});\n  ```\n\n- 需要依赖一个全局变量的声明文件时\n\n  需要依赖一个全局变量的声明文件时，由于全局变量不支持通过 `import` 导入，当然也就必须使用三斜线指令来引入\n\n  ```typescript\n  // types/node-plugin/index.d.ts\n  \n  /// <reference types=\"node\" />\n  \n  export function foo(p: NodeJS.Process): string;\n  \n  // src/index.ts\n  import { foo } from 'node-plugin';\n  \n  foo(global.process);\n  ```\n\n  \n","slug":"issues","published":1,"updated":"2024-06-16T07:44:26.054Z","_id":"clxh8kkpo0002nwufgfvn4ixu","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h1><h2 id=\"1-原始值和引用值类型及区别\"><a href=\"#1-原始值和引用值类型及区别\" class=\"headerlink\" title=\"1  原始值和引用值类型及区别\"></a>1  原始值和引用值类型及区别</h2><p><a href=\"https://www.runoob.com/w3cnote/javascript-basic-types-and-reference-types.html\">JavaScript 深入了解基本类型和引用类型的值</a></p>\n<p><strong>原始值（简单数据类型）</strong>：存储在栈中的简单数据段，也就是说，它们的值直接存储在变量访问的位置。<br>6种简单数据类型：undefined、null、boolean、number、string、symbol；可以通过typeof 运算符来判断一个值是否在某种类型的范围内，如果它是原始类型，还可以判断它表示哪种原始类型(除null)。</p>\n<img src=\"原始数据类型.png\" style=\"zoom:80%;\" />\n\n<p><strong>引用值（复杂数据类型）</strong>：存储在堆中的对象，放在变量的栈空间中的值是该对象存储在堆中的地址，也就是说，存储在变量处的值是一个指针（内存地址），指向存储对象的堆内存中。<br>包含：Object、function、array等。</p>\n<img src=\"引用数据类型.png\"  />\n\n<p><strong><font color=\"#dd0000\">区别：</font></strong></p>\n<p>简单数据类型的值是储存在栈中，当把一个变量传递给另一个变量时，是把一个栈中的东西复制到另一个到栈中，并且这两个变量互不影响，修改其中的变量值时，不会改变另外一个变量的结果。</p>\n<p>引用数据类型是把变量标识符和和指向堆内存中该对象的指针（内存地址）存储在栈中，但是把其实际对象存储在堆中，栈中的内存地址指向堆中的实际对象，当把引用对象传递给另一个变量时，复制的其实是指向实际对象的指针（内存地址），此时两者指向的是同一个数据，若通过方法改变其中一个变量的值，则访问另一个变量时，其值也会跟着改变。</p>\n<hr>\n<h2 id=\"2-判断数据类型\"><a href=\"#2-判断数据类型\" class=\"headerlink\" title=\"2 判断数据类型\"></a>2 判断数据类型</h2><h3 id=\"typeof\"><a href=\"#typeof\" class=\"headerlink\" title=\"typeof\"></a>typeof</h3><p>优点：能快速检查undefined,string,number,boolean,function类型<br>缺点：当类型为object,null,array时都会返回object,所以不能区分这三类</p>\n<h3 id=\"instanceof\"><a href=\"#instanceof\" class=\"headerlink\" title=\"instanceof\"></a>instanceof</h3><p>用于检测构造函数的 prototype 属性是否出现在某个实例对象的原型链上。</p>\n<p>优点：能检测array,function,object类型<br>缺点:  检测不了字面量定义的number,boolean,string</p>\n<h3 id=\"Object-prototype-toString-call\"><a href=\"#Object-prototype-toString-call\" class=\"headerlink\" title=\"Object.prototype.toString.call()\"></a>Object.prototype.toString.call()</h3><p>优点：能准确的判断所有的类型。<br>缺点：写法过于繁琐</p>\n<h3 id=\"constructor-NaN\"><a href=\"#constructor-NaN\" class=\"headerlink\" title=\"constructor\"></a>constructor</h3><ul>\n<li>构造函数的原型中包含属性 <code>constructor</code> 指向该构造函数,但是他是不安全的，因为contructor的指向是可以被改变</li>\n<li>null、undefined没有construstor方法，因此constructor不能判断undefined和null。</li>\n</ul>\n<hr>\n<h2 id=\"3-类数组与数组的区别与转换\"><a href=\"#3-类数组与数组的区别与转换\" class=\"headerlink\" title=\"3 类数组与数组的区别与转换\"></a>3 类数组与数组的区别与转换</h2><ul>\n<li><p>类数组对象：arguments对象、DOM对象列表;</p>\n</li>\n<li><p>类数组对象也有length属性,可以这种取值: NodeList[0]、NodeList.item(0);</p>\n<p>**<font color=\"#dd0000\">区别：</font>**：数组对象的类型是Array,类数组对象的类型是object，也就是说类数组原型是Object;类数组不具有数组所具有的方法。</p>\n<p><strong><font color=\"#dd0000\">转换：</font></strong></p>\n<ol>\n<li>Array.prototype.slice.call(arrayLike, start);</li>\n<li>Array.from(arrayLike)</li>\n<li>扩展运算符<code>[...arrayLike]</code></li>\n</ol>\n</li>\n</ul>\n<hr>\n<h2 id=\"4-数组常见API\"><a href=\"#4-数组常见API\" class=\"headerlink\" title=\"4 数组常见API\"></a>4 数组常见API</h2><p><a href=\"https://www.cnblogs.com/zyfeng/p/10541133.html\">js数组方法整理</a></p>\n<hr>\n<h2 id=\"5-call-apply-bind\"><a href=\"#5-call-apply-bind\" class=\"headerlink\" title=\"5 call,apply,bind\"></a>5 call,apply,bind</h2><p><a href=\"https://www.runoob.com/w3cnote/js-call-apply-bind.html\">JavaScript 中 call()、apply()、bind() 的用法</a></p>\n<hr>\n<h2 id=\"6-new的原理\"><a href=\"#6-new的原理\" class=\"headerlink\" title=\"6 new的原理\"></a>6 new的原理</h2><ol>\n<li>创建一个空对象obj（{}）；</li>\n<li>将obj的[[prototype]]属性指向构造函数constrc的原型（即obj.[[prototype]] &#x3D; constrc.prototype）；</li>\n<li>将构造函数constrc内部的this绑定到新建的对象obj，执行constrc（也就是跟调用普通函数一样，只是此时函数的this为新创建的对象obj）；</li>\n<li>若构造函数没有返回引用类型，则返回该新建的对象obj（默认会添加return this）。否则，返回引用类型的值。</li>\n</ol>\n<img src=\"20191119212535220.png\" style=\"zoom: 67%;\" />\n\n<hr>\n<h2 id=\"7-正确判断this\"><a href=\"#7-正确判断this\" class=\"headerlink\" title=\"7 正确判断this\"></a>7 正确判断this</h2><p><a href=\"https://blog.csdn.net/weixin_42721322/article/details/106391922\">前端JS必备知识点：如何正确的判断this的指向?</a></p>\n<hr>\n<h2 id=\"8-闭包及其作用\"><a href=\"#8-闭包及其作用\" class=\"headerlink\" title=\"8 闭包及其作用\"></a>8 闭包及其作用</h2><p>闭包指子函数可以访问外部作用域变量的函数特性，即使在子函数作用域外也可以访问。如果没有闭包那么在处理事件绑定，异步请求时都会变得困难。</p>\n<p>由于在Javascript语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成”定义在一个函数内部的函数”。所以，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。</p>\n<ul>\n<li>JS中的所有函数都是闭包</li>\n<li>闭包一般在子函数本身作用域以外执行，即延伸作用域</li>\n</ul>\n<p>闭包可以用在许多地方。它的最大用处有两个：</p>\n<ul>\n<li>在函数外可以读取函数内部的变量</li>\n<li>让这些变量的值始终保持在内存中。</li>\n</ul>\n<p>坏处：</p>\n<p>由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。<br>解决方法是，在退出函数之前，将不使用的局部变量全部删除。</p>\n<p><a href=\"https://www.cnblogs.com/itjeff/p/10106855.html\">彻底理解JS闭包</a><br><a href=\"https://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html\">学习Javascript闭包（Closure）</a><br><a href=\"https://www.jianshu.com/p/e5225ba4a025\">setTimeout函数之循环和闭包</a></p>\n<hr>\n<h2 id=\"9-原型\"><a href=\"#9-原型\" class=\"headerlink\" title=\"9 原型\"></a>9 原型</h2><img src=\"proto.png\" style=\"zoom:67%;\" />\n\n<p><a href=\"https://houdunren.gitee.io/note/js/11%20%E5%8E%9F%E5%9E%8B%E4%B8%8E%E7%BB%A7%E6%89%BF.html#%E5%8E%9F%E5%9E%8B%E5%9F%BA%E7%A1%80\"> 原型基础</a></p>\n<hr>\n<h2 id=\"10-继承的几种方式\"><a href=\"#10-继承的几种方式\" class=\"headerlink\" title=\"10 继承的几种方式\"></a>10 继承的几种方式</h2><p><a href=\"https://github.com/mqyqingfeng/Blog/issues/16\">JavaScript深入之继承的多种方式和优缺点</a></p>\n<h3 id=\"①原型链继承\"><a href=\"#①原型链继承\" class=\"headerlink\" title=\"①原型链继承\"></a>①原型链继承</h3><p>1.引用类型的属性被所有实例共享<br>2.在创建 Child 的实例时，不能向Parent传参</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Parent</span> () &#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = <span class=\"hljs-string\">&#x27;kevin&#x27;</span>;<br>&#125;<br><span class=\"hljs-title class_\">Parent</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">getName</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>);<br>&#125;<br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Child</span> () &#123;&#125;<br><span class=\"hljs-title class_\">Child</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Parent</span>();<br><span class=\"hljs-keyword\">var</span> child = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Child</span>();<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(child.<span class=\"hljs-title function_\">getName</span>()) <span class=\"hljs-comment\">// kevin</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"②借用构造函数（经典继承）\"><a href=\"#②借用构造函数（经典继承）\" class=\"headerlink\" title=\"②借用构造函数（经典继承）\"></a>②借用构造函数（经典继承）</h3><p>优点：</p>\n<p>1.避免了引用类型的属性被所有实例共享</p>\n<p>2.可以在 Child 中向 Parent 传参</p>\n<p>缺点：</p>\n<p>方法都在构造函数中定义，每次创建实例都会创建一遍方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Parent</span> () &#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">names</span> = [<span class=\"hljs-string\">&#x27;kevin&#x27;</span>, <span class=\"hljs-string\">&#x27;daisy&#x27;</span>];<br>&#125;<br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Child</span> () &#123;<br>    <span class=\"hljs-title class_\">Parent</span>.<span class=\"hljs-title function_\">call</span>(<span class=\"hljs-variable language_\">this</span>);<br>&#125;<br><span class=\"hljs-keyword\">var</span> child1 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Child</span>();<br>child1.<span class=\"hljs-property\">names</span>.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-string\">&#x27;yayu&#x27;</span>);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(child1.<span class=\"hljs-property\">names</span>); <span class=\"hljs-comment\">// [&quot;kevin&quot;, &quot;daisy&quot;, &quot;yayu&quot;]</span><br><br><span class=\"hljs-keyword\">var</span> child2 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Child</span>();<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(child2.<span class=\"hljs-property\">names</span>); <span class=\"hljs-comment\">// [&quot;kevin&quot;, &quot;daisy&quot;]</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"③组合继承\"><a href=\"#③组合继承\" class=\"headerlink\" title=\"③组合继承\"></a>③组合继承</h3><p>优点：融合原型链继承和构造函数的优点，是 JavaScript 中最常用的继承模式。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Parent</span> (name) &#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = name;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">colors</span> = [<span class=\"hljs-string\">&#x27;red&#x27;</span>, <span class=\"hljs-string\">&#x27;blue&#x27;</span>, <span class=\"hljs-string\">&#x27;green&#x27;</span>];<br>&#125;<br><span class=\"hljs-title class_\">Parent</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">getName</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>)<br>&#125;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Child</span> (name, age) &#123;<br>    <span class=\"hljs-title class_\">Parent</span>.<span class=\"hljs-title function_\">call</span>(<span class=\"hljs-variable language_\">this</span>, name);<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">age</span> = age;<br>&#125;<br><br><span class=\"hljs-title class_\">Child</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Parent</span>();<br><span class=\"hljs-title class_\">Child</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">constructor</span> = <span class=\"hljs-title class_\">Child</span>;<br><br><span class=\"hljs-keyword\">var</span> child1 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Child</span>(<span class=\"hljs-string\">&#x27;kevin&#x27;</span>, <span class=\"hljs-string\">&#x27;18&#x27;</span>);<br>child1.<span class=\"hljs-property\">colors</span>.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-string\">&#x27;black&#x27;</span>);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(child1.<span class=\"hljs-property\">name</span>); <span class=\"hljs-comment\">// kevin</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(child1.<span class=\"hljs-property\">age</span>); <span class=\"hljs-comment\">// 18</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(child1.<span class=\"hljs-property\">colors</span>); <span class=\"hljs-comment\">// [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;, &quot;black&quot;]</span><br><br><span class=\"hljs-keyword\">var</span> child2 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Child</span>(<span class=\"hljs-string\">&#x27;daisy&#x27;</span>, <span class=\"hljs-string\">&#x27;20&#x27;</span>);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(child2.<span class=\"hljs-property\">name</span>); <span class=\"hljs-comment\">// daisy</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(child2.<span class=\"hljs-property\">age</span>); <span class=\"hljs-comment\">// 20</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(child2.<span class=\"hljs-property\">colors</span>); <span class=\"hljs-comment\">// [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;]</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"④原型式继承\"><a href=\"#④原型式继承\" class=\"headerlink\" title=\"④原型式继承\"></a>④原型式继承</h3><p>原型式继承继承的基本思想：在 object() 函数内部，先创建一个临时性的构造函数，然后将传入的对象作为这个构造函数的原型，最后返回了这个临时类型的一个新实例。相当于Object.create()</p>\n<p>缺点：</p>\n<p>包含引用类型值的属性会被所有实例共享，这点跟原型链继承一样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">createObj</span>(<span class=\"hljs-params\">o</span>) &#123;<br>    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">F</span>(<span class=\"hljs-params\"></span>)&#123;&#125;<br>    F.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span> = o;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title function_\">F</span>();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"⑤寄生式继承\"><a href=\"#⑤寄生式继承\" class=\"headerlink\" title=\"⑤寄生式继承\"></a>⑤寄生式继承</h3><p>创建一个仅用于封装继承过程的函数，该函数在内部以某种形式来做增强对象，最后返回对象</p>\n<p>缺点：跟借用构造函数模式一样，每次创建对象都会创建一遍方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">createObj</span> (o) &#123;<br>    <span class=\"hljs-keyword\">var</span> clone = <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">create</span>(o);<br>    clone.<span class=\"hljs-property\">sayName</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;hi&#x27;</span>);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> clone;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"⑥寄生组合式继承\"><a href=\"#⑥寄生组合式继承\" class=\"headerlink\" title=\"⑥寄生组合式继承\"></a>⑥寄生组合式继承</h3><p>这种方式的高效率体现它只调用了一次 Parent 构造函数，并且因此避免了在 Parent.prototype 上面创建不必要的、多余的属性。</p>\n<p>与此同时，原型链还能保持不变；因此，还能够正常使用 instanceof 和 isPrototypeOf。</p>\n<p>开发人员普遍认为寄生组合式继承是引用类型最理想的继承范式。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">object</span>(<span class=\"hljs-params\">o</span>) &#123;<br>    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">F</span>(<span class=\"hljs-params\"></span>) &#123;&#125;<br>    F.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span> = o;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title function_\">F</span>();<br>&#125;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">prototype</span>(<span class=\"hljs-params\">child, parent</span>) &#123;<br>    <span class=\"hljs-keyword\">var</span> prototype = <span class=\"hljs-title function_\">object</span>(parent.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>);<br>    prototype.<span class=\"hljs-property\">constructor</span> = child;<br>    child.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span> = prototype;<br>&#125;<br><br><span class=\"hljs-comment\">// 当我们使用的时候：</span><br><span class=\"hljs-title function_\">prototype</span>(<span class=\"hljs-title class_\">Child</span>, <span class=\"hljs-title class_\">Parent</span>);<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"11-深拷贝与浅拷贝\"><a href=\"#11-深拷贝与浅拷贝\" class=\"headerlink\" title=\"11 深拷贝与浅拷贝\"></a>11 深拷贝与浅拷贝</h2><ul>\n<li>浅拷贝：for in,Object.assign,展开语法。</li>\n<li>深拷贝：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">parse</span>(<span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>(obj))<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">copy</span>(<span class=\"hljs-params\">object</span>) &#123;<br>  <span class=\"hljs-keyword\">let</span> obj = object <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-title class_\">Array</span> ? [] : &#123;&#125;;<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> [k, v] <span class=\"hljs-keyword\">of</span> <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">entries</span>(object)) &#123;<br>    obj[k] = <span class=\"hljs-keyword\">typeof</span> v == <span class=\"hljs-string\">&quot;object&quot;</span> ? <span class=\"hljs-title function_\">copy</span>(v) : v;<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> obj;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"12-防抖和节流\"><a href=\"#12-防抖和节流\" class=\"headerlink\" title=\"12  防抖和节流\"></a>12  防抖和节流</h2><p><a href=\"https://www.cnblogs.com/cc-freiheit/p/10827372.html\">js 函数的防抖(debounce)与节流(throttle)</a></p>\n<h3 id=\"防抖\"><a href=\"#防抖\" class=\"headerlink\" title=\"防抖\"></a>防抖</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//每次执行都将前一次清掉，只执行最后一次</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">debounce</span>(<span class=\"hljs-params\">fn, delay</span>) &#123;<br>    <span class=\"hljs-keyword\">let</span> timer = <span class=\"hljs-literal\">null</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-built_in\">clearTimeout</span>(timer)<br>        timer = <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>            fn.<span class=\"hljs-title function_\">apply</span>(<span class=\"hljs-variable language_\">this</span>, <span class=\"hljs-variable language_\">arguments</span>)<br>        &#125;, delay)<br>    &#125;<br>&#125;<br>$(<span class=\"hljs-string\">&#x27;#content&#x27;</span>).<span class=\"hljs-property\">onmousemove</span> = <span class=\"hljs-title function_\">debounce</span>(fn,<span class=\"hljs-number\">1000</span>)<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"节流\"><a href=\"#节流\" class=\"headerlink\" title=\"节流\"></a>节流</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//一段时间只执行一次</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">throttle</span>(<span class=\"hljs-params\">fn, delay</span>) &#123;<br>    <span class=\"hljs-keyword\">let</span> pre = <span class=\"hljs-number\">0</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-keyword\">let</span> now = <span class=\"hljs-title class_\">Date</span>.<span class=\"hljs-title function_\">now</span>()<br>        <span class=\"hljs-keyword\">if</span> (now - pre &gt; delay) &#123;<br>            fn.<span class=\"hljs-title function_\">apply</span>(<span class=\"hljs-variable language_\">this</span>, <span class=\"hljs-variable language_\">arguments</span>)<br>            pre = now<br>        &#125;<br>    &#125;<br>&#125;<br><span class=\"hljs-comment\">//计时器方法，如果timeout正在计时，就不执行，这样一段时间只执行一次</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">throttle2</span>(<span class=\"hljs-params\">fn, delay</span>) &#123;<br>    <span class=\"hljs-keyword\">let</span> timeout<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-keyword\">if</span> (!timeout) &#123;<br>            timeout = <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>                timeout = <span class=\"hljs-literal\">null</span><br>                fn.<span class=\"hljs-title function_\">apply</span>(<span class=\"hljs-variable language_\">this</span>, <span class=\"hljs-variable language_\">arguments</span>)<br>            &#125;, delay)<br>        &#125;<br>    &#125;<br>&#125;<br>$(<span class=\"hljs-string\">&#x27;#content&#x27;</span>).<span class=\"hljs-property\">onmousemove</span> = <span class=\"hljs-title function_\">throttle</span>(fn,<span class=\"hljs-number\">1000</span>)<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"13-作用域和作用域链、执行期上下文\"><a href=\"#13-作用域和作用域链、执行期上下文\" class=\"headerlink\" title=\"13  作用域和作用域链、执行期上下文\"></a><font color='red'>13  作用域和作用域链、执行期上下文</font></h2><h3 id=\"词法作用域\"><a href=\"#词法作用域\" class=\"headerlink\" title=\"词法作用域\"></a>词法作用域</h3><p>词法作用域是指在词法分析阶段就确定了，不会改变。变量的作用域是在定义时决定而不是执行时决定，也就是说词法作用域取决于源码，通过静态分析就能确定，因此词法作用域也叫做静态作用域。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">let</span> value = <span class=\"hljs-number\">10</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">a</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(value)<br>&#125;<br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">b</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-keyword\">let</span> value = <span class=\"hljs-number\">22</span><br>    <span class=\"hljs-title function_\">a</span>()<br>&#125;<br><span class=\"hljs-title function_\">b</span>()<span class=\"hljs-comment\">//10</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"上下文-context\"><a href=\"#上下文-context\" class=\"headerlink\" title=\"上下文(context)\"></a>上下文(context)</h3><p>指作用域。每个上下文都有一个关联的变量对象（variable object），这个上下文中定义的所有变量和函数都存在于这个对象上。上下文中的代码在执行的时候，会创建变量对象的一个作用域链（scope chain）</p>\n<h3 id=\"作用域链\"><a href=\"#作用域链\" class=\"headerlink\" title=\"作用域链\"></a>作用域链</h3><p>当查找变量的时候，会先从当前上下文的变量对象中查找，如果没有找到，就会从父级(词法层面上的父级)执行上下文的变量对象中查找，一直找到全局上下文的变量对象，也就是全局对象。这样由多个执行上下文的变量对象构成的链表就叫做作用域链。</p>\n<h3 id=\"执行期上下文\"><a href=\"#执行期上下文\" class=\"headerlink\" title=\"执行期上下文\"></a>执行期上下文</h3><p><a href=\"https://blog.csdn.net/qq_27626333/article/details/78463565\">https://blog.csdn.net/qq_27626333&#x2F;article&#x2F;details&#x2F;78463565</a></p>\n<hr>\n<h2 id=\"14-DOM常见操作\"><a href=\"#14-DOM常见操作\" class=\"headerlink\" title=\"14 DOM常见操作\"></a>14 DOM常见操作</h2><p><a href=\"https://houdunren.gitee.io/note/js/18%20DOM.html#%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86\">DOM基础知识</a></p>\n<hr>\n<h2 id=\"15-Array-sort-方法与实现机制\"><a href=\"#15-Array-sort-方法与实现机制\" class=\"headerlink\" title=\"15 Array.sort()方法与实现机制\"></a>15 Array.sort()方法与实现机制</h2><p>插入排序，快排（chrome)</p>\n<hr>\n<h2 id=\"16-AJAX的请求过程\"><a href=\"#16-AJAX的请求过程\" class=\"headerlink\" title=\"16 AJAX的请求过程\"></a>16 AJAX的请求过程</h2><ol>\n<li>创建XMLHttpRequest对象xhr</li>\n<li>设置回调函数</li>\n<li>open方法初始化请求参数</li>\n<li>send方法发送数据</li>\n<li>在回调函数中处理响应状态</li>\n</ol>\n<img src=\"readystate.bmp\" style=\"zoom: 80%;\" />\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><br><span class=\"hljs-keyword\">var</span> xhr = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">XMLHttpRequest</span>();<br>xhr.<span class=\"hljs-property\">onreadystatechange</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>  <span class=\"hljs-keyword\">if</span> (xhr.<span class=\"hljs-property\">readyState</span> === <span class=\"hljs-number\">4</span> &amp;&amp; xhr.<span class=\"hljs-property\">status</span> === <span class=\"hljs-number\">200</span>) <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(xhr.<span class=\"hljs-property\">responseText</span>)<br>  <span class=\"hljs-keyword\">else</span> &#123;<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(xhr.<span class=\"hljs-property\">statusText</span>);<br>&#125;<br>xhr.<span class=\"hljs-title function_\">open</span>(<span class=\"hljs-string\">&#x27;GET&#x27;</span>, <span class=\"hljs-string\">&#x27;/endpoint&#x27;</span>, <span class=\"hljs-literal\">true</span>);<br>xhr.<span class=\"hljs-title function_\">send</span>(data);<br><br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"17-JS的垃圾回收机制\"><a href=\"#17-JS的垃圾回收机制\" class=\"headerlink\" title=\"17 JS的垃圾回收机制\"></a>17 JS的垃圾回收机制</h2><p><a href=\"https://segmentfault.com/a/1190000018605776\">前端面试：谈谈 JS 垃圾回收机制</a></p>\n<ol>\n<li><p>垃圾:一般来说没有被引用的对象就是垃圾，就是要被清除， 有个例外如果几个对象引用形成一个环，互相引用，但根访问不到它们，这几个对象也是垃圾，也要被清除。</p>\n</li>\n<li><p>垃圾回收算法</p>\n<ul>\n<li>标记清除：<ol>\n<li>垃圾回收器获取根并“标记”。（根：无法删除的基本的固有可达值：①函数的变量，参数。②嵌套调用链上的其他函数的变量和参数。③全局变量等</li>\n<li>然后它访问并“标记”所有来自根的引用。</li>\n<li>然后它访问标记的对象并标记它们的引用。所有被访问的对象都被记住，以便以后不再访问同一个对象两次。 </li>\n<li>以此类推，直到有未访问的引用(可以从根访问)为止。</li>\n<li>除标记的对象外，所有对象都被删除。</li>\n</ol>\n</li>\n<li>引用计数</li>\n</ul>\n<p>所谓”引用计数”是指语言引擎有一张”引用表”，保存了内存里面所有的资源（通常是各种值）的引用次数。如果一个值的引用次数是0，就表示这个值不再用到了，因此可以将这块内存释放</p>\n</li>\n</ol>\n<hr>\n<h2 id=\"18-String-Math方法\"><a href=\"#18-String-Math方法\" class=\"headerlink\" title=\"18 String,Math方法\"></a>18 String,Math方法</h2><p><a href=\"https://www.cnblogs.com/lihuijuan/p/8490578.html\">总结JS中string、math、array的常用的方法</a></p>\n<h2 id=\"19-addEventListener和onClick-的区别\"><a href=\"#19-addEventListener和onClick-的区别\" class=\"headerlink\" title=\"19 addEventListener和onClick()的区别\"></a>19 addEventListener和onClick()的区别</h2><ul>\n<li>onClick直接触发事件，同一时间只能指向唯一对象，会被覆盖掉.</li>\n<li>addEventListener，同一事件类型可以设置多个事件处理程序，按设置的顺序先后执行，且可以控制触发阶段，<code>&#123; capture: true/false &#125;</code></li>\n</ul>\n<hr>\n<h2 id=\"20-new和Object-create区别\"><a href=\"#20-new和Object-create区别\" class=\"headerlink\" title=\"20 new和Object.create区别\"></a>20 new和Object.create区别</h2><ul>\n<li>new将对象的__proto__指向构造函数的prototype</li>\n<li>Object.create将新对象的__proto__指向指定的对象</li>\n</ul>\n<hr>\n<h2 id=\"21-DOM的location对象\"><a href=\"#21-DOM的location对象\" class=\"headerlink\" title=\"21 DOM的location对象\"></a>21 DOM的location对象</h2><img src=\"16eea8822b4d1239.jpg\"  />\n\n<hr>\n<h2 id=\"22-BOM属性对象方法\"><a href=\"#22-BOM属性对象方法\" class=\"headerlink\" title=\"22 BOM属性对象方法\"></a>22 BOM属性对象方法</h2><img src=\"BOM.png\"/>\n\n<p><a href=\"https://juejin.cn/post/6844904015646441485\">JS BOM详解</a></p>\n<hr>\n<h2 id=\"23-浏览器从输入URL到页面渲染的整个流程\"><a href=\"#23-浏览器从输入URL到页面渲染的整个流程\" class=\"headerlink\" title=\"23 浏览器从输入URL到页面渲染的整个流程\"></a>23 浏览器从输入URL到页面渲染的整个流程</h2><ol>\n<li>DNS解析</li>\n<li>TCP连接</li>\n<li>发送HTTP请求</li>\n<li>服务器处理请求并返回HTTP报文</li>\n<li>浏览器解析渲染页面</li>\n<li>连接结束</li>\n</ol>\n<p>详细：</p>\n<ul>\n<li><p>输入url后，首先需要找到这个url域名的服务器ip,为了寻找这个ip，浏览器首先会寻找缓存，查看缓存中是否有记录，缓存的查找记录为：浏览器缓存-》系统缓存-》路由器缓存，缓存中没有则查找系统的hosts文件中是否有记录，如果没有则查询DNS服务器，得到服务器的ip地址。</p>\n</li>\n<li><p>三次握手建立TCP连接</p>\n</li>\n<li><p>浏览器构建http请求，并将这个http请求封装在一个tcp包中，这个tcp包会依次经过传输层，网络层，数据链路层，物理层到达服务器，服务器解析这个请求来作出响应，返回相应的html给浏览器</p>\n</li>\n<li><p>渲染页面：</p>\n<ol>\n<li>构建DOM树(DOM tree)：从上到下解析HTML文档生成DOM节点树（DOM tree）；</li>\n<li>构建CSS对象模型(CSS Object Model)树：加载解析样式生成CSSOM树；</li>\n<li>执行JavaScript：加载并执行JavaScript代码（js代码会造成阻塞）；</li>\n<li>构建渲染树(render tree)：根据DOM树和CSSOM树,生成渲染树(render tree)；</li>\n<li>渲染树：按顺序展示在屏幕上的一系列矩形，这些矩形带有字体，颜色和尺寸等视觉属性。</li>\n<li>布局（layout）：根据渲染树将节点树的每一个节点布局在屏幕上的正确位置；</li>\n<li>绘制（painting）：遍历渲染树绘制所有节点，为每一个节点适用对应的样式，这一过程是通过UI后端模块完成；</li>\n</ol>\n</li>\n<li><p>关闭连接</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"24-跨域、同源策略及跨域实现方式和原理\"><a href=\"#24-跨域、同源策略及跨域实现方式和原理\" class=\"headerlink\" title=\"24 跨域、同源策略及跨域实现方式和原理\"></a>24 跨域、同源策略及跨域实现方式和原理</h2><p><a href=\"https://segmentfault.com/a/1190000022304066\">前端多种跨域方式实现原理详解</a><br><a href=\"http://www.ruanyifeng.com/blog/2016/04/cors.html\">跨域资源共享 CORS 详解</a></p>\n<hr>\n<h2 id=\"25-浏览器的回流（Reflow）和重绘（Repaints）\"><a href=\"#25-浏览器的回流（Reflow）和重绘（Repaints）\" class=\"headerlink\" title=\"25 浏览器的回流（Reflow）和重绘（Repaints）\"></a>25 浏览器的回流（Reflow）和重绘（Repaints）</h2><p>浏览器渲染过程如下：</p>\n<ol>\n<li>解析HTML，生成DOM树，解析CSS，生成CSSOM树</li>\n<li>将DOM树和CSSOM树结合，生成渲染树(Render Tree)</li>\n<li>Layout(回流):根据生成的渲染树，进行回流(Layout)，得到节点的几何信息（位置，大小）</li>\n<li>Painting(重绘):根据渲染树以及回流得到的几何信息，得到节点的绝对像素</li>\n<li>Display:将像素发送给GPU，展示在页面上。</li>\n</ol>\n<img src=\"回流和重绘.png\"  />\n\n<ul>\n<li>回流：这一阶段主要是计算节点的位置和几何信息，那么当<font color='red'>页面布局和几何信息</font>发生变化的时候，就需要回流<ul>\n<li>添加或删除可见的DOM元素</li>\n<li>元素的位置发生变化</li>\n<li>元素的尺寸发生变化（包括外边距、内边框、边框大小、高度和宽度等）</li>\n<li>内容发生变化，比如文本变化或图片被另一个不同尺寸的图片所替代。</li>\n<li>页面一开始渲染的时候（这肯定避免不了）</li>\n<li>浏览器的窗口尺寸变化（因为回流是根据视口的大小来计算元素的位置和大小的）</li>\n</ul>\n</li>\n<li>重绘：由于节点的几何属性发生改变或者由于样式发生改变而不会影响布局的，称为重绘，例如<code>outline</code>, <code>visibility</code>, <code>color</code>、<code>background-color</code>等</li>\n<li><font color='red'>回流一定会触发重绘，而重绘不一定会回流</font></li>\n<li>减少重绘与回流：<a href=\"https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/24\">介绍下重绘和回流（Repaint &amp; Reflow），以及如何进行优化</a></li>\n</ul>\n<hr>\n<h2 id=\"26-arguments\"><a href=\"#26-arguments\" class=\"headerlink\" title=\"26  arguments\"></a>26  arguments</h2><p>arguments 是函数获得到所有参数集合</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">sum</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-keyword\">return</span> [...<span class=\"hljs-variable language_\">arguments</span>].<span class=\"hljs-title function_\">reduce</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">total, num</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> (total += num);<br>  &#125;, <span class=\"hljs-number\">0</span>);<br>&#125;<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">sum</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">6</span>)); <span class=\"hljs-comment\">//17</span><br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"27-EventLoop事件循环，宏任务，微任务\"><a href=\"#27-EventLoop事件循环，宏任务，微任务\" class=\"headerlink\" title=\"27 EventLoop事件循环，宏任务，微任务\"></a>27 EventLoop事件循环，宏任务，微任务</h2><p>JavaScript 语言的一大特点就是单线程，也就是说同一个时间只能处理一个任务。为了协调事件、用户交互、脚本、UI 渲染和网络处理等行为，防止主线程的不阻塞，（事件循环）Event Loop的方案应用而生。</p>\n<p>JavaScript 处理任务是在等待任务、执行任务 、休眠等待新任务中不断循环中，也称这种机制为事件循环。</p>\n<ul>\n<li>主线程中的任务执行完后，才执行任务队列中的任务</li>\n<li>有新任务到来时会将其放入队列，采取先进先执行的策略执行队列中的任务</li>\n<li>比如多个 <code>setTimeout</code> 同时到时间了，就要依次执行</li>\n</ul>\n<p>任务包括 script(整体代码)、 setTimeout、setInterval、DOM渲染、DOM事件、Promise、XMLHTTPREQUEST等</p>\n<ul>\n<li><p>宏任务：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">script(整体代码)<br>setTimeout<br>setInterval<br>I/O<br>UI交互事件<br>postMessage<br>MessageChannel<br>setImmediate(Node.js 环境)<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>微任务:微任务一般由用户代码产生，微任务较宏任务执行优先级更高</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">Promise.then<br>Object.observe<br>MutaionObserver<br>process.nextTick(Node.js 环境)<br></code></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<h2 id=\"28-函数柯里化及其通用封装\"><a href=\"#28-函数柯里化及其通用封装\" class=\"headerlink\" title=\"28 函数柯里化及其通用封装\"></a>28 函数柯里化及其通用封装</h2><p>柯里化是一种将使用多个参数的一个函数转换成一系列使用一个参数的函数的技术。<br>函数柯里化，其实就是把多次调用的变量保存在闭包中，每次调用都查看一下变量数和原函数的形参数量是否相等。不相等就继续递归。直到相等为止就处理了</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"> <span class=\"hljs-comment\">//ES5</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">curry1</span>(<span class=\"hljs-params\">func, ...args</span>) &#123;<br>     <span class=\"hljs-keyword\">if</span> (args.<span class=\"hljs-property\">length</span> &lt; func.<span class=\"hljs-property\">length</span>) &#123;<br>         <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>             <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">curry</span>(func, ...args, ...<span class=\"hljs-variable language_\">arguments</span>)<br>         &#125;<br>     &#125;<br>     <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">func</span>(...args)<br> &#125;<br><span class=\"hljs-comment\">//ES6</span><br><span class=\"hljs-keyword\">let</span> <span class=\"hljs-title function_\">curry2</span> = (<span class=\"hljs-params\">func, ...args</span>) =&gt; args.<span class=\"hljs-property\">length</span> &lt; func.<span class=\"hljs-property\">length</span> ? <span class=\"hljs-function\">(<span class=\"hljs-params\">...args2</span>) =&gt;</span> <span class=\"hljs-title function_\">curry2</span>(func, ...args, ...args2) : <span class=\"hljs-title function_\">func</span>(...args)<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">add</span>(<span class=\"hljs-params\">a, b</span>) &#123;<br>    <span class=\"hljs-keyword\">return</span> a + b;<br>&#125;<br><br><span class=\"hljs-keyword\">var</span> addCurry = <span class=\"hljs-title function_\">curry</span>(add);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">addCurry</span>(<span class=\"hljs-number\">1</span>)(<span class=\"hljs-number\">2</span>))<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"29-和-区别\"><a href=\"#29-和-区别\" class=\"headerlink\" title=\"29 &#x3D;&#x3D;和&#x3D;&#x3D;&#x3D;区别\"></a>29 &#x3D;&#x3D;和&#x3D;&#x3D;&#x3D;区别</h2><p><code>===</code> 严格相等，会比较两个值的类型和值<br><code>==</code>  抽象相等，比较时，会先进行类型转换，然后再比较值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> num = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> obj = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>(<span class=\"hljs-string\">&quot;0&quot;</span>);<br><span class=\"hljs-keyword\">var</span> str = <span class=\"hljs-string\">&quot;0&quot;</span>;<br><span class=\"hljs-keyword\">var</span> b = <span class=\"hljs-literal\">false</span>;<br><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(num === num); <span class=\"hljs-comment\">// true</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(obj === obj); <span class=\"hljs-comment\">// true</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(str === str); <span class=\"hljs-comment\">// true</span><br><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(num === obj); <span class=\"hljs-comment\">// false</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(num === str); <span class=\"hljs-comment\">// false</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(obj === str); <span class=\"hljs-comment\">// false</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-literal\">null</span> === <span class=\"hljs-literal\">undefined</span>); <span class=\"hljs-comment\">// false</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(obj === <span class=\"hljs-literal\">null</span>); <span class=\"hljs-comment\">// false</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(obj === <span class=\"hljs-literal\">undefined</span>); <span class=\"hljs-comment\">// false</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> num = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> obj = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>(<span class=\"hljs-string\">&quot;0&quot;</span>);<br><span class=\"hljs-keyword\">var</span> str = <span class=\"hljs-string\">&quot;0&quot;</span>;<br><span class=\"hljs-keyword\">var</span> b = <span class=\"hljs-literal\">false</span>;<br><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(num == num); <span class=\"hljs-comment\">// true</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(obj == obj); <span class=\"hljs-comment\">// true</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(str == str); <span class=\"hljs-comment\">// true</span><br><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(num == obj); <span class=\"hljs-comment\">// true</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(num == str); <span class=\"hljs-comment\">// true</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(obj == str); <span class=\"hljs-comment\">// true</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-literal\">null</span> == <span class=\"hljs-literal\">undefined</span>); <span class=\"hljs-comment\">// true</span><br><br><span class=\"hljs-comment\">// both false, except in rare cases</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(obj == <span class=\"hljs-literal\">null</span>);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(obj == <span class=\"hljs-literal\">undefined</span>);<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"30-setTimeout-误差\"><a href=\"#30-setTimeout-误差\" class=\"headerlink\" title=\"30 setTimeout 误差\"></a>30 setTimeout 误差</h2><p>主线程执行任务花费时间大于定时器时间，定时器的回调在宏任务队列里，来不及调用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;start&quot;</span>);<br><span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;timeout&quot;</span>);<br>&#125;,<span class=\"hljs-number\">5000</span>);<br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>;i &lt;= <span class=\"hljs-number\">500000</span>;i++)&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;i:&quot;</span>,i);<br>&#125;<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;end&quot;</span>);<br><br>结果：<br>start<br><span class=\"hljs-attr\">i</span>:<span class=\"hljs-number\">1</span> <br>(...) <span class=\"hljs-comment\">//一直输出到500000</span><br><span class=\"hljs-comment\">//耗时14秒左右</span><br>end<br><span class=\"hljs-comment\">//没有等待</span><br>timeout<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"31-循环比较\"><a href=\"#31-循环比较\" class=\"headerlink\" title=\"31 循环比较\"></a>31 循环比较</h2><ol>\n<li><p>for循环，写法麻烦</p>\n</li>\n<li><p>数组<code>foreach</code>，无法中途跳出<code>forEach</code>循环，<code>break</code>命令或<code>return</code>命令都不能奏效。</p>\n</li>\n<li><p><code>for...in</code>循环可以遍历数组的键名。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> index <span class=\"hljs-keyword\">in</span> myArray) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(myArray[index]);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><code>for...in</code>循环有几个缺点。</p>\n<ul>\n<li>数组的键名是数字，但是<code>for...in</code>循环是以字符串作为键名“0”、“1”、“2”等等。</li>\n<li><code>for...in</code>循环不仅遍历数字键名，还会遍历手动添加的其他键，甚至包括原型链上的键。</li>\n<li>某些情况下，<code>for...in</code>循环会以任意顺序遍历键名。</li>\n</ul>\n<p>总之，<code>for...in</code>循环主要是为遍历对象而设计的，不适用于遍历数组。</p>\n</li>\n<li><p>for…of循环内部调用的是数据结构的遍历器。<code>for...of</code>循环相比上面几种做法，有一些显著的优点:</p>\n<ul>\n<li>有着同<code>for...in</code>一样的简洁语法，但是没有<code>for...in</code>那些缺点。</li>\n<li>不同于<code>forEach</code>方法，它可以与<code>break</code>、<code>continue</code>和<code>return</code>配合使用。</li>\n<li>提供了遍历所有数据结构的统一操作接口</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2 id=\"32-异步方式比较\"><a href=\"#32-异步方式比较\" class=\"headerlink\" title=\"32 异步方式比较\"></a>32 异步方式比较</h2><ul>\n<li>回调：回调地狱</li>\n<li>promise:代码完全都是 Promise 的 API（<code>then</code>、<code>catch</code>等等）</li>\n<li>generator:必须有一个任务运行器，自动执行 Generator 函数；而且必须保证<code>yield</code>语句后面的表达式，必须返回一个 Promise</li>\n<li>async:实现最简洁</li>\n</ul>\n<hr>\n<h2 id=\"33-模块加载方案比较\"><a href=\"#33-模块加载方案比较\" class=\"headerlink\" title=\"33 模块加载方案比较\"></a>33 模块加载方案比较</h2><ul>\n<li><p>CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用。</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">CommonJS</span> 模块输出的是值的拷贝，也就是说，一旦输出一个值，模块内部的变化就影响不到这个值。<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>CommonJS 模块是运行时加载，ES6 模块是编译时输出接口。</p>\n<figure class=\"highlight elm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs elm\"><span class=\"hljs-type\">CommonJS</span> 加载的是一个对象（即`<span class=\"hljs-keyword\">module</span>.exports`属性），该对象只有在脚本运行完才会生成。而 ES6 模块不是对象，它的对外接口只是一种静态定义，在代码静态解析阶段就会生成。<br><span class=\"hljs-type\">ES6</span> 模块的运行机制与 <span class=\"hljs-type\">CommonJS</span> 不一样。<span class=\"hljs-type\">JS</span> 引擎对脚本静态分析的时候，遇到模块加载命令<span class=\"hljs-keyword\">import</span>，就会生成一个只读引用。等到脚本真正执行时，再根据这个只读引用，到被加载的那个模块里面去取值。原始值变了，<span class=\"hljs-keyword\">import</span>加载的值也会跟着变。因此，ES6 模块是动态引用，并且不会缓存值，模块里面的变量绑定其所在的模块。<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>CommonJS 模块的<code>require()</code>是同步加载模块，ES6 模块的<code>import</code>命令是异步加载，有一个独立的模块依赖的解析阶段。</p>\n<figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xquery\">默认情况下，浏览器是同步加载 JavaScript 脚本，即渲染引擎遇到<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span>标签就会停下来，等到执行完脚本，再继续向下渲染。如果是外部脚本，还必须加入脚本下载的时间。</span><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\">标签打开defer或<span class=\"hljs-keyword\">async</span>属性，脚本就会异步加载。渲染引擎遇到这一行命令，就会开始下载外部脚本，但不会等它下载和执行，而是直接执行后面的命令。<span class=\"hljs-string\">`defer`</span>是“渲染完再执行”，<span class=\"hljs-string\">`async`</span>是“下载完就执行”。</span></span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\"></span></span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">浏览器对于带有<span class=\"hljs-string\">`type=&quot;module&quot;`</span>的<span class=\"hljs-string\">`</span></span></span></span></span><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span>`，都是异步加载，不会造成堵塞浏览器，即等到整个页面渲染完，再执行模块脚本，</span></span></span><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">font</span> <span class=\"hljs-attr\">color</span>=<span class=\"hljs-string\">&#x27;orange&#x27;</span>&gt;</span>等同于打开了`</span></span></span><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"><span class=\"hljs-string\">`标签的`</span>defer<span class=\"hljs-string\">`属性。&lt;/font&gt;</span></span></span></span></span><br></code></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<h2 id=\"34-ES6-ES5继承内置类\"><a href=\"#34-ES6-ES5继承内置类\" class=\"headerlink\" title=\"34  ES6,ES5继承内置类\"></a>34  ES6,ES5继承内置类</h2><ul>\n<li><p>ES5中，这些原生构造函数是无法继承的，因为子类无法获得原生构造函数的内部属性，通过Array.apply()或者分配给原型对象都不行。原生构造函数会忽略apply方法传入的this，也就是说，原生构造函数的this无法绑定，导致拿不到内部属性。ES5 是先新建子类的实例对象this，再将父类的属性添加到子类上，由于父类的内部属性无法获取，导致无法继承原生的构造函数</p>\n</li>\n<li><p>ES6 允许继承原生构造函数定义子类，因为 ES6 是先新建父类的实例对象<code>this</code>，然后再用子类的构造函数修饰<code>this</code>，使得父类的所有行为都可以继承。</p>\n</li>\n</ul>\n<hr>\n<h1 id=\"Html-CSS\"><a href=\"#Html-CSS\" class=\"headerlink\" title=\"Html&amp;CSS\"></a>Html&amp;CSS</h1><h2 id=\"1-CSS权重及其引入方式\"><a href=\"#1-CSS权重及其引入方式\" class=\"headerlink\" title=\"1 CSS权重及其引入方式\"></a>1 CSS权重及其引入方式</h2><p>引入方式：内联式（行内），嵌入式（页内style标签)，外链式(link)，导入式(import)</p>\n<p>权重：</p>\n<ul>\n<li>内联式优先级最高；嵌入式，外链式在后面的优先级高。</li>\n<li>id优先级高于class</li>\n<li>important &gt; 内嵌样式 &gt; ID &gt; 类 &gt; 标签 | 伪类 | 属性选择 &gt; 伪对象 &gt; 继承 &gt; 通配符</li>\n</ul>\n<p>权重值：把特殊性分为4个等级，每个等级代表一类选择器，每个等级的值为其所代表的选择器的个数乘以这一等级的权值，最后把所有等级的值相加得出选择器的特殊值。</p>\n<ol>\n<li>第一等：代表内联样式，如: style&#x3D;””，权值为1000。</li>\n<li>第二等：代表ID选择器，如：#content，权值为100。</li>\n<li>第三等：代表类，伪类和属性选择器，如.content a:link :[title]，权值为10。</li>\n<li>第四等：代表类型选择器和伪元素选择器，如div p ::before，权值为1。</li>\n<li>通配符 * 没有权重，权值为0.</li>\n</ol>\n<hr>\n<h2 id=\"2-a标签全部作用\"><a href=\"#2-a标签全部作用\" class=\"headerlink\" title=\"2  a标签全部作用\"></a>2  a标签全部作用</h2><ul>\n<li>外部页面链接  <code>&lt;a href=&quot;http://www.baidu.com&quot; target=&quot;_blank&quot;&gt;百度&lt;/a&gt;</code></li>\n<li>本地页面链接 <code>&lt;a href=&quot;demo02.html&quot; target=&quot;_blank&quot;&gt;打开demo02&lt;/a&gt;</code></li>\n<li>锚点链接（页面内部区域跳转）<code>&lt;a href=&quot;#part1&quot;&gt;第1章&lt;/a&gt;</code>跳到 <code>&lt;p id=&quot;part1&quot;&gt;第1章&lt;/p&gt;</code></li>\n</ul>\n<hr>\n<h2 id=\"3-用CSS画三角形\"><a href=\"#3-用CSS画三角形\" class=\"headerlink\" title=\"3 用CSS画三角形\"></a>3 用CSS画三角形</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-id\">#demo</span> &#123;<br>            <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">0px</span>;<br>            <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">0px</span>;<br>            <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">60px</span> solid transparent;//transparent使背景透明<br>            <span class=\"hljs-attribute\">border-bottom</span>: <span class=\"hljs-number\">60px</span> solid red;<br>        &#125;<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"4-未知宽高元素水平垂直居中（方案及比较）\"><a href=\"#4-未知宽高元素水平垂直居中（方案及比较）\" class=\"headerlink\" title=\"4 未知宽高元素水平垂直居中（方案及比较）\"></a>4 未知宽高元素水平垂直居中（方案及比较）</h2><ol>\n<li><p>定位：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.father</span> &#123;<br>    <span class=\"hljs-attribute\">position</span>: relative;<br>    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">200px</span>;<br>    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">200px</span>;<br>    <span class=\"hljs-attribute\">background</span>: skyblue;<br>&#125;<br><span class=\"hljs-selector-class\">.son</span> &#123;<br>    <span class=\"hljs-attribute\">position</span>: absolute;<br>    <span class=\"hljs-attribute\">top</span>: <span class=\"hljs-number\">50%</span>;<br>    <span class=\"hljs-attribute\">left</span>: <span class=\"hljs-number\">50%</span>;<br>    <span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">translate</span>(-<span class=\"hljs-number\">50%</span>,-<span class=\"hljs-number\">50%</span>);<br>    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100px</span>;<br>    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">100px</span>;<br>    <span class=\"hljs-attribute\">background</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>flex&#x2F;grid:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.father</span> &#123;<br>    <span class=\"hljs-attribute\">display</span>: flex/grid;<br>    <span class=\"hljs-attribute\">justify-content</span>: center;<br>    <span class=\"hljs-attribute\">align-items</span>: center;<br>    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">200px</span>;<br>    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">200px</span>;<br>    <span class=\"hljs-attribute\">background</span>: skyblue;<br>&#125;<br><span class=\"hljs-selector-class\">.son</span> &#123;<br>    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100px</span>;<br>    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">100px</span>;<br>    <span class=\"hljs-attribute\">background</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>table布局</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.father</span> &#123;<br>          <span class=\"hljs-attribute\">display</span>: table-cell;<br>          <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">200px</span>;<br>          <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">200px</span>;<br>          <span class=\"hljs-attribute\">background</span>: skyblue;<br>          <span class=\"hljs-attribute\">vertical-align</span>: middle;<br>          <span class=\"hljs-attribute\">text-align</span>: center;<br>      &#125;<br>      <span class=\"hljs-selector-class\">.son</span> &#123;<br>          <span class=\"hljs-attribute\">display</span>: inline-block;<br>          <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100px</span>;<br>          <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">100px</span>;<br>          <span class=\"hljs-attribute\">background</span>: red;<br>      &#125;<br></code></pre></td></tr></table></figure></li>\n</ol>\n<hr>\n<h2 id=\"5-HTML元素划分\"><a href=\"#5-HTML元素划分\" class=\"headerlink\" title=\"5 HTML元素划分\"></a>5 HTML元素划分</h2><h3 id=\"块级元素\"><a href=\"#块级元素\" class=\"headerlink\" title=\"块级元素\"></a>块级元素</h3><p>在html中<code>div,p,h1,form,ul,li</code>就是块级元素。设置<code>display:block</code>就是将元素显示为块级元素。块级元素特点：</p>\n<ul>\n<li>每个块级元素都从新的一行开始，并且其后的元素也另起一行；（<strong>一个块级元素独占一行</strong>）</li>\n<li>元素的高度、宽度、行高以及顶和底边距都可设置；</li>\n<li>元素宽度在不设置的情况下，是它本身父容器的*100%（和父元素的宽度一致），除非设定一个宽度。</li>\n</ul>\n<h3 id=\"内联元素\"><a href=\"#内联元素\" class=\"headerlink\" title=\"内联元素\"></a>内联元素</h3><p>在html中<code>span,a,label,input,img,strong,em</code>就是典型的内联元素（行内元素）（inline）元素。当然块状元素也可以通过代码<code>display:inline</code>将元素设置为内联元素。内联元素特点：</p>\n<ul>\n<li>和其他元素都在一行上</li>\n<li>元素的高度、宽度、行高及顶部和底部边距不可设置；</li>\n<li>元素的宽度就是它包含的文字或图片的宽度，不可改变。</li>\n</ul>\n<p>注意：为 a 元素设置了宽和高，但都没有起到作用，原因是<strong>a在默认的时候是内联元素，内联元素是不可以设置宽和高的</strong>。</p>\n<h3 id=\"内联块状元素\"><a href=\"#内联块状元素\" class=\"headerlink\" title=\"内联块状元素\"></a>内联块状元素</h3><p>内联块状元素（<code>inline-block</code>）就是同时具备内联元素、块状元素的特点，代码<code>display:inline-block</code>就是将元素设置为内联块状元素。inline-block元素特点：</p>\n<ul>\n<li><strong>和其他元素都在一行上；</strong></li>\n<li><strong>元素的高度、宽度、行高以及顶和底边距都可设置</strong></li>\n</ul>\n<p><font color='orange'>注意：img是inline元素，但是他同时也是替换元素，他有着特殊的表现：</font></p>\n<ul>\n<li><strong>可以设置width&#x2F;height;</strong></li>\n<li>默认的，img元素在屏幕占据的空间与其图片的实际像素一致，除非CSS有设置或者自身的width&#x2F;height HTML 属性有设置；</li>\n<li>如果img标签的包裹元素为也为inline元素，则img的边界可以超出其直接父元素的边界，直到自己的宽、高达到最大或者设定值为止，而且文档流中img的兄弟元素也不能遮盖住img。最常见的就是a标签里面包含的img标签；</li>\n<li>所以从行为上看,img元素作为替换元素，有着类似于Inline-block的行为，尽管在SPEC里面，他的确是一个inline元素。</li>\n</ul>\n<hr>\n<h2 id=\"6-盒子模型，定位\"><a href=\"#6-盒子模型，定位\" class=\"headerlink\" title=\"6 盒子模型，定位\"></a>6 盒子模型，定位</h2><p><a href=\"https://www.runoob.com/css/css-positioning.html\">菜鸟教程</a></p>\n<hr>\n<h2 id=\"7-margin塌陷及合并问题\"><a href=\"#7-margin塌陷及合并问题\" class=\"headerlink\" title=\"7 margin塌陷及合并问题\"></a>7 margin塌陷及合并问题</h2><h3 id=\"margin塌陷\"><a href=\"#margin塌陷\" class=\"headerlink\" title=\"margin塌陷\"></a>margin塌陷</h3><p>嵌套父子块级元素垂直方向（次方向）的margin会结合到一起，并取最大的值，子元素的margin会往父元素顶部上方方向塌陷（父盒子里面没有文字，也没有边框（border），也没有padding-top ）</p>\n<p><font color='red'>解决方法</font>:</p>\n<ol>\n<li>给父级设置边框或内边距(不建议使用)</li>\n<li>触发BFC：<ul>\n<li>position:absolute&#x2F;fixed</li>\n<li>display:inline-block;</li>\n<li>float:left&#x2F;right;</li>\n<li>overflow:hidden;</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"margin合并\"><a href=\"#margin合并\" class=\"headerlink\" title=\"margin合并\"></a>margin合并</h3><p>兄弟块级元素间垂直方向的margin值会合并在一起并取最大值</p>\n<p><font color='red'>解决方法</font>:给任意一个元素加一个父级元素并触发BFC就可以将其子元素不受到外界影响，如同加了一个“顶”</p>\n<hr>\n<h2 id=\"8-display及相关属性\"><a href=\"#8-display及相关属性\" class=\"headerlink\" title=\"8 display及相关属性\"></a>8 display及相关属性</h2><p><a href=\"https://www.runoob.com/cssref/pr-class-display.html\">CSS display 属性</a></p>\n<p><a href=\"https://segmentfault.com/a/1190000015116392\">CSS中用 opacity、visibility、display 属性将 元素隐藏 的 对比分析</a></p>\n<p>![](display opacity visibility 对比.png)</p>\n<hr>\n<h2 id=\"9-IFC-与-BFC\"><a href=\"#9-IFC-与-BFC\" class=\"headerlink\" title=\"9 IFC 与 BFC\"></a>9 IFC 与 BFC</h2><p><a href=\"https://segmentfault.com/a/1190000009545742\">BFC与IFC概念理解+布局规则+形成方法+用处</a></p>\n<p><a href=\"https://segmentfault.com/a/1190000016721094?utm_source=sf-related\">深入理解BFC</a></p>\n<p>Formatting context 是 W3C CSS2.1 规范中的一个概念。<font color='orange'>它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用</font>。最常见的 Formatting context 有 Block fomatting context (简称BFC)和 Inline formatting context (简称IFC)。<strong>Block formatting context直译为”块级格式化上下文”。它是一个独立的渲染区域，只有Block-level box参与， 它规定了内部的Block-level Box如何布局，并且与这个区域外部毫不相干</strong>。<strong>通俗地讲，BFC是一个容器，用于管理块级元素。</strong></p>\n<p>触发BFC：</p>\n<ul>\n<li>float为 left|right</li>\n<li>overflow为 hidden|auto|scroll</li>\n<li>display为 table-cell|table-caption|inline-block|inline-flex|flex</li>\n<li>position为 absolute|fixed</li>\n<li>根元素</li>\n</ul>\n<p>BFC布局规则：</p>\n<ul>\n<li>内部的Box会在垂直方向，一个接一个地放置(即块级元素独占一行)。</li>\n<li>BFC的区域不会与float box重叠(<strong>利用这点可以实现自适应两栏布局</strong>)。</li>\n<li>内部的Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠(<strong>margin重叠三个条件:同属于一个BFC;相邻;块级元素</strong>)。</li>\n<li>计算BFC的高度时，浮动元素也参与计算。（清除浮动 haslayout）</li>\n<li>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</li>\n</ul>\n<hr>\n<h2 id=\"10-圣杯布局和双飞翼布局\"><a href=\"#10-圣杯布局和双飞翼布局\" class=\"headerlink\" title=\"10 圣杯布局和双飞翼布局\"></a>10 圣杯布局和双飞翼布局</h2><img src=\"圣杯和双飞翼.jpg\" style=\"zoom:50%;\" />\n\n<p><a href=\"https://juejin.cn/post/6844903568718184461#heading-1\">css布局之圣杯布局和双飞翼布局</a></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\">//圣杯布局<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&#x27;container&#x27;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;center&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;column&quot;</span>&gt;</span>center<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;left&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;column&quot;</span>&gt;</span>left<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;right&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;column&quot;</span>&gt;</span>right<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"language-css\"></span><br><span class=\"language-css\">        <span class=\"hljs-selector-id\">#container</span> &#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">200px</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">overflow</span>: hidden;</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\">        <span class=\"hljs-selector-id\">#center</span> &#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">float</span><span class=\"hljs-selector-pseudo\">:left</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100%</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">background-color</span>: lightblue;</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\">        <span class=\"hljs-selector-id\">#left</span> &#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">float</span><span class=\"hljs-selector-pseudo\">:left</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">200px</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">position</span>: relative;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">left</span>: -<span class=\"hljs-number\">200px</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">margin-left</span>: -<span class=\"hljs-number\">100%</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">background-color</span>: orange;</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\">        <span class=\"hljs-selector-id\">#right</span> &#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">float</span><span class=\"hljs-selector-pseudo\">:left</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">200px</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">position</span>: relative;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">right</span>: -<span class=\"hljs-number\">200px</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">margin-left</span>: -<span class=\"hljs-number\">200px</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">background-color</span>: orange;</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\">//双飞翼<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;header&quot;</span>&gt;</span>header<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;container&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;center&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;column&quot;</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;inner&quot;</span>&gt;</span>center<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;left&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;column&quot;</span>&gt;</span>left<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;right&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;column&quot;</span>&gt;</span>right<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;footer&quot;</span>&gt;</span>footer<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br>   <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"language-css\"></span><br><span class=\"language-css\">        <span class=\"hljs-selector-id\">#container</span> &#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">overflow</span>: hidden;</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\"></span><br><span class=\"language-css\">        <span class=\"hljs-selector-id\">#footer</span>,</span><br><span class=\"language-css\">        <span class=\"hljs-selector-id\">#header</span> &#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">background-color</span>: dimgrey;</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\"></span><br><span class=\"language-css\">        <span class=\"hljs-selector-class\">.column</span> &#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">float</span>: left;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">60vh</span>;</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\"></span><br><span class=\"language-css\">        <span class=\"hljs-selector-id\">#center</span> &#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100%</span>;</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\"></span><br><span class=\"language-css\">        <span class=\"hljs-selector-id\">#inner</span> &#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">100%</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">200px</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">background</span>: lightgrey;</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\"></span><br><span class=\"language-css\">        <span class=\"hljs-selector-id\">#left</span> &#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">200px</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">margin-left</span>: -<span class=\"hljs-number\">100%</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">background-color</span>: lightblue;</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\"></span><br><span class=\"language-css\">        <span class=\"hljs-selector-id\">#right</span> &#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">200px</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">margin-left</span>: -<span class=\"hljs-number\">200px</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">background-color</span>: orange;</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\">    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"11-flex-布局\"><a href=\"#11-flex-布局\" class=\"headerlink\" title=\"11 flex 布局\"></a>11 flex 布局</h2><p><a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\">Flex 布局教程</a></p>\n<hr>\n<h2 id=\"12-px-em-rem-区别\"><a href=\"#12-px-em-rem-区别\" class=\"headerlink\" title=\"12 px,em,rem 区别\"></a>12 px,em,rem 区别</h2><p><a href=\"https://www.jianshu.com/p/a0bdd3e9133d\">响应式Web 设计—px-em-rem三者区别及rem的使用</a></p>\n<hr>\n<h2 id=\"13-css预处理语言\"><a href=\"#13-css预处理语言\" class=\"headerlink\" title=\"13 css预处理语言\"></a>13 css预处理语言</h2><p>CSS 预处理器是一个能让你通过预处理器自己独有的语法来生成CSS的程序。</p>\n<p>其基本思想是：<strong>用一种专门的编程语言，为CSS增加了一些编程的特性</strong>，将CSS作为目标生成文件，然后开发者就只要使用这种语言进行编码工作。</p>\n<p>通俗的说，<strong>CSS预处理器用一种专门的编程语言，进行Web页面样式设计，然后再编译成正常的CSS文件</strong>，以供项目使用。</p>\n<ul>\n<li><a href=\"http://sass-lang.com/\">Sass</a></li>\n<li><a href=\"https://less.bootcss.com/\">LESS</a></li>\n</ul>\n<hr>\n<h2 id=\"14-媒体查询\"><a href=\"#14-媒体查询\" class=\"headerlink\" title=\"14 媒体查询\"></a>14 媒体查询</h2><p>css中使用@media,可以针对不同的媒体类型定义不同的样式.<br>@media 可以针对不同的屏幕尺寸设置不同的样式，特别是如果需要设置设计响应式的页面，@media 是非常有用的</p>\n<p><a href=\"https://houdunren.gitee.io/note/css/15%20%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2.html\">媒体查询</a></p>\n<hr>\n<h2 id=\"15-H5语义化标签\"><a href=\"#15-H5语义化标签\" class=\"headerlink\" title=\"15 H5语义化标签\"></a>15 H5语义化标签</h2><ul>\n<li>header</li>\n<li>nav</li>\n<li>article</li>\n<li>section</li>\n<li>aside</li>\n<li>footer</li>\n</ul>\n<p>作用：</p>\n<ul>\n<li>比<code>&lt;div&gt;</code>标签有更加丰富的含义，使文档结构清晰，方便开发与维护</li>\n<li>搜索引擎能更方便的识别页面的每个部分</li>\n<li>方便其他设备解析（如移动设备、盲人阅读器等）</li>\n</ul>\n<p><a href=\"https://segmentfault.com/a/1190000013901244\">H5语义化标签</a></p>\n<hr>\n<h2 id=\"16-Web-Worker和Web-Socket\"><a href=\"#16-Web-Worker和Web-Socket\" class=\"headerlink\" title=\"16 Web Worker和Web Socket\"></a>16 Web Worker和Web Socket</h2><h3 id=\"Web-Worker\"><a href=\"#Web-Worker\" class=\"headerlink\" title=\"Web Worker\"></a>Web Worker</h3><p>H5中提供了一个JavaScript多线程解决方案，Web Worker是H5中的工作线程，是运行在后台的JavaScript,它能够独立于其他的脚本<br>当 Web Worker工作时，不会影响页面的性能，用户依然可以进行点击，选取等操作</p>\n<p>调用 Web Worker 时，需要将单独执行的 JavaScript 代码放到一个独立的JS文件内，然后在页面内调用Worker构造函数来创建一个线程，参数是文件路径。<br><code>let worker = new Worker(&#39;worker.js&#39;)</code></p>\n<p><font color='orange'>因为Worker不能影响页面性能，所以Worker 中执行的代码不能访问页面或窗口对象</font>，通过onmessage获取后台信息，postMessage向后台发送信息</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//监听消息</span><br>worker.<span class=\"hljs-property\">onmessage</span>=<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>)&#123;&#125;<br><span class=\"hljs-comment\">//发送消息</span><br>worker.<span class=\"hljs-title function_\">postMessage</span>(data)<br><span class=\"hljs-comment\">//停止Worker</span><br>worker.<span class=\"hljs-title function_\">terminate</span>()<br><span class=\"hljs-comment\">//或者worker内部调用close方法</span><br><span class=\"hljs-title function_\">close</span>()<br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Web-Socket\"><a href=\"#Web-Socket\" class=\"headerlink\" title=\"Web Socket\"></a>Web Socket</h3><p>在浏览器服务器之间建立一个双向通道，后台可以随时向前端推送消息，允许跨域</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">let</span> ws = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">WebSocket</span>(<span class=\"hljs-string\">&#x27;ws://localhost:8080&#x27;</span>);<br>ws.<span class=\"hljs-title function_\">send</span>(data);<br>ws.<span class=\"hljs-property\">onopen</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;&#125;;<br>ws.<span class=\"hljs-property\">onmessage</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">msg</span>)&#123;&#125;;<br>ws.<span class=\"hljs-property\">onclose</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;&#125;<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"17-CSS3-动画\"><a href=\"#17-CSS3-动画\" class=\"headerlink\" title=\"17 CSS3 动画\"></a>17 CSS3 动画</h2><ul>\n<li>transition</li>\n<li>animation</li>\n</ul>\n<p><a href=\"https://www.runoob.com/css3/css3-animations.html\">css3动画</a></p>\n<hr>\n<h2 id=\"18-如何实现响应式布局\"><a href=\"#18-如何实现响应式布局\" class=\"headerlink\" title=\"18 如何实现响应式布局\"></a>18 如何实现响应式布局</h2><ul>\n<li>媒体查询</li>\n<li>rem布局</li>\n<li>视口单位</li>\n<li>百分比布局</li>\n<li>flex ,grid 等方案</li>\n</ul>\n<p><a href=\"https://juejin.cn/post/6844903814332432397#heading-13\">前端响应式布局原理与方案</a></p>\n<hr>\n<h2 id=\"19-SEO的概念及实现\"><a href=\"#19-SEO的概念及实现\" class=\"headerlink\" title=\"19 SEO的概念及实现\"></a>19 SEO的概念及实现</h2><p>搜索引擎优化：使用特定的技术使得网站的各种关键词排名提升到搜索引擎的理想位置，从搜索引擎中获得更多的免费流量，以及更好地展现网站形象。</p>\n<p>优化方案：</p>\n<ul>\n<li>设置合理的title、description、keywords</li>\n<li>重要的关键词不要超过2次，而且要靠前，不同页面的title要不同</li>\n<li>使用语义化的html代码，符合w3c规范，语义化代码让搜索引擎容易理解网页</li>\n<li>重要的内容放在html代码最前，搜索引擎抓取页面是自上而下的，有的搜索引擎对抓取的长度有限制</li>\n<li>重要的内容不要通过JS输出，搜索引擎不会执行JS获取内容</li>\n<li>少用iframe，搜索引擎不会抓取iframe</li>\n<li>非装饰性图片必须加上alt</li>\n<li><font color='orangered'>服务端使用模板引擎渲染</font></li>\n</ul>\n<hr>\n<h2 id=\"20-H5新特性\"><a href=\"#20-H5新特性\" class=\"headerlink\" title=\"20 H5新特性\"></a>20 H5新特性</h2><h3 id=\"语义化标签\"><a href=\"#语义化标签\" class=\"headerlink\" title=\"语义化标签\"></a>语义化标签</h3><p>结构元素：article、aside、header、hgroup、footer、figure、section、nav</p>\n<p>其他元素：video、audio、canvas、embed、mark、progress、meter、time、command、details、datagrid、keygen、output、source、menu、ruby、wbr、bdi、dialog、</p>\n<h3 id=\"新增API\"><a href=\"#新增API\" class=\"headerlink\" title=\"新增API\"></a>新增API</h3><ul>\n<li><p>canvas</p>\n</li>\n<li><p>svg</p>\n</li>\n<li><p>audio&#x2F;video</p>\n</li>\n<li><p>Geolocation 定位<code>navigator.geolocation.getCurrentLocation(onSuccess,onError,options)</code></p>\n</li>\n<li><p>Communication：跨文档消息通信，可以确保iframe、标签页、窗口间安全地进行跨源通信。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">postMessage</span>(msg,url);<br><span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;message&#x27;</span>,<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>)&#123;&#125;)<br></code></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>XMLHttpRequest Level2：改进了跨源XMLHttpRequest和进度事件，XMLHttpRequest Level2通过CORS实现了跨源XMLHttpRequest。跨源HTTP请求包含一个Origin头部，它为服务器提供HTTP请求的源信息。</p>\n</li>\n<li><p>WebSockets：要连接远程主机，只需新建一个WebSocket实例，提供希望连接的对端URL。</p>\n</li>\n<li><p>Forms：新表单元素tel、email、url、search、range、number 未来的表单元素color、datetime、datetime-local、time、date、week、month</p>\n</li>\n<li><p>新表单特性和函数：placeholder、autocomplete、autofocus、spellcheck、list特性、datalist元素、min和max、step、required</p>\n</li>\n<li><p>拖放API：draggable属性、拖放事件(dragstart、drag、dragenter、dragleave、dragover、drap、dragend)、dataTransfer对象</p>\n</li>\n<li><p>Web Workers API：Web Workers可以让Web应用程序具备后台处理能力，对多线程的支持性非常好。但是在Web Workers中执行的脚本不能访问该页面的window对象，也就是Web Workers不能直接访问Web页面和DOM API。虽然Web Workers不会导致浏览器UI停止响应，但是仍然会消耗CPU周期，导致系统反应速度变慢。</p>\n</li>\n<li><p>Web Storage API：sessionStorage(保存在session中，浏览器关闭，数据消失)、localStorage(保存在客户端本地，除非手动删除，否则一直保存)</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"21-css3新特性（大概）\"><a href=\"#21-css3新特性（大概）\" class=\"headerlink\" title=\"21 css3新特性（大概）\"></a>21 css3新特性（大概）</h2><ul>\n<li>圆角（border-radius） </li>\n<li>阴影（box-shadow）</li>\n<li>过渡效果（transition）</li>\n<li>翻转（transform）</li>\n<li>动画（animation）</li>\n<li>媒体查询（@media）</li>\n<li>弹性盒子（flex）</li>\n</ul>\n<hr>\n<h1 id=\"计算机网络和HTTP\"><a href=\"#计算机网络和HTTP\" class=\"headerlink\" title=\"计算机网络和HTTP\"></a>计算机网络和HTTP</h1><h2 id=\"1-HTTP报文\"><a href=\"#1-HTTP报文\" class=\"headerlink\" title=\"1 HTTP报文\"></a>1 HTTP报文</h2><p>用于HTTP协议交互的信息称为HTTP报文。请求端的叫请求报文，响应端的叫响应报文。<font color='orange'>HTTP报文本身是由多行数据构成的字符串文本</font></p>\n<p>HTTP报文大致可分为报文首部和报文主体，报文主体是可选项。</p>\n<p><br/><br/></p>\n<p>HTTP报文结构：</p>\n<img src=\"HTTP报文结构.jpg\"/>\n\n<p><br/><br/>请求报文和响应报文结构：</p>\n<img src=\"请求报文和响应报文.jpg\"/>\n\n<p><br/><br/>请求报文和响应报文实例：</p>\n<img src=\"报文实例.jpg\"/>\n\n<hr>\n<h2 id=\"2-HTTP建立持久连接的意义\"><a href=\"#2-HTTP建立持久连接的意义\" class=\"headerlink\" title=\"2 HTTP建立持久连接的意义\"></a>2 HTTP建立持久连接的意义</h2><p>HTTP协议初始版本中，每进行一次通信就要断开一次TCP连接，这在一个页面内可能发生多个TCP连接中断，增加了通信开销。</p>\n<img src=\"HTTP非持久化.jpg\" style=\"zoom:80%;\" />\n\n<p>HTTP持久连接：只要任意一端没有明确提出断开连接，则保持TCP连接状态。<font color='orange'>持久化连接旨在建立一次TCP请求后进行多次HTTP请求和响应 的交互。减少多次TCP的开销，使HTTP请求尽快结束</font>&gt;</p>\n<img src=\"20201116121851148.png\"/>\n\n<hr>\n<h2 id=\"3-HTTP首部字段\"><a href=\"#3-HTTP首部字段\" class=\"headerlink\" title=\"3 HTTP首部字段\"></a>3 HTTP首部字段</h2><img src=\"请求报文和响应报文.jpg\"/>\n\n<h3 id=\"通用首部字段\"><a href=\"#通用首部字段\" class=\"headerlink\" title=\"通用首部字段\"></a>通用首部字段</h3><img src=\"通用首部字段.bmp\"/>\n\n<h3 id=\"请求首部字段\"><a href=\"#请求首部字段\" class=\"headerlink\" title=\"请求首部字段\"></a>请求首部字段</h3><img src=\"请求首部字段.bmp\"/>\n\n<h3 id=\"响应首部字段\"><a href=\"#响应首部字段\" class=\"headerlink\" title=\"响应首部字段\"></a>响应首部字段</h3><img src=\"响应首部字段.bmp\"/>\n\n<h3 id=\"实体首部字段\"><a href=\"#实体首部字段\" class=\"headerlink\" title=\"实体首部字段\"></a>实体首部字段</h3><img src=\"实体首部字段.bmp\"/>\n\n<h3 id=\"为cookie服务的首部字段\"><a href=\"#为cookie服务的首部字段\" class=\"headerlink\" title=\"为cookie服务的首部字段\"></a>为cookie服务的首部字段</h3><img src=\"cookie字段.bmp\"/>\n\n<hr>\n<h2 id=\"14-浏览器缓存机制\"><a href=\"#14-浏览器缓存机制\" class=\"headerlink\" title=\"14 浏览器缓存机制\"></a>14 浏览器缓存机制</h2><p><a href=\"https://juejin.cn/post/6844903593275817998#heading-3\">彻底理解浏览器的缓存机制</a></p>\n<p><a href=\"https://www.jiqizhixin.com/articles/2020-07-24-12\">彻底弄懂浏览器缓存策略</a></p>\n<h3 id=\"强缓存-Cache-Control-与-Expires\"><a href=\"#强缓存-Cache-Control-与-Expires\" class=\"headerlink\" title=\"强缓存 Cache-Control 与 Expires\"></a>强缓存 Cache-Control 与 Expires</h3><p><strong>Cache-Control（通用首部字段）</strong></p>\n<p>在HTTP&#x2F;1.1中，Cache-Control是最重要的规则，主要用于控制网页缓存，主要取值为：</p>\n<ul>\n<li>public：所有内容都将被缓存（客户端和代理服务器都可缓存）</li>\n<li>private：所有内容只有客户端可以缓存，Cache-Control的默认取值</li>\n<li>no-cache：客户端缓存内容，但是是否使用缓存则需要经过协商缓存来验证决定</li>\n<li>no-store：所有内容都不会被缓存，即不使用强制缓存，也不使用协商缓存</li>\n<li>max-age&#x3D;xxx (xxx is numeric)：缓存内容将在xxx秒后失效</li>\n</ul>\n<p>请求指令</p>\n<img src=\"缓存请求指令.png\"/>\n\n<p>响应指令</p>\n<img src=\"缓存响应指令.png\"/>\n\n<p><strong>Expires（实体首部字段）</strong></p>\n<p>Expires是HTTP&#x2F;1.0控制网页缓存的字段，其值为服务器返回该请求结果缓存的到期时间，即再次发起该请求时，如果客户端的时间小于Expires的值时，直接使用缓存结果。<br>Cache-Control 有指定 max-age 时，优先处理 max-age。</p>\n<img src=\"Expires.png\"/>\n\n<h3 id=\"协商缓存与强缓存\"><a href=\"#协商缓存与强缓存\" class=\"headerlink\" title=\"协商缓存与强缓存\"></a>协商缓存与强缓存</h3><img src=\"640.png\" style=\"zoom: 50%;\" />\n\n<img src=\"浏览器缓存.png\" style=\"zoom:80%;\" />\n\n\n\n<h2 id=\"4-HTTP方法，状态码\"><a href=\"#4-HTTP方法，状态码\" class=\"headerlink\" title=\"4 HTTP方法，状态码\"></a>4 HTTP方法，状态码</h2><img src=\"http方法.bmp\"/>\n\n<img src=\"http状态码.bmp\"/>\n\n<hr>\n<h2 id=\"5-HTTP和HTTPS\"><a href=\"#5-HTTP和HTTPS\" class=\"headerlink\" title=\"5 HTTP和HTTPS\"></a>5 HTTP和HTTPS</h2><p><a href=\"https://www.runoob.com/w3cnote/http-vs-https.html\">HTTP 与 HTTPS 的区别</a></p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html\">SSL&#x2F;TLS协议运行机制的概述</a></p>\n<p><a href=\"https://www.zhihu.com/tardis/zm/art/72616216?source_id=1003\">十分钟搞懂HTTP和HTTPS协议</a></p>\n<p>http缺点：</p>\n<ul>\n<li>窃听风险</li>\n<li>冒充风险（需要第三方颁发证书）</li>\n<li>篡改风险</li>\n</ul>\n<p><font color='orange'>HTTP+加密+证书+校验机制&#x3D;HTTPS</font></p>\n<p>HTTPS并不是新协议，只是HTTP通信接口部分用SSL&#x2F;TLS协议代替。HTTP先和SSL通信，再由SSL和TCP通信。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-number\">1994</span><span class=\"hljs-string\">年，NetScape公司设计了SSL协议（Secure</span> <span class=\"hljs-string\">Sockets</span> <span class=\"hljs-string\">Layer）的1.0版，但是未发布。</span><br><span class=\"hljs-number\">1995</span><span class=\"hljs-string\">年，NetScape公司发布SSL</span> <span class=\"hljs-number\">2.0</span><span class=\"hljs-string\">版，很快发现有严重漏洞。</span><br><span class=\"hljs-number\">1996</span><span class=\"hljs-string\">年，SSL</span> <span class=\"hljs-number\">3.0</span><span class=\"hljs-string\">版问世，得到大规模应用。</span><br><span class=\"hljs-number\">1999</span><span class=\"hljs-string\">年，互联网标准化组织ISOC接替NetScape公司，发布了SSL的升级版TLS</span> <span class=\"hljs-number\">1.0</span><span class=\"hljs-string\">版。</span><br><span class=\"hljs-number\">2006</span><span class=\"hljs-string\">年和2008年，TLS进行了两次升级，分别为TLS</span> <span class=\"hljs-number\">1.1</span><span class=\"hljs-string\">版和TLS</span> <span class=\"hljs-number\">1.2</span><span class=\"hljs-string\">版。最新的变动是2011年TLS</span> <span class=\"hljs-number\">1.2</span><span class=\"hljs-string\">的修订版。</span><br><br><span class=\"hljs-string\">目前，应用最广泛的是TLS</span> <span class=\"hljs-number\">1.0</span><span class=\"hljs-string\">，接下来是SSL</span> <span class=\"hljs-number\">3.0</span><span class=\"hljs-string\">。但是，主流浏览器都已经实现了TLS</span> <span class=\"hljs-number\">1.2</span><span class=\"hljs-string\">的支持。</span><br><span class=\"hljs-string\">TLS</span> <span class=\"hljs-number\">1.0</span><span class=\"hljs-string\">通常被标示为SSL</span> <span class=\"hljs-number\">3.1</span><span class=\"hljs-string\">，TLS</span> <span class=\"hljs-number\">1.1</span><span class=\"hljs-string\">为SSL</span> <span class=\"hljs-number\">3.2</span><span class=\"hljs-string\">，TLS</span> <span class=\"hljs-number\">1.2</span><span class=\"hljs-string\">为SSL</span> <span class=\"hljs-number\">3.3</span><span class=\"hljs-string\">。</span><br></code></pre></td></tr></table></figure>\n\n<img src=\"https.jpg\" style=\"zoom:67%;\" />\n\n<p>SSL&#x2F;TLS协议的基本过程是这样的：</p>\n<ol>\n<li>客户端向服务器端索要并验证公钥。</li>\n<li>双方协商生成”对话密钥”。</li>\n<li>双方采用”对话密钥”进行加密通信（普通HTTP，但用 “会话秘钥” 加密）。</li>\n</ol>\n<img src=\"https-intro.png\" style=\"zoom: 80%;\" />\n\n<hr>\n<h2 id=\"6-HTTP追加\"><a href=\"#6-HTTP追加\" class=\"headerlink\" title=\"6 HTTP追加\"></a>6 HTTP追加</h2><h3 id=\"SPDY\"><a href=\"#SPDY\" class=\"headerlink\" title=\"SPDY\"></a>SPDY</h3><ul>\n<li>多路复用（一个TCP连接多个HTTP请求）</li>\n<li>赋予请求优先级</li>\n<li>压缩HTTP首部</li>\n<li>支付服务器向客户端推送</li>\n</ul>\n<h3 id=\"WebSocket\"><a href=\"#WebSocket\" class=\"headerlink\" title=\"WebSocket\"></a>WebSocket</h3><h3 id=\"HTTP-2-0\"><a href=\"#HTTP-2-0\" class=\"headerlink\" title=\"HTTP  2.0\"></a>HTTP  2.0</h3><p>主要特性同SPDY</p>\n<hr>\n<h2 id=\"7-WEB攻击\"><a href=\"#7-WEB攻击\" class=\"headerlink\" title=\"7 WEB攻击\"></a>7 WEB攻击</h2><p>见PDF</p>\n<hr>\n<h2 id=\"8-TCP-IP协议分层管理\"><a href=\"#8-TCP-IP协议分层管理\" class=\"headerlink\" title=\"8 TCP&#x2F;IP协议分层管理\"></a>8 TCP&#x2F;IP协议分层管理</h2><p>应用层：向用户提供应用服务时通信的活动。HTTP,DNS,FTP</p>\n<p>传输层：提供处于网络连接中的两台计算机之间的数据传输。TCP，UDP</p>\n<p>网络层：网络层用来处理在网络上流动的数据包。IP</p>\n<p>网络接口层：对实际的网络媒体的管理。设备驱动，网络接口卡</p>\n<hr>\n<h2 id=\"9-Get-Post-区别\"><a href=\"#9-Get-Post-区别\" class=\"headerlink\" title=\"9 Get Post 区别\"></a>9 Get Post 区别</h2><ul>\n<li>请求参数：GET请求参数是通过URL传递的，多个参数以&amp;连接，POST请求放在request body中。</li>\n<li>请求缓存：GET请求会被缓存，而POST请求不会，除非手动设置。</li>\n<li>收藏为书签：GET请求支持，POST请求不支持。</li>\n<li>安全性：POST比GET安全，GET请求在浏览器回退时是无害的，而POST会再次请求。</li>\n<li>历史记录：GET请求参数会被完整保留在浏览历史记录里，而POST中的参数不会被保留。</li>\n<li>编码方式：GET请求只能进行url编码，而POST支持多种编码方式。</li>\n<li>对参数的数据类型：GET只接受ASCII字符，而POST没有限制。</li>\n</ul>\n<hr>\n<h2 id=\"10-web服务器及其组成\"><a href=\"#10-web服务器及其组成\" class=\"headerlink\" title=\"10 web服务器及其组成\"></a>10 web服务器及其组成</h2><ul>\n<li>Apache</li>\n<li>IIS</li>\n<li>Nginx</li>\n</ul>\n<p>webserver 基本由这些组成:</p>\n<ul>\n<li>绑定TCP端口，监听客户端（浏览器）请求</li>\n<li>处理客户端（浏览器）请求</li>\n<li>响应客户端（浏览器）请求</li>\n</ul>\n<hr>\n<h2 id=\"11-TCP和UDP区别\"><a href=\"#11-TCP和UDP区别\" class=\"headerlink\" title=\"11 TCP和UDP区别\"></a>11 TCP和UDP区别</h2><ol>\n<li>TCP是面向连接的，udp是无连接的即发送数据前不需要先建立链接。</li>\n<li>TCP提供可靠的服务。也就是说，通过TCP连接传送的数据，无差错，不丢失，不重复，且按序到达;UDP尽最大努力交付，即不保证可靠交付。 </li>\n<li>TCP是面向字节流，UDP面向报文。</li>\n<li>TCP只能是1对1的，UDP支持1对1,1对多。</li>\n<li>TCP的首部较大为20字节，而UDP只有8字节。</li>\n</ol>\n<img src=\"tcp udp的应用.png\" style=\"zoom: 67%;\" />\n\n<hr>\n<h2 id=\"12-cookie-session-sessionStorage-localStorage\"><a href=\"#12-cookie-session-sessionStorage-localStorage\" class=\"headerlink\" title=\"12 cookie session sessionStorage localStorage\"></a>12 cookie session sessionStorage localStorage</h2><h3 id=\"cookie\"><a href=\"#cookie\" class=\"headerlink\" title=\"cookie\"></a>cookie</h3><p>HTTP Cookie 是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。通常，它用于告知服务端两个请求是否来自同一浏览器，如保持用户的登录状态。Cookie 使基于无状态的 HTTP 协议记录稳定的状态信息成为了可能。</p>\n<p>Cookie 主要用于以下三个方面：</p>\n<p>会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息）<br>个性化设置（如用户自定义设置、主题等）<br>浏览器行为跟踪（如跟踪分析用户行为等）</p>\n<h3 id=\"session\"><a href=\"#session\" class=\"headerlink\" title=\"session\"></a>session</h3><p>Session 代表着服务器和客户端一次会话的过程。Session 对象存储特定用户会话所需的属性及配置信息。这样，当用户在应用程序的 Web 页之间跳转时，存储在 Session 对象中的变量将不会丢失，而是在整个用户会话中一直存在下去。当客户端关闭会话，或者 Session 超时失效时会话结束。</p>\n<h3 id=\"cookie-session-区别联系\"><a href=\"#cookie-session-区别联系\" class=\"headerlink\" title=\"cookie session 区别联系\"></a>cookie session 区别联系</h3><p>关系：</p>\n<p>用户第一次请求服务器的时候，服务器根据用户提交的相关信息，创建创建对应的 Session ，请求返回时将此 Session 的唯一标识信息 SessionID 返回给浏览器，浏览器接收到服务器返回的 SessionID 信息后，会将此信息存入到 Cookie 中，同时 Cookie 记录此 SessionID 属于哪个域名。</p>\n<p>当用户第二次访问服务器的时候，请求会自动判断此域名下是否存在 Cookie 信息，如果存在自动将 Cookie 信息也发送给服务端，服务端会从 Cookie 中获取 SessionID，再根据 SessionID 查找对应的 Session 信息，如果没有找到说明用户没有登录或者登录失效，如果找到 Session 证明用户已经登录可执行后面操作。</p>\n<p>根据以上流程可知，SessionID 是连接 Cookie 和 Session 的一道桥梁，大部分系统也是根据此原理来验证用户登录状态</p>\n<img src=\"cookie session.jpg\" style=\"zoom:150%;\" />\n\n<p>区别：</p>\n<ul>\n<li>作用范围不同，Cookie 保存在客户端（浏览器），Session 保存在服务器端。</li>\n<li>存取方式的不同，Cookie 只能保存 ASCII，Session 可以存任意数据类型，一般情况下我们可以在 Session 中保持一些常用变量信息，比如说 UserId 等。</li>\n<li>有效期不同，Cookie 可设置为长时间保持，比如我们经常使用的默认登录功能，Session 一般失效时间较短，客户端关闭或者 Session 超时都会失效。</li>\n<li>隐私策略不同，Cookie 存储在客户端，比较容易遭到不法获取；Session 存储在服务端，安全性相对 Cookie 要好一些。</li>\n<li>存储大小不同， 单个 Cookie 保存的数据不能超过 4K，Session 可存储数据远高于 Cookie。</li>\n</ul>\n<h3 id=\"localStorage和sessionStorage\"><a href=\"#localStorage和sessionStorage\" class=\"headerlink\" title=\"localStorage和sessionStorage\"></a>localStorage和sessionStorage</h3><p>本地5MB存储，与HTTP无关，不与服务器通信，采取同源策略</p>\n<p>localStorage生命周期是永久的，除非被清除。sessionStorage尽在当前会话有效，关闭页面或浏览器后数据消失</p>\n<hr>\n<h2 id=\"13-TCP三次握手四次挥手\"><a href=\"#13-TCP三次握手四次挥手\" class=\"headerlink\" title=\"13 TCP三次握手四次挥手\"></a>13 TCP三次握手四次挥手</h2><figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">3</span>次握手：<span class=\"hljs-number\">1</span>、听得到吗？<span class=\"hljs-number\">2</span>、听得到，你呢？<span class=\"hljs-number\">3</span>、我也听到了。开始对话 <br><span class=\"hljs-attribute\">4</span>次挥手：<span class=\"hljs-number\">1</span>、老师，下课了。<span class=\"hljs-number\">2</span>、好，我知道了，我说完这点。<span class=\"hljs-number\">3</span>、好了，说完了，下课吧。<span class=\"hljs-number\">4</span>、谢谢老师，老师再见<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"TCP三次握手\"><a href=\"#TCP三次握手\" class=\"headerlink\" title=\"TCP三次握手\"></a>TCP三次握手</h3><ol>\n<li><p>第一次握手：TCP客户进程向服务器发出连接请求报文，报文首部中的同步位SYN&#x3D;1，同时选择一个初始序列号 seq&#x3D;x ，此时，TCP客户端进程进入了 SYN-SENT（同步已发送状态）状态</p>\n</li>\n<li><p>第二次握手：TCP服务器发出确认报文。确认报文中应该 ACK&#x3D;1，SYN&#x3D;1，确认号是ack&#x3D;x+1，同时也要为自己初始化一个序列号 seq&#x3D;y，此时，TCP服务器进程进入了SYN-RCVD（同步收到）状态</p>\n</li>\n<li><p>第三次握手：TCP客户进程收到确认后，还要向服务器给出确认。确认报文的ACK&#x3D;1，ack&#x3D;y+1，自己的序列号seq&#x3D;x+1。服务器收到并确认，Client和Server进入ESTABLISHED状态，完成三次握手，随后Client和Server就可以开始传输数据。</p>\n<p><font color='red'>三次握手原因</font>:一句话，主要防止已经失效的连接请求报文突然又传送到了服务器，从而产生错误。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs\">如果使用的是两次握手建立连接，假设有这样一种场景，客户端发送了第一个请求连接并且没有丢失，只是因为在网络结点中滞留的时间太长了，由于TCP的客户端迟迟没有收到确认报文，以为服务器没有收到，此时重新向服务器发送这条报文，此后客户端和服务器经过两次握手完成连接，传输数据，然后关闭连接。此时此前滞留的那一次请求连接，网络通畅了到达了服务器，这个报文本该是失效的，但是，两次握手的机制将会让客户端和服务器再次建立连接，这将导致不必要的错误和资源的浪费。<br><br>如果采用的是三次握手，就算是那一次失效的报文传送过来了，服务端接受到了那条失效报文并且回复了确认报文，但是客户端不会再次发出确认。由于服务器收不到确认，就知道客户端并没有请求连接。<br></code></pre></td></tr></table></figure></li>\n</ol>\n<img src=\"tcp三次握手.jpg\" style=\"zoom: 67%;\" />\n\n<h3 id=\"四次挥手\"><a href=\"#四次挥手\" class=\"headerlink\" title=\"四次挥手\"></a>四次挥手</h3><ol>\n<li>客户端进程发出连接释放报文，并且停止发送数据。FIN&#x3D;1，其序列号为seq&#x3D;u，客户端进入FIN-WAIT-1（终止等待1）状态</li>\n<li>服务器收到连接释放报文，发出确认报文，ACK&#x3D;1，ack&#x3D;u+1，并且带上自己的序列号seq&#x3D;v，此时，服务端就进入了CLOSE-WAIT（关闭等待）状态，客户端收到确认后，进入FIN-WAIT-2（终止等待2）状态</li>\n<li>服务器将最后的数据发送完毕后，就向客户端发送连接释放报文，FIN&#x3D;1，ack&#x3D;u+1，假定此时的序列号为seq&#x3D;w，此时，服务器就进入了LAST-ACK（最后确认）状态，等待客户端的确认</li>\n<li>客户端收到服务器的连接释放报文后，必须发出确认，ACK&#x3D;1，ack&#x3D;w+1，而自己的序列号是seq&#x3D;u+1，此时，客户端就进入了TIME-WAIT（时间等待）状态</li>\n<li>服务器只要收到了客户端发出的确认，立即进入CLOSED状态，客户端最后还要等待2MSL</li>\n</ol>\n<img src=\"tcp四次挥手.png\" style=\"zoom:67%;\" />\n\n<p><font color='orangeRed'>为什么客户端最后还要等待2MSL？</font></p>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs x86asm\">MSL（Maximum <span class=\"hljs-meta\">Segment</span> Lifetime），TCP允许不同的实现可以设置不同的MSL值。<br><br>第一，保证客户端发送的最后一个ACK报文能够到达服务器，因为这个ACK报文可能丢失，服务器会重传FIN+ACK报文，而客户端就能在这个2MSL时间段内收到这个重传的报文，接着给出回应报文，并且会重启2MSL计时器。<br><br>第二，防止类似与“三次握手”中提到了的“已经失效的连接请求报文段”出现在本连接中。客户端发送完最后一个确认报文后，在这个2MSL时间中，就可以使本连接持续的时间内所产生的所有报文段都从网络中消失。这样新的连接中不会出现旧连接的请求报文。<br><br></code></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"React\"><a href=\"#React\" class=\"headerlink\" title=\"React\"></a>React</h1><h2 id=\"1-特点\"><a href=\"#1-特点\" class=\"headerlink\" title=\"1 特点\"></a>1 特点</h2><ol>\n<li>声明式设计。采用声明规范，用ReactDOM.render()来声明</li>\n<li>高效：虚拟DOM。</li>\n<li>灵活：可以与已知的框架或库很好的配合。</li>\n<li>JSX语法。</li>\n<li>组件：构建组件，使代码更容易得到复用，能够很好地应用在大项目的开发中。</li>\n<li>单向响应的数据流：组件不会改变props。它们只会监听props的变化，当props发生变化时它们会使用接收到的新值，而不是去修改已有的值。</li>\n</ol>\n<hr>\n<h2 id=\"2-虚拟DOM-DIFF算法\"><a href=\"#2-虚拟DOM-DIFF算法\" class=\"headerlink\" title=\"2 虚拟DOM DIFF算法\"></a>2 虚拟DOM DIFF算法</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;text&quot;</span>&gt;</span>hello world!!!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">&#123;<br>  <span class=\"hljs-attr\">tag</span>: <span class=\"hljs-string\">&#x27;div&#x27;</span>,<br>  <span class=\"hljs-attr\">props</span>: &#123;<br>    <span class=\"hljs-attr\">id</span>: <span class=\"hljs-string\">&#x27;app&#x27;</span><br>  &#125;,<br>  <span class=\"hljs-attr\">chidren</span>: [<br>    &#123;<br>      <span class=\"hljs-attr\">tag</span>: <span class=\"hljs-string\">&#x27;p&#x27;</span>,<br>      <span class=\"hljs-attr\">props</span>: &#123;<br>        <span class=\"hljs-attr\">className</span>: <span class=\"hljs-string\">&#x27;text&#x27;</span><br>      &#125;,<br>      <span class=\"hljs-attr\">chidren</span>: [<br>        <span class=\"hljs-string\">&#x27;hello world!!!&#x27;</span><br>      ]<br>    &#125;<br>  ]<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<p>虚拟DOM就是一个JS对象，DOM操作很耗性能，比较JS对象节约了性能。</p>\n<p>react中减少了真实DOM的创建，对比。取而代之操作JS对象，实现了性能飞跃</p>\n<p>JSX  &#x3D;&gt; createElement &#x3D;&gt; JS对象（虚拟DOM） &#x3D;&gt; render &#x3D;&gt; 真实DOM</p>\n<p><a href=\"https://hustyichi.github.io/2020/09/16/vdom/\">DIFF算法</a></p>\n<hr>\n<h2 id=\"3-生命周期\"><a href=\"#3-生命周期\" class=\"headerlink\" title=\"3 生命周期\"></a>3 生命周期</h2><img src=\"生命周期.webp\"  />\n\n<img src=\"生命周期2.bmp\" style=\"zoom:80%;\" />\n\n<hr>\n<h2 id=\"4-vue-react-异同\"><a href=\"#4-vue-react-异同\" class=\"headerlink\" title=\"4 vue react 异同\"></a>4 vue react 异同</h2><h3 id=\"相同点\"><a href=\"#相同点\" class=\"headerlink\" title=\"相同点\"></a>相同点</h3><ol>\n<li>都使用虚拟DOM</li>\n<li>组件化思想</li>\n<li>专注于核心库，路由、全局状态管理则由配套库进行处理。</li>\n</ol>\n<h3 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h3><p><a href=\"https://juejin.cn/post/6844903668446134286\">Vue和React区别</a></p>\n<hr>\n<h2 id=\"5-受控组件与非受控组件\"><a href=\"#5-受控组件与非受控组件\" class=\"headerlink\" title=\"5 受控组件与非受控组件\"></a>5 受控组件与非受控组件</h2><h3 id=\"受控组件\"><a href=\"#受控组件\" class=\"headerlink\" title=\"受控组件\"></a>受控组件</h3><p>使 React 的 state 成为“唯一数据源”。渲染表单的 React 组件还控制着用户输入过程中表单发生的操作。被 React 以这种方式控制取值的表单输入元素就叫做“受控组件”。(用value和onChange控制输入元素)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">NameForm</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span> &#123;<br>  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">props</span>) &#123;<br>    <span class=\"hljs-variable language_\">super</span>(props);<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span> = &#123;<span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>&#125;;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">handleChange</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">handleChange</span>.<span class=\"hljs-title function_\">bind</span>(<span class=\"hljs-variable language_\">this</span>);<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">handleSubmit</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">handleSubmit</span>.<span class=\"hljs-title function_\">bind</span>(<span class=\"hljs-variable language_\">this</span>);<br>  &#125;<br><br>  <span class=\"hljs-title function_\">handleChange</span>(<span class=\"hljs-params\">event</span>) &#123;    <br>      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">setState</span>(&#123;<br>          <span class=\"hljs-attr\">value</span>: event.<span class=\"hljs-property\">target</span>.<span class=\"hljs-property\">value</span><br>      &#125;);  <br>  &#125;<br>  <span class=\"hljs-title function_\">handleSubmit</span>(<span class=\"hljs-params\">event</span>) &#123;<br>    <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">&#x27;提交的名字: &#x27;</span> + <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span>.<span class=\"hljs-property\">value</span>);<br>    event.<span class=\"hljs-title function_\">preventDefault</span>();<br>  &#125;<br><br>  <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-keyword\">return</span> (<br>      <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">onSubmit</span>=<span class=\"hljs-string\">&#123;this.handleSubmit&#125;</span>&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span>&gt;</span></span><br><span class=\"language-xml\">          名字:</span><br><span class=\"language-xml\">          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&#123;this.state.value&#125;</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">&#123;this.handleChange&#125;</span> /&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;submit&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;提交&quot;</span> /&gt;</span></span><br><span class=\"language-xml\">      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"非受控组件\"><a href=\"#非受控组件\" class=\"headerlink\" title=\"非受控组件\"></a>非受控组件</h3><p>使用非受控组件，这时表单数据将交由 DOM 节点来处理。不必为每个状态更新都编写数据处理函数，使用 ref 来从 DOM 节点中获取表单数据。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">NameForm</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span> &#123;<br>  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">props</span>) &#123;<br>    <span class=\"hljs-variable language_\">super</span>(props);<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">handleSubmit</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">handleSubmit</span>.<span class=\"hljs-title function_\">bind</span>(<span class=\"hljs-variable language_\">this</span>);<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">input</span> = <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-title function_\">createRef</span>();  &#125;<br><br>  <span class=\"hljs-title function_\">handleSubmit</span>(<span class=\"hljs-params\">event</span>) &#123;<br>    <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">&#x27;A name was submitted: &#x27;</span> + <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">input</span>.<span class=\"hljs-property\">current</span>.<span class=\"hljs-property\">value</span>);<br>    event.<span class=\"hljs-title function_\">preventDefault</span>();<br>  &#125;<br><br>  <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-keyword\">return</span> (<br>      <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">onSubmit</span>=<span class=\"hljs-string\">&#123;this.handleSubmit&#125;</span>&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span>&gt;</span></span><br><span class=\"language-xml\">          Name:</span><br><span class=\"language-xml\">          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&#123;this.input&#125;</span> /&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;submit&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;Submit&quot;</span> /&gt;</span></span><br><span class=\"language-xml\">      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"6-高阶组件\"><a href=\"#6-高阶组件\" class=\"headerlink\" title=\"6 高阶组件\"></a>6 高阶组件</h2><p><a href=\"https://segmentfault.com/a/1190000019153177\">HOC</a></p>\n<hr>\n<h2 id=\"7-Flux架构模式\"><a href=\"#7-Flux架构模式\" class=\"headerlink\" title=\"7 Flux架构模式\"></a>7 Flux架构模式</h2><h3 id=\"MVC\"><a href=\"#MVC\" class=\"headerlink\" title=\"MVC\"></a>MVC</h3><ol>\n<li>Model负责管理数据，大部分业务逻辑放在Model中</li>\n<li>View负责渲染用户界面，传送指令到 Controller</li>\n<li>Controller负责接收用户输入，根据用户输入调用对应的Model部分逻辑，把产生的数据结果交给View，让View渲染</li>\n</ol>\n<img src=\"mvc_model.png\" style=\"zoom:67%;\" />\n\n<p><font color='orangered'>缺点：实际开发中，总是允许View和Model直接通信，造成混乱的数据流</font></p>\n<img src=\"mvc_q.png\" style=\"zoom:50%;\" />\n\n<h3 id=\"MVVM\"><a href=\"#MVVM\" class=\"headerlink\" title=\"MVVM\"></a>MVVM</h3><p>MVVM是Model-View-ViewModel的简写。它本质上就是MVC 的改进版。MVVM 就是将其中的<code>View</code> 的状态和行为抽象化，让我们将视图 UI 和业务逻辑分开。，它可以取出 <code>Model</code> 的数据同时帮忙处理 <code>View</code> 中由于需要展示内容而涉及的业务逻辑。</p>\n<ol>\n<li>Model：代表的是模型、数据，可以在 Model 层中定义数据修改和操作的业务逻辑。</li>\n<li>View：代表的是视图，模版。它用来显示数据。</li>\n<li>ViewModel：MVVM模式的核心，它是连接view和model的桥梁。它有两个方向：<ol>\n<li>将<code>Model</code>转化成<code>View</code>，即将后端传递的数据转化成所看到的页面。实现的方式是：数据绑定。</li>\n<li>将<code>View</code>转化成<code>Model</code>，即将所看到的页面转化成后端的数据。实现的方式是：DOM 事件监听。</li>\n</ol>\n</li>\n</ol>\n<img src=\"mvvm_model.png\" style=\"zoom: 80%;\" />\n\n<p><font color='orange'>总结：</font><br>在MVVM的框架下视图View和模型Model是不能直接通信的。它们通过ViewModel来通信。<br>ViewModel通常要实现一个observer观察者，当数据发生变化，ViewModel能够监听到数据的这种变化，然后通知到对应的视图做自动更新。<br>而当用户操作视图，ViewModel也能监听到视图的变化，然后通知数据做改动。</p>\n<p><font color='red'>这称之为数据的双向绑定</font>。并且MVVM中的View 和 ViewModel可以互相通信</p>\n<p>缺点：</p>\n<ol>\n<li>数据绑定也使得bug很难被调试。比如页面异常了，有可能是View的代码有bug，也可能是model的代码有问题。数据绑定使得一个位置的Bug被快速传递到别的位置，要定位原始出问题的地方就变得不那么容易了。</li>\n<li>数据双向绑定不利于代码重用。客户端开发最常用的是View，但是数据双向绑定技术，让一个View都绑定了一个model，不同的模块model都不同。那就不能简单重用view了</li>\n<li>一个大的模块中，model也会很大，虽然使用方便了也很容易保证数据的一致性，但是长期持有，不释放内存就造成话费更多的内存</li>\n</ol>\n<h3 id=\"Flux\"><a href=\"#Flux\" class=\"headerlink\" title=\"Flux\"></a>Flux</h3><p><font color='orange'>Flux的核心思想就是数据和逻辑永远单向流动</font></p>\n<img src=\"flux.png\" style=\"zoom:80%;\" />\n\n<p>MVC最大的问题就是无法禁绝View和Model之间的直接对话。在Flux中，Store只有getter,没有setter，不可能直接修改Store内部状态，只能派发一个action对象给Dispatcher</p>\n<p>不足：</p>\n<ol>\n<li>store之间有依赖关系</li>\n<li>难以进行服务端渲染</li>\n<li>store混杂了逻辑和状态</li>\n</ol>\n<hr>\n<h2 id=\"8-Redux\"><a href=\"#8-Redux\" class=\"headerlink\" title=\"8 Redux\"></a>8 Redux</h2><h3 id=\"设计理念\"><a href=\"#设计理念\" class=\"headerlink\" title=\"设计理念\"></a>设计理念</h3><p>Web 应用就是状态与 UI 一一对应的关系，Redux 就是我们 Web 应用的一个状态管理方案。<br>单纯的从架构层面而言，UI 与状态完全分离，并且单向的数据流确保了状态可控。</p>\n<ul>\n<li>每一个 <code>State</code> 的变化可预测</li>\n<li>动作和状态统一管理</li>\n</ul>\n<h3 id=\"基本原则\"><a href=\"#基本原则\" class=\"headerlink\" title=\"基本原则\"></a>基本原则</h3><ol>\n<li><p>唯一数据源：应用的状态数据只存储在一个Store中</p>\n</li>\n<li><p>状态只读：修改状态必须通过派发action</p>\n</li>\n<li><p>数据改变只能通过纯函数完成：Reducer 就是纯函数，它接受当前的 state 和 action。然后返回一个新的 state。所以这里，state 不会更新，只会替换。</p>\n<p>保持 reducer 纯净非常重要。<strong>永远不要</strong>在 reducer 里做这些操作：</p>\n<ul>\n<li>修改传入参数；</li>\n<li>执行有副作用的操作，如 API 请求和路由跳转；</li>\n<li>调用非纯函数，如 <code>Date.now()</code> 或 <code>Math.random()</code>。</li>\n</ul>\n<p>reducer 一定要保持纯净。<strong>只要传入参数相同，返回计算得到的下一个 state 就一定相同。没有特殊情况、没有副作用，没有 API 请求、没有变量修改，单纯执行计算。</strong></p>\n</li>\n</ol>\n<hr>\n<h2 id=\"9-PureComponent-与-shouldComponentUpdate\"><a href=\"#9-PureComponent-与-shouldComponentUpdate\" class=\"headerlink\" title=\"9 PureComponent 与 shouldComponentUpdate\"></a>9 PureComponent 与 shouldComponentUpdate</h2><p>如果一个组件只和props和state有关系，给定相同的props和state就会渲染相同的结果，那么这个组件就叫作<strong>纯组件</strong>。</p>\n<p>普通组件可以通过在shouldComponentUpdate中对比决定是否更新，节约性能。</p>\n<p>PureComponent 实现了shouldComponentUpdate，对props和state的“浅比较”，组件会自动判断是否重新渲染。</p>\n<hr>\n<h2 id=\"10-React-Fiber\"><a href=\"#10-React-Fiber\" class=\"headerlink\" title=\"10 React Fiber\"></a>10 React Fiber</h2><p><a href=\"https://juejin.cn/post/6844904193958887431#heading-8\">由浅入深React的Fiber架构</a><br><a href=\"https://segmentfault.com/a/1190000022995622\">手写React的Fiber架构，深入理解其原理</a></p>\n<p>React的diff算法是同步的，如果有大量深度嵌套节点需要更新，React diff递归对比vDom，JS线程的运行时间会比较长，阻塞浏览器响应。</p>\n<ul>\n<li><p>Fiber是一个执行单元</p>\n<p>Fiber可以将长时间的同步任务<font color='orange'>拆分成多个小任务</font>，从而让浏览器能够抽身去响应其他事件，等进程空了再回来继续计算，使用 requestIdleCallback</p>\n<img src=\"react fiber 1.webp\" style=\"zoom:50%;\" />\n</li>\n<li><p>Fiber也是一种数据结构</p>\n<p><font color='orange'>可以随时中断</font>，下次进来可以接着执行。Fiber改造了树结构，加上了指向父节点和兄弟节点的指针，变为一个链表</p>\n<ol>\n<li><strong>child</strong>: 父节点指向<strong>第一个子元素</strong>的指针。</li>\n<li><strong>sibling</strong>：从第一个子元素往后，指向下一个兄弟元素。</li>\n<li><strong>return</strong>：所有子元素都有的指向父元素的指针。</li>\n</ol>\n<p>有了这几个指针后，可以在任意一个元素中断遍历并恢复。</p>\n<img src=\"react fiber 2.webp\"  /></li>\n</ul>\n<hr>\n<h2 id=\"11-React-Hooks的作用及原理\"><a href=\"#11-React-Hooks的作用及原理\" class=\"headerlink\" title=\"11 React Hooks的作用及原理\"></a>11 React Hooks的作用及原理</h2><p><a href=\"https://segmentfault.com/a/1190000021057476\">五分钟带你了解 React Hooks 工作原理</a></p>\n<p><a href=\"https://juejin.cn/post/6844903975838285838\">一文彻底搞懂react hooks的原理和实现</a></p>\n<p>Hook 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性</p>\n<ol>\n<li>useState 是基于 Array+Cursor 来实现。当调用 useState 的时候，传入一个state值，返回形如 <code>(变量, 函数)</code> 的一个元祖，自动调用<code>render</code>方法来触发视图更新<ul>\n<li>第一次渲染时候，根据 useState 顺序，逐个声明 state 并且将其放入全局 Array 中。每次声明 state，都要将 cursor 增加 1。</li>\n<li>更新 state，触发再次渲染的时候。<strong>cursor 被重置为 0</strong>。按照 useState 的声明顺序，依次拿出最新的 state 的值，视图更新</li>\n</ul>\n</li>\n<li>useEffect 可以让你在函数组件中执行副作用操作，数据获取，设置订阅以及手动更改 React 组件中的 DOM 都属于副作用，<strong>useEffect 能根据需要，避免多余的 render</strong></li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">let</span> memoizedState = []; <span class=\"hljs-comment\">// hooks 存放在这个数组</span><br><span class=\"hljs-keyword\">let</span> cursor = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// 当前 memoizedState 下标</span><br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-params\">initialValue</span>) &#123;<br>  memoizedState[cursor] = memoizedState[cursor] || initialValue;<br>  <span class=\"hljs-keyword\">const</span> currentCursor = cursor;<br>  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">setState</span>(<span class=\"hljs-params\">newState</span>) &#123;<br>    memoizedState[currentCursor] = newState;<br>    <span class=\"hljs-title function_\">render</span>();<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> [memoizedState[cursor++], setState]; <span class=\"hljs-comment\">// 返回当前 state，并把 cursor 加 1</span><br>&#125;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-params\">callback, depArray</span>) &#123;<br>  <span class=\"hljs-keyword\">const</span> hasNoDeps = !depArray;<br>  <span class=\"hljs-keyword\">const</span> deps = memoizedState[cursor];<br>  <span class=\"hljs-keyword\">const</span> hasChangedDeps = deps<br>    ? !depArray.<span class=\"hljs-title function_\">every</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">el, i</span>) =&gt;</span> el === deps[i])<br>    : <span class=\"hljs-literal\">true</span>;<br>  <br>  <span class=\"hljs-keyword\">if</span> (hasNoDeps || hasChangedDeps) &#123;<br>    <span class=\"hljs-title function_\">callback</span>();<br>    memoizedState[cursor] = depArray;<br>  &#125;<br>  <br>  cursor++;<br>&#125;<br><span class=\"hljs-number\">10.31</span> test git<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"计算机基础\"><a href=\"#计算机基础\" class=\"headerlink\" title=\"计算机基础\"></a>计算机基础</h1><h2 id=\"1-进程和线程\"><a href=\"#1-进程和线程\" class=\"headerlink\" title=\"1 进程和线程\"></a>1 进程和线程</h2><p>进程：指在系统中运行的一个应用程序，<font color='red'>是系统进行资源分配和调度的基本单位</font>。每个进程都有自己的独立内存空间.</p>\n<p>线程：是进程的子任务，进程之内独立执行的一个单元执行流，<font color='red'>是CPU调度和分派的基本单位</font>。</p>\n<p><a href=\"https://juejin.cn/post/6844903801321685000\">一篇让你明白进程与线程之间的区别与联系</a></p>\n<p><a href=\"https://www.cnblogs.com/fanguangdexiaoyuer/p/10834737.html#_label5\">进程间通信和线程间通信的几种方式</a></p>\n<hr>\n<h1 id=\"TypeScript笔记\"><a href=\"#TypeScript笔记\" class=\"headerlink\" title=\"TypeScript笔记\"></a>TypeScript笔记</h1><p><strong>声明语句中只能定义类型，切勿在声明语句中定义具体的实现</strong></p>\n<h2 id=\"什么是声明文件\"><a href=\"#什么是声明文件\" class=\"headerlink\" title=\"什么是声明文件\"></a>什么是声明文件</h2><p>通常我们会把声明语句放到一个单独的文件（<code>jQuery.d.ts</code>）中，这就是声明文件。声明文件必需以 <code>.d.ts</code> 为后缀</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">// src/jQuery.d.ts</span><br><span class=\"hljs-keyword\">declare</span> <span class=\"hljs-keyword\">var</span> <span class=\"hljs-attr\">jQuery</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">selector: <span class=\"hljs-built_in\">string</span></span>) =&gt;</span> <span class=\"hljs-built_in\">any</span>;<br><br><span class=\"hljs-comment\">// src/index.ts</span><br><span class=\"hljs-title function_\">jQuery</span>(<span class=\"hljs-string\">&#x27;#foo&#x27;</span>);<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"书写声明文件\"><a href=\"#书写声明文件\" class=\"headerlink\" title=\"书写声明文件\"></a>书写声明文件</h2><h3 id=\"全局变量\"><a href=\"#全局变量\" class=\"headerlink\" title=\"全局变量\"></a>全局变量</h3><p>全局变量的声明文件主要有以下几种语法（<font color=\"red\"><strong>就是使用declare声明类型</strong></font>）：</p>\n<ul>\n<li><a href=\"https://ts.xcatliu.com/basics/declaration-files.html#declare-var\"><code>declare var/let/const</code></a> 声明全局变量</li>\n<li><a href=\"https://ts.xcatliu.com/basics/declaration-files.html#declare-function\"><code>declare function</code></a> 声明全局方法</li>\n<li><a href=\"https://ts.xcatliu.com/basics/declaration-files.html#declare-class\"><code>declare class</code></a> 声明全局类</li>\n<li><a href=\"https://ts.xcatliu.com/basics/declaration-files.html#declare-enum\"><code>declare enum</code></a> 声明全局枚举类型</li>\n<li><a href=\"https://ts.xcatliu.com/basics/declaration-files.html#declare-namespace\"><code>declare namespace</code></a> 声明（含有子属性的）全局对象</li>\n<li><a href=\"https://ts.xcatliu.com/basics/declaration-files.html#interface-he-type\"><code>interface</code> 和 <code>type</code></a> 声明全局类型（<font color=\"red\"><strong>不用declare</strong></font>）</li>\n</ul>\n<p><font color=\"red\"><strong>注意点：</strong></font></p>\n<ol>\n<li><p>declare namespace内部直接使用 <code>function ajax</code> 来声明函数，而不是使用 <code>declare function ajax</code>。类似的，也可以使用 <code>const</code>, <code>class</code>, <code>enum</code> 等语句</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">// src/jQuery.d.ts</span><br><span class=\"hljs-keyword\">declare</span> <span class=\"hljs-keyword\">namespace</span> jQuery &#123;<br>    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">ajax</span>(<span class=\"hljs-params\">url: <span class=\"hljs-built_in\">string</span>, settings?: <span class=\"hljs-built_in\">any</span></span>): <span class=\"hljs-built_in\">void</span>;<br>    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">version</span>: <span class=\"hljs-built_in\">number</span>;<br>    <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Event</span> &#123;<br>        <span class=\"hljs-title function_\">blur</span>(<span class=\"hljs-attr\">eventType</span>: <span class=\"hljs-title class_\">EventType</span>): <span class=\"hljs-built_in\">void</span><br>    &#125;<br>    <span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title class_\">EventType</span> &#123;<br>        <span class=\"hljs-title class_\">CustomClick</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>类型声明文件中，可以直接使用 <code>interface</code> 或 <code>type</code> 来声明一个全局的接口或类型，<font color=\"red\"><strong>不用declare</strong></font>，在其他文件中也可以使用这个接口或类型</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">// src/jQuery.d.ts</span><br><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">AjaxSettings</span> &#123;<br>    method?: <span class=\"hljs-string\">&#x27;GET&#x27;</span> | <span class=\"hljs-string\">&#x27;POST&#x27;</span><br>    data?: <span class=\"hljs-built_in\">any</span>;<br>&#125;<br><span class=\"hljs-keyword\">declare</span> <span class=\"hljs-keyword\">namespace</span> jQuery &#123;<br>    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">ajax</span>(<span class=\"hljs-params\">url: <span class=\"hljs-built_in\">string</span>, settings?: AjaxSettings</span>): <span class=\"hljs-built_in\">void</span>;<br>&#125;<br><br><span class=\"hljs-comment\">// src/index.ts</span><br><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">settings</span>: <span class=\"hljs-title class_\">AjaxSettings</span> = &#123;<br>    <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">&#x27;POST&#x27;</span>,<br>    <span class=\"hljs-attr\">data</span>: &#123;<br>        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;foo&#x27;</span><br>    &#125;<br>&#125;;<br>jQuery.<span class=\"hljs-title function_\">ajax</span>(<span class=\"hljs-string\">&#x27;/api/post_something&#x27;</span>, settings);<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>暴露在最外层的 <code>interface</code> 或 <code>type</code> 会作为全局类型作用于整个项目中，故最好将他们放到 <code>namespace</code> 下</p>\n</li>\n<li><p>声明合并：可以组合多个声明语句，它们会不冲突的合并起来</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">// src/jQuery.d.ts</span><br><span class=\"hljs-keyword\">declare</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">jQuery</span>(<span class=\"hljs-params\">selector: <span class=\"hljs-built_in\">string</span></span>): <span class=\"hljs-built_in\">any</span>;<br><span class=\"hljs-keyword\">declare</span> <span class=\"hljs-keyword\">namespace</span> jQuery &#123;<br>    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">ajax</span>(<span class=\"hljs-params\">url: <span class=\"hljs-built_in\">string</span>, settings?: <span class=\"hljs-built_in\">any</span></span>): <span class=\"hljs-built_in\">void</span>;<br>&#125;<br><br><span class=\"hljs-comment\">// src/index.ts</span><br><span class=\"hljs-title function_\">jQuery</span>(<span class=\"hljs-string\">&#x27;#foo&#x27;</span>);<br>jQuery.<span class=\"hljs-title function_\">ajax</span>(<span class=\"hljs-string\">&#x27;/api/get_something&#x27;</span>);<br></code></pre></td></tr></table></figure></li>\n</ol>\n<hr>\n<h3 id=\"npm-包\"><a href=\"#npm-包\" class=\"headerlink\" title=\"npm 包\"></a>npm 包</h3><ul>\n<li>声明文件位置：</li>\n</ul>\n<ol>\n<li>与该 npm 包绑定在一起。 <code>package.json</code> 中有 <code>types</code> 字段，或者有一个 <code>index.d.ts</code> 声明文件</li>\n<li>发布到 <code>@types</code> 里。尝试安装一下对应的 <code>@types</code> 包， &#96;npm install @types&#x2F;foo –save-dev</li>\n</ol>\n<ul>\n<li><p>npm 包的声明文件主要有以下几种语法：</p>\n<p><a href=\"https://ts.xcatliu.com/basics/declaration-files.html#export\"><code>export</code></a> 导出变量</p>\n<p><a href=\"https://ts.xcatliu.com/basics/declaration-files.html#export-namespace\"><code>export namespace</code></a> 导出（含有子属性的）对象</p>\n<p><a href=\"https://ts.xcatliu.com/basics/declaration-files.html#export-default\"><code>export default</code></a> ES6 默认导出</p>\n<p><a href=\"https://ts.xcatliu.com/basics/declaration-files.html#export-1\"><code>export =</code></a> commonjs 导出模块</p>\n</li>\n<li><p>在 npm 包的声明文件中，<font color=\"red\">使用 <code>declare</code> 不再会声明一个全局变量</font>，而只会在当前文件中声明一个局部变量。只有在声明文件中使用 <code>export</code> 导出，然后在使用方 <code>import</code> 导入后，才会应用到这些类型声明。</p>\n</li>\n</ul>\n<p><font color=\"red\"><strong>用法:</strong></font></p>\n<p>直接<code>export</code>导出类型</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">// types/foo/index.d.ts</span><br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span>;<br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getName</span>(<span class=\"hljs-params\"></span>): <span class=\"hljs-built_in\">string</span>;<br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Animal</span> &#123;<br>    <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">name: <span class=\"hljs-built_in\">string</span></span>);<br>    <span class=\"hljs-title function_\">sayHi</span>(): <span class=\"hljs-built_in\">string</span>;<br>&#125;<br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title class_\">Directions</span> &#123;<br>    <span class=\"hljs-title class_\">Up</span>,<br>    <span class=\"hljs-title class_\">Down</span>,<br>    <span class=\"hljs-title class_\">Left</span>,<br>    <span class=\"hljs-title class_\">Right</span><br>&#125;<br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Options</span> &#123;<br>    <span class=\"hljs-attr\">data</span>: <span class=\"hljs-built_in\">any</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>使用 <code>declare</code> 先声明多个变量，用 <code>export</code> 导出</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">// types/foo/index.d.ts</span><br><br><span class=\"hljs-keyword\">declare</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span>;<br><span class=\"hljs-keyword\">declare</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getName</span>(<span class=\"hljs-params\"></span>): <span class=\"hljs-built_in\">string</span>;<br><span class=\"hljs-keyword\">declare</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Animal</span> &#123;<br>    <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">name: <span class=\"hljs-built_in\">string</span></span>);<br>    <span class=\"hljs-title function_\">sayHi</span>(): <span class=\"hljs-built_in\">string</span>;<br>&#125;<br><span class=\"hljs-keyword\">declare</span> <span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title class_\">Directions</span> &#123;<br>    <span class=\"hljs-title class_\">Up</span>,<br>    <span class=\"hljs-title class_\">Down</span>,<br>    <span class=\"hljs-title class_\">Left</span>,<br>    <span class=\"hljs-title class_\">Right</span><br>&#125;<br><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Options</span> &#123;<br>    <span class=\"hljs-attr\">data</span>: <span class=\"hljs-built_in\">any</span>;<br>&#125;<br><br><span class=\"hljs-keyword\">export</span> &#123; name, getName, <span class=\"hljs-title class_\">Animal</span>, <span class=\"hljs-title class_\">Directions</span>, <span class=\"hljs-title class_\">Options</span> &#125;;<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"声明文件中的依赖\"><a href=\"#声明文件中的依赖\" class=\"headerlink\" title=\"声明文件中的依赖\"></a>声明文件中的依赖</h3><p>一个声明文件有时会依赖另一个声明文件中的类型。除了可以在声明文件中通过 <code>import</code> 导入另一个声明文件中的类型之外，还可以使用三斜线指令。</p>\n<ul>\n<li><p>书写一个全局变量的声明文件时</p>\n<p>全局变量的声明文件中，是不允许出现 <code>import</code>, <code>export</code> 关键字的。一旦出现了，那么他就会被视为一个 npm 包或 UMD 库，就不再是全局变量的声明文件了。故当我们在书写一个全局变量的声明文件时，如果需要引用另一个库的类型，那么就必须用三斜线指令</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">// types/jquery-plugin/index.d.ts</span><br><br><span class=\"hljs-comment\">/// &lt;reference types=&quot;jquery&quot; /&gt;</span><br><br><span class=\"hljs-keyword\">declare</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">foo</span>(<span class=\"hljs-params\">options: JQuery.AjaxSettings</span>): <span class=\"hljs-built_in\">string</span>;<br><br><span class=\"hljs-comment\">// src/index.ts</span><br><span class=\"hljs-title function_\">foo</span>(&#123;&#125;);<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>需要依赖一个全局变量的声明文件时</p>\n<p>需要依赖一个全局变量的声明文件时，由于全局变量不支持通过 <code>import</code> 导入，当然也就必须使用三斜线指令来引入</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">// types/node-plugin/index.d.ts</span><br><br><span class=\"hljs-comment\">/// &lt;reference types=&quot;node&quot; /&gt;</span><br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">foo</span>(<span class=\"hljs-params\">p: NodeJS.Process</span>): <span class=\"hljs-built_in\">string</span>;<br><br><span class=\"hljs-comment\">// src/index.ts</span><br><span class=\"hljs-keyword\">import</span> &#123; foo &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;node-plugin&#x27;</span>;<br><br><span class=\"hljs-title function_\">foo</span>(<span class=\"hljs-variable language_\">global</span>.<span class=\"hljs-property\">process</span>);<br></code></pre></td></tr></table></figure></li>\n</ul>\n","excerpt":"","more":"<h1 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h1><h2 id=\"1-原始值和引用值类型及区别\"><a href=\"#1-原始值和引用值类型及区别\" class=\"headerlink\" title=\"1  原始值和引用值类型及区别\"></a>1  原始值和引用值类型及区别</h2><p><a href=\"https://www.runoob.com/w3cnote/javascript-basic-types-and-reference-types.html\">JavaScript 深入了解基本类型和引用类型的值</a></p>\n<p><strong>原始值（简单数据类型）</strong>：存储在栈中的简单数据段，也就是说，它们的值直接存储在变量访问的位置。<br>6种简单数据类型：undefined、null、boolean、number、string、symbol；可以通过typeof 运算符来判断一个值是否在某种类型的范围内，如果它是原始类型，还可以判断它表示哪种原始类型(除null)。</p>\n<img src=\"原始数据类型.png\" style=\"zoom:80%;\" />\n\n<p><strong>引用值（复杂数据类型）</strong>：存储在堆中的对象，放在变量的栈空间中的值是该对象存储在堆中的地址，也就是说，存储在变量处的值是一个指针（内存地址），指向存储对象的堆内存中。<br>包含：Object、function、array等。</p>\n<img src=\"引用数据类型.png\"  />\n\n<p><strong><font color=\"#dd0000\">区别：</font></strong></p>\n<p>简单数据类型的值是储存在栈中，当把一个变量传递给另一个变量时，是把一个栈中的东西复制到另一个到栈中，并且这两个变量互不影响，修改其中的变量值时，不会改变另外一个变量的结果。</p>\n<p>引用数据类型是把变量标识符和和指向堆内存中该对象的指针（内存地址）存储在栈中，但是把其实际对象存储在堆中，栈中的内存地址指向堆中的实际对象，当把引用对象传递给另一个变量时，复制的其实是指向实际对象的指针（内存地址），此时两者指向的是同一个数据，若通过方法改变其中一个变量的值，则访问另一个变量时，其值也会跟着改变。</p>\n<hr>\n<h2 id=\"2-判断数据类型\"><a href=\"#2-判断数据类型\" class=\"headerlink\" title=\"2 判断数据类型\"></a>2 判断数据类型</h2><h3 id=\"typeof\"><a href=\"#typeof\" class=\"headerlink\" title=\"typeof\"></a>typeof</h3><p>优点：能快速检查undefined,string,number,boolean,function类型<br>缺点：当类型为object,null,array时都会返回object,所以不能区分这三类</p>\n<h3 id=\"instanceof\"><a href=\"#instanceof\" class=\"headerlink\" title=\"instanceof\"></a>instanceof</h3><p>用于检测构造函数的 prototype 属性是否出现在某个实例对象的原型链上。</p>\n<p>优点：能检测array,function,object类型<br>缺点:  检测不了字面量定义的number,boolean,string</p>\n<h3 id=\"Object-prototype-toString-call\"><a href=\"#Object-prototype-toString-call\" class=\"headerlink\" title=\"Object.prototype.toString.call()\"></a>Object.prototype.toString.call()</h3><p>优点：能准确的判断所有的类型。<br>缺点：写法过于繁琐</p>\n<h3 id=\"constructor-NaN\"><a href=\"#constructor-NaN\" class=\"headerlink\" title=\"constructor\"></a>constructor</h3><ul>\n<li>构造函数的原型中包含属性 <code>constructor</code> 指向该构造函数,但是他是不安全的，因为contructor的指向是可以被改变</li>\n<li>null、undefined没有construstor方法，因此constructor不能判断undefined和null。</li>\n</ul>\n<hr>\n<h2 id=\"3-类数组与数组的区别与转换\"><a href=\"#3-类数组与数组的区别与转换\" class=\"headerlink\" title=\"3 类数组与数组的区别与转换\"></a>3 类数组与数组的区别与转换</h2><ul>\n<li><p>类数组对象：arguments对象、DOM对象列表;</p>\n</li>\n<li><p>类数组对象也有length属性,可以这种取值: NodeList[0]、NodeList.item(0);</p>\n<p>**<font color=\"#dd0000\">区别：</font>**：数组对象的类型是Array,类数组对象的类型是object，也就是说类数组原型是Object;类数组不具有数组所具有的方法。</p>\n<p><strong><font color=\"#dd0000\">转换：</font></strong></p>\n<ol>\n<li>Array.prototype.slice.call(arrayLike, start);</li>\n<li>Array.from(arrayLike)</li>\n<li>扩展运算符<code>[...arrayLike]</code></li>\n</ol>\n</li>\n</ul>\n<hr>\n<h2 id=\"4-数组常见API\"><a href=\"#4-数组常见API\" class=\"headerlink\" title=\"4 数组常见API\"></a>4 数组常见API</h2><p><a href=\"https://www.cnblogs.com/zyfeng/p/10541133.html\">js数组方法整理</a></p>\n<hr>\n<h2 id=\"5-call-apply-bind\"><a href=\"#5-call-apply-bind\" class=\"headerlink\" title=\"5 call,apply,bind\"></a>5 call,apply,bind</h2><p><a href=\"https://www.runoob.com/w3cnote/js-call-apply-bind.html\">JavaScript 中 call()、apply()、bind() 的用法</a></p>\n<hr>\n<h2 id=\"6-new的原理\"><a href=\"#6-new的原理\" class=\"headerlink\" title=\"6 new的原理\"></a>6 new的原理</h2><ol>\n<li>创建一个空对象obj（{}）；</li>\n<li>将obj的[[prototype]]属性指向构造函数constrc的原型（即obj.[[prototype]] &#x3D; constrc.prototype）；</li>\n<li>将构造函数constrc内部的this绑定到新建的对象obj，执行constrc（也就是跟调用普通函数一样，只是此时函数的this为新创建的对象obj）；</li>\n<li>若构造函数没有返回引用类型，则返回该新建的对象obj（默认会添加return this）。否则，返回引用类型的值。</li>\n</ol>\n<img src=\"20191119212535220.png\" style=\"zoom: 67%;\" />\n\n<hr>\n<h2 id=\"7-正确判断this\"><a href=\"#7-正确判断this\" class=\"headerlink\" title=\"7 正确判断this\"></a>7 正确判断this</h2><p><a href=\"https://blog.csdn.net/weixin_42721322/article/details/106391922\">前端JS必备知识点：如何正确的判断this的指向?</a></p>\n<hr>\n<h2 id=\"8-闭包及其作用\"><a href=\"#8-闭包及其作用\" class=\"headerlink\" title=\"8 闭包及其作用\"></a>8 闭包及其作用</h2><p>闭包指子函数可以访问外部作用域变量的函数特性，即使在子函数作用域外也可以访问。如果没有闭包那么在处理事件绑定，异步请求时都会变得困难。</p>\n<p>由于在Javascript语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成”定义在一个函数内部的函数”。所以，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。</p>\n<ul>\n<li>JS中的所有函数都是闭包</li>\n<li>闭包一般在子函数本身作用域以外执行，即延伸作用域</li>\n</ul>\n<p>闭包可以用在许多地方。它的最大用处有两个：</p>\n<ul>\n<li>在函数外可以读取函数内部的变量</li>\n<li>让这些变量的值始终保持在内存中。</li>\n</ul>\n<p>坏处：</p>\n<p>由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。<br>解决方法是，在退出函数之前，将不使用的局部变量全部删除。</p>\n<p><a href=\"https://www.cnblogs.com/itjeff/p/10106855.html\">彻底理解JS闭包</a><br><a href=\"https://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html\">学习Javascript闭包（Closure）</a><br><a href=\"https://www.jianshu.com/p/e5225ba4a025\">setTimeout函数之循环和闭包</a></p>\n<hr>\n<h2 id=\"9-原型\"><a href=\"#9-原型\" class=\"headerlink\" title=\"9 原型\"></a>9 原型</h2><img src=\"proto.png\" style=\"zoom:67%;\" />\n\n<p><a href=\"https://houdunren.gitee.io/note/js/11%20%E5%8E%9F%E5%9E%8B%E4%B8%8E%E7%BB%A7%E6%89%BF.html#%E5%8E%9F%E5%9E%8B%E5%9F%BA%E7%A1%80\"> 原型基础</a></p>\n<hr>\n<h2 id=\"10-继承的几种方式\"><a href=\"#10-继承的几种方式\" class=\"headerlink\" title=\"10 继承的几种方式\"></a>10 继承的几种方式</h2><p><a href=\"https://github.com/mqyqingfeng/Blog/issues/16\">JavaScript深入之继承的多种方式和优缺点</a></p>\n<h3 id=\"①原型链继承\"><a href=\"#①原型链继承\" class=\"headerlink\" title=\"①原型链继承\"></a>①原型链继承</h3><p>1.引用类型的属性被所有实例共享<br>2.在创建 Child 的实例时，不能向Parent传参</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Parent</span> () &#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = <span class=\"hljs-string\">&#x27;kevin&#x27;</span>;<br>&#125;<br><span class=\"hljs-title class_\">Parent</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">getName</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>);<br>&#125;<br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Child</span> () &#123;&#125;<br><span class=\"hljs-title class_\">Child</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Parent</span>();<br><span class=\"hljs-keyword\">var</span> child = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Child</span>();<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(child.<span class=\"hljs-title function_\">getName</span>()) <span class=\"hljs-comment\">// kevin</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"②借用构造函数（经典继承）\"><a href=\"#②借用构造函数（经典继承）\" class=\"headerlink\" title=\"②借用构造函数（经典继承）\"></a>②借用构造函数（经典继承）</h3><p>优点：</p>\n<p>1.避免了引用类型的属性被所有实例共享</p>\n<p>2.可以在 Child 中向 Parent 传参</p>\n<p>缺点：</p>\n<p>方法都在构造函数中定义，每次创建实例都会创建一遍方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Parent</span> () &#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">names</span> = [<span class=\"hljs-string\">&#x27;kevin&#x27;</span>, <span class=\"hljs-string\">&#x27;daisy&#x27;</span>];<br>&#125;<br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Child</span> () &#123;<br>    <span class=\"hljs-title class_\">Parent</span>.<span class=\"hljs-title function_\">call</span>(<span class=\"hljs-variable language_\">this</span>);<br>&#125;<br><span class=\"hljs-keyword\">var</span> child1 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Child</span>();<br>child1.<span class=\"hljs-property\">names</span>.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-string\">&#x27;yayu&#x27;</span>);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(child1.<span class=\"hljs-property\">names</span>); <span class=\"hljs-comment\">// [&quot;kevin&quot;, &quot;daisy&quot;, &quot;yayu&quot;]</span><br><br><span class=\"hljs-keyword\">var</span> child2 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Child</span>();<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(child2.<span class=\"hljs-property\">names</span>); <span class=\"hljs-comment\">// [&quot;kevin&quot;, &quot;daisy&quot;]</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"③组合继承\"><a href=\"#③组合继承\" class=\"headerlink\" title=\"③组合继承\"></a>③组合继承</h3><p>优点：融合原型链继承和构造函数的优点，是 JavaScript 中最常用的继承模式。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Parent</span> (name) &#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = name;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">colors</span> = [<span class=\"hljs-string\">&#x27;red&#x27;</span>, <span class=\"hljs-string\">&#x27;blue&#x27;</span>, <span class=\"hljs-string\">&#x27;green&#x27;</span>];<br>&#125;<br><span class=\"hljs-title class_\">Parent</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">getName</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>)<br>&#125;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Child</span> (name, age) &#123;<br>    <span class=\"hljs-title class_\">Parent</span>.<span class=\"hljs-title function_\">call</span>(<span class=\"hljs-variable language_\">this</span>, name);<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">age</span> = age;<br>&#125;<br><br><span class=\"hljs-title class_\">Child</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Parent</span>();<br><span class=\"hljs-title class_\">Child</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">constructor</span> = <span class=\"hljs-title class_\">Child</span>;<br><br><span class=\"hljs-keyword\">var</span> child1 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Child</span>(<span class=\"hljs-string\">&#x27;kevin&#x27;</span>, <span class=\"hljs-string\">&#x27;18&#x27;</span>);<br>child1.<span class=\"hljs-property\">colors</span>.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-string\">&#x27;black&#x27;</span>);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(child1.<span class=\"hljs-property\">name</span>); <span class=\"hljs-comment\">// kevin</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(child1.<span class=\"hljs-property\">age</span>); <span class=\"hljs-comment\">// 18</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(child1.<span class=\"hljs-property\">colors</span>); <span class=\"hljs-comment\">// [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;, &quot;black&quot;]</span><br><br><span class=\"hljs-keyword\">var</span> child2 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Child</span>(<span class=\"hljs-string\">&#x27;daisy&#x27;</span>, <span class=\"hljs-string\">&#x27;20&#x27;</span>);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(child2.<span class=\"hljs-property\">name</span>); <span class=\"hljs-comment\">// daisy</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(child2.<span class=\"hljs-property\">age</span>); <span class=\"hljs-comment\">// 20</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(child2.<span class=\"hljs-property\">colors</span>); <span class=\"hljs-comment\">// [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;]</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"④原型式继承\"><a href=\"#④原型式继承\" class=\"headerlink\" title=\"④原型式继承\"></a>④原型式继承</h3><p>原型式继承继承的基本思想：在 object() 函数内部，先创建一个临时性的构造函数，然后将传入的对象作为这个构造函数的原型，最后返回了这个临时类型的一个新实例。相当于Object.create()</p>\n<p>缺点：</p>\n<p>包含引用类型值的属性会被所有实例共享，这点跟原型链继承一样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">createObj</span>(<span class=\"hljs-params\">o</span>) &#123;<br>    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">F</span>(<span class=\"hljs-params\"></span>)&#123;&#125;<br>    F.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span> = o;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title function_\">F</span>();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"⑤寄生式继承\"><a href=\"#⑤寄生式继承\" class=\"headerlink\" title=\"⑤寄生式继承\"></a>⑤寄生式继承</h3><p>创建一个仅用于封装继承过程的函数，该函数在内部以某种形式来做增强对象，最后返回对象</p>\n<p>缺点：跟借用构造函数模式一样，每次创建对象都会创建一遍方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">createObj</span> (o) &#123;<br>    <span class=\"hljs-keyword\">var</span> clone = <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">create</span>(o);<br>    clone.<span class=\"hljs-property\">sayName</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;hi&#x27;</span>);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> clone;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"⑥寄生组合式继承\"><a href=\"#⑥寄生组合式继承\" class=\"headerlink\" title=\"⑥寄生组合式继承\"></a>⑥寄生组合式继承</h3><p>这种方式的高效率体现它只调用了一次 Parent 构造函数，并且因此避免了在 Parent.prototype 上面创建不必要的、多余的属性。</p>\n<p>与此同时，原型链还能保持不变；因此，还能够正常使用 instanceof 和 isPrototypeOf。</p>\n<p>开发人员普遍认为寄生组合式继承是引用类型最理想的继承范式。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">object</span>(<span class=\"hljs-params\">o</span>) &#123;<br>    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">F</span>(<span class=\"hljs-params\"></span>) &#123;&#125;<br>    F.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span> = o;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title function_\">F</span>();<br>&#125;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">prototype</span>(<span class=\"hljs-params\">child, parent</span>) &#123;<br>    <span class=\"hljs-keyword\">var</span> prototype = <span class=\"hljs-title function_\">object</span>(parent.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>);<br>    prototype.<span class=\"hljs-property\">constructor</span> = child;<br>    child.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span> = prototype;<br>&#125;<br><br><span class=\"hljs-comment\">// 当我们使用的时候：</span><br><span class=\"hljs-title function_\">prototype</span>(<span class=\"hljs-title class_\">Child</span>, <span class=\"hljs-title class_\">Parent</span>);<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"11-深拷贝与浅拷贝\"><a href=\"#11-深拷贝与浅拷贝\" class=\"headerlink\" title=\"11 深拷贝与浅拷贝\"></a>11 深拷贝与浅拷贝</h2><ul>\n<li>浅拷贝：for in,Object.assign,展开语法。</li>\n<li>深拷贝：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">parse</span>(<span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>(obj))<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">copy</span>(<span class=\"hljs-params\">object</span>) &#123;<br>  <span class=\"hljs-keyword\">let</span> obj = object <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-title class_\">Array</span> ? [] : &#123;&#125;;<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> [k, v] <span class=\"hljs-keyword\">of</span> <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">entries</span>(object)) &#123;<br>    obj[k] = <span class=\"hljs-keyword\">typeof</span> v == <span class=\"hljs-string\">&quot;object&quot;</span> ? <span class=\"hljs-title function_\">copy</span>(v) : v;<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> obj;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"12-防抖和节流\"><a href=\"#12-防抖和节流\" class=\"headerlink\" title=\"12  防抖和节流\"></a>12  防抖和节流</h2><p><a href=\"https://www.cnblogs.com/cc-freiheit/p/10827372.html\">js 函数的防抖(debounce)与节流(throttle)</a></p>\n<h3 id=\"防抖\"><a href=\"#防抖\" class=\"headerlink\" title=\"防抖\"></a>防抖</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//每次执行都将前一次清掉，只执行最后一次</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">debounce</span>(<span class=\"hljs-params\">fn, delay</span>) &#123;<br>    <span class=\"hljs-keyword\">let</span> timer = <span class=\"hljs-literal\">null</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-built_in\">clearTimeout</span>(timer)<br>        timer = <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>            fn.<span class=\"hljs-title function_\">apply</span>(<span class=\"hljs-variable language_\">this</span>, <span class=\"hljs-variable language_\">arguments</span>)<br>        &#125;, delay)<br>    &#125;<br>&#125;<br>$(<span class=\"hljs-string\">&#x27;#content&#x27;</span>).<span class=\"hljs-property\">onmousemove</span> = <span class=\"hljs-title function_\">debounce</span>(fn,<span class=\"hljs-number\">1000</span>)<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"节流\"><a href=\"#节流\" class=\"headerlink\" title=\"节流\"></a>节流</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//一段时间只执行一次</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">throttle</span>(<span class=\"hljs-params\">fn, delay</span>) &#123;<br>    <span class=\"hljs-keyword\">let</span> pre = <span class=\"hljs-number\">0</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-keyword\">let</span> now = <span class=\"hljs-title class_\">Date</span>.<span class=\"hljs-title function_\">now</span>()<br>        <span class=\"hljs-keyword\">if</span> (now - pre &gt; delay) &#123;<br>            fn.<span class=\"hljs-title function_\">apply</span>(<span class=\"hljs-variable language_\">this</span>, <span class=\"hljs-variable language_\">arguments</span>)<br>            pre = now<br>        &#125;<br>    &#125;<br>&#125;<br><span class=\"hljs-comment\">//计时器方法，如果timeout正在计时，就不执行，这样一段时间只执行一次</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">throttle2</span>(<span class=\"hljs-params\">fn, delay</span>) &#123;<br>    <span class=\"hljs-keyword\">let</span> timeout<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-keyword\">if</span> (!timeout) &#123;<br>            timeout = <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>                timeout = <span class=\"hljs-literal\">null</span><br>                fn.<span class=\"hljs-title function_\">apply</span>(<span class=\"hljs-variable language_\">this</span>, <span class=\"hljs-variable language_\">arguments</span>)<br>            &#125;, delay)<br>        &#125;<br>    &#125;<br>&#125;<br>$(<span class=\"hljs-string\">&#x27;#content&#x27;</span>).<span class=\"hljs-property\">onmousemove</span> = <span class=\"hljs-title function_\">throttle</span>(fn,<span class=\"hljs-number\">1000</span>)<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"13-作用域和作用域链、执行期上下文\"><a href=\"#13-作用域和作用域链、执行期上下文\" class=\"headerlink\" title=\"13  作用域和作用域链、执行期上下文\"></a><font color='red'>13  作用域和作用域链、执行期上下文</font></h2><h3 id=\"词法作用域\"><a href=\"#词法作用域\" class=\"headerlink\" title=\"词法作用域\"></a>词法作用域</h3><p>词法作用域是指在词法分析阶段就确定了，不会改变。变量的作用域是在定义时决定而不是执行时决定，也就是说词法作用域取决于源码，通过静态分析就能确定，因此词法作用域也叫做静态作用域。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">let</span> value = <span class=\"hljs-number\">10</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">a</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(value)<br>&#125;<br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">b</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-keyword\">let</span> value = <span class=\"hljs-number\">22</span><br>    <span class=\"hljs-title function_\">a</span>()<br>&#125;<br><span class=\"hljs-title function_\">b</span>()<span class=\"hljs-comment\">//10</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"上下文-context\"><a href=\"#上下文-context\" class=\"headerlink\" title=\"上下文(context)\"></a>上下文(context)</h3><p>指作用域。每个上下文都有一个关联的变量对象（variable object），这个上下文中定义的所有变量和函数都存在于这个对象上。上下文中的代码在执行的时候，会创建变量对象的一个作用域链（scope chain）</p>\n<h3 id=\"作用域链\"><a href=\"#作用域链\" class=\"headerlink\" title=\"作用域链\"></a>作用域链</h3><p>当查找变量的时候，会先从当前上下文的变量对象中查找，如果没有找到，就会从父级(词法层面上的父级)执行上下文的变量对象中查找，一直找到全局上下文的变量对象，也就是全局对象。这样由多个执行上下文的变量对象构成的链表就叫做作用域链。</p>\n<h3 id=\"执行期上下文\"><a href=\"#执行期上下文\" class=\"headerlink\" title=\"执行期上下文\"></a>执行期上下文</h3><p><a href=\"https://blog.csdn.net/qq_27626333/article/details/78463565\">https://blog.csdn.net/qq_27626333&#x2F;article&#x2F;details&#x2F;78463565</a></p>\n<hr>\n<h2 id=\"14-DOM常见操作\"><a href=\"#14-DOM常见操作\" class=\"headerlink\" title=\"14 DOM常见操作\"></a>14 DOM常见操作</h2><p><a href=\"https://houdunren.gitee.io/note/js/18%20DOM.html#%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86\">DOM基础知识</a></p>\n<hr>\n<h2 id=\"15-Array-sort-方法与实现机制\"><a href=\"#15-Array-sort-方法与实现机制\" class=\"headerlink\" title=\"15 Array.sort()方法与实现机制\"></a>15 Array.sort()方法与实现机制</h2><p>插入排序，快排（chrome)</p>\n<hr>\n<h2 id=\"16-AJAX的请求过程\"><a href=\"#16-AJAX的请求过程\" class=\"headerlink\" title=\"16 AJAX的请求过程\"></a>16 AJAX的请求过程</h2><ol>\n<li>创建XMLHttpRequest对象xhr</li>\n<li>设置回调函数</li>\n<li>open方法初始化请求参数</li>\n<li>send方法发送数据</li>\n<li>在回调函数中处理响应状态</li>\n</ol>\n<img src=\"readystate.bmp\" style=\"zoom: 80%;\" />\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><br><span class=\"hljs-keyword\">var</span> xhr = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">XMLHttpRequest</span>();<br>xhr.<span class=\"hljs-property\">onreadystatechange</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>  <span class=\"hljs-keyword\">if</span> (xhr.<span class=\"hljs-property\">readyState</span> === <span class=\"hljs-number\">4</span> &amp;&amp; xhr.<span class=\"hljs-property\">status</span> === <span class=\"hljs-number\">200</span>) <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(xhr.<span class=\"hljs-property\">responseText</span>)<br>  <span class=\"hljs-keyword\">else</span> &#123;<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(xhr.<span class=\"hljs-property\">statusText</span>);<br>&#125;<br>xhr.<span class=\"hljs-title function_\">open</span>(<span class=\"hljs-string\">&#x27;GET&#x27;</span>, <span class=\"hljs-string\">&#x27;/endpoint&#x27;</span>, <span class=\"hljs-literal\">true</span>);<br>xhr.<span class=\"hljs-title function_\">send</span>(data);<br><br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"17-JS的垃圾回收机制\"><a href=\"#17-JS的垃圾回收机制\" class=\"headerlink\" title=\"17 JS的垃圾回收机制\"></a>17 JS的垃圾回收机制</h2><p><a href=\"https://segmentfault.com/a/1190000018605776\">前端面试：谈谈 JS 垃圾回收机制</a></p>\n<ol>\n<li><p>垃圾:一般来说没有被引用的对象就是垃圾，就是要被清除， 有个例外如果几个对象引用形成一个环，互相引用，但根访问不到它们，这几个对象也是垃圾，也要被清除。</p>\n</li>\n<li><p>垃圾回收算法</p>\n<ul>\n<li>标记清除：<ol>\n<li>垃圾回收器获取根并“标记”。（根：无法删除的基本的固有可达值：①函数的变量，参数。②嵌套调用链上的其他函数的变量和参数。③全局变量等</li>\n<li>然后它访问并“标记”所有来自根的引用。</li>\n<li>然后它访问标记的对象并标记它们的引用。所有被访问的对象都被记住，以便以后不再访问同一个对象两次。 </li>\n<li>以此类推，直到有未访问的引用(可以从根访问)为止。</li>\n<li>除标记的对象外，所有对象都被删除。</li>\n</ol>\n</li>\n<li>引用计数</li>\n</ul>\n<p>所谓”引用计数”是指语言引擎有一张”引用表”，保存了内存里面所有的资源（通常是各种值）的引用次数。如果一个值的引用次数是0，就表示这个值不再用到了，因此可以将这块内存释放</p>\n</li>\n</ol>\n<hr>\n<h2 id=\"18-String-Math方法\"><a href=\"#18-String-Math方法\" class=\"headerlink\" title=\"18 String,Math方法\"></a>18 String,Math方法</h2><p><a href=\"https://www.cnblogs.com/lihuijuan/p/8490578.html\">总结JS中string、math、array的常用的方法</a></p>\n<h2 id=\"19-addEventListener和onClick-的区别\"><a href=\"#19-addEventListener和onClick-的区别\" class=\"headerlink\" title=\"19 addEventListener和onClick()的区别\"></a>19 addEventListener和onClick()的区别</h2><ul>\n<li>onClick直接触发事件，同一时间只能指向唯一对象，会被覆盖掉.</li>\n<li>addEventListener，同一事件类型可以设置多个事件处理程序，按设置的顺序先后执行，且可以控制触发阶段，<code>&#123; capture: true/false &#125;</code></li>\n</ul>\n<hr>\n<h2 id=\"20-new和Object-create区别\"><a href=\"#20-new和Object-create区别\" class=\"headerlink\" title=\"20 new和Object.create区别\"></a>20 new和Object.create区别</h2><ul>\n<li>new将对象的__proto__指向构造函数的prototype</li>\n<li>Object.create将新对象的__proto__指向指定的对象</li>\n</ul>\n<hr>\n<h2 id=\"21-DOM的location对象\"><a href=\"#21-DOM的location对象\" class=\"headerlink\" title=\"21 DOM的location对象\"></a>21 DOM的location对象</h2><img src=\"16eea8822b4d1239.jpg\"  />\n\n<hr>\n<h2 id=\"22-BOM属性对象方法\"><a href=\"#22-BOM属性对象方法\" class=\"headerlink\" title=\"22 BOM属性对象方法\"></a>22 BOM属性对象方法</h2><img src=\"BOM.png\"/>\n\n<p><a href=\"https://juejin.cn/post/6844904015646441485\">JS BOM详解</a></p>\n<hr>\n<h2 id=\"23-浏览器从输入URL到页面渲染的整个流程\"><a href=\"#23-浏览器从输入URL到页面渲染的整个流程\" class=\"headerlink\" title=\"23 浏览器从输入URL到页面渲染的整个流程\"></a>23 浏览器从输入URL到页面渲染的整个流程</h2><ol>\n<li>DNS解析</li>\n<li>TCP连接</li>\n<li>发送HTTP请求</li>\n<li>服务器处理请求并返回HTTP报文</li>\n<li>浏览器解析渲染页面</li>\n<li>连接结束</li>\n</ol>\n<p>详细：</p>\n<ul>\n<li><p>输入url后，首先需要找到这个url域名的服务器ip,为了寻找这个ip，浏览器首先会寻找缓存，查看缓存中是否有记录，缓存的查找记录为：浏览器缓存-》系统缓存-》路由器缓存，缓存中没有则查找系统的hosts文件中是否有记录，如果没有则查询DNS服务器，得到服务器的ip地址。</p>\n</li>\n<li><p>三次握手建立TCP连接</p>\n</li>\n<li><p>浏览器构建http请求，并将这个http请求封装在一个tcp包中，这个tcp包会依次经过传输层，网络层，数据链路层，物理层到达服务器，服务器解析这个请求来作出响应，返回相应的html给浏览器</p>\n</li>\n<li><p>渲染页面：</p>\n<ol>\n<li>构建DOM树(DOM tree)：从上到下解析HTML文档生成DOM节点树（DOM tree）；</li>\n<li>构建CSS对象模型(CSS Object Model)树：加载解析样式生成CSSOM树；</li>\n<li>执行JavaScript：加载并执行JavaScript代码（js代码会造成阻塞）；</li>\n<li>构建渲染树(render tree)：根据DOM树和CSSOM树,生成渲染树(render tree)；</li>\n<li>渲染树：按顺序展示在屏幕上的一系列矩形，这些矩形带有字体，颜色和尺寸等视觉属性。</li>\n<li>布局（layout）：根据渲染树将节点树的每一个节点布局在屏幕上的正确位置；</li>\n<li>绘制（painting）：遍历渲染树绘制所有节点，为每一个节点适用对应的样式，这一过程是通过UI后端模块完成；</li>\n</ol>\n</li>\n<li><p>关闭连接</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"24-跨域、同源策略及跨域实现方式和原理\"><a href=\"#24-跨域、同源策略及跨域实现方式和原理\" class=\"headerlink\" title=\"24 跨域、同源策略及跨域实现方式和原理\"></a>24 跨域、同源策略及跨域实现方式和原理</h2><p><a href=\"https://segmentfault.com/a/1190000022304066\">前端多种跨域方式实现原理详解</a><br><a href=\"http://www.ruanyifeng.com/blog/2016/04/cors.html\">跨域资源共享 CORS 详解</a></p>\n<hr>\n<h2 id=\"25-浏览器的回流（Reflow）和重绘（Repaints）\"><a href=\"#25-浏览器的回流（Reflow）和重绘（Repaints）\" class=\"headerlink\" title=\"25 浏览器的回流（Reflow）和重绘（Repaints）\"></a>25 浏览器的回流（Reflow）和重绘（Repaints）</h2><p>浏览器渲染过程如下：</p>\n<ol>\n<li>解析HTML，生成DOM树，解析CSS，生成CSSOM树</li>\n<li>将DOM树和CSSOM树结合，生成渲染树(Render Tree)</li>\n<li>Layout(回流):根据生成的渲染树，进行回流(Layout)，得到节点的几何信息（位置，大小）</li>\n<li>Painting(重绘):根据渲染树以及回流得到的几何信息，得到节点的绝对像素</li>\n<li>Display:将像素发送给GPU，展示在页面上。</li>\n</ol>\n<img src=\"回流和重绘.png\"  />\n\n<ul>\n<li>回流：这一阶段主要是计算节点的位置和几何信息，那么当<font color='red'>页面布局和几何信息</font>发生变化的时候，就需要回流<ul>\n<li>添加或删除可见的DOM元素</li>\n<li>元素的位置发生变化</li>\n<li>元素的尺寸发生变化（包括外边距、内边框、边框大小、高度和宽度等）</li>\n<li>内容发生变化，比如文本变化或图片被另一个不同尺寸的图片所替代。</li>\n<li>页面一开始渲染的时候（这肯定避免不了）</li>\n<li>浏览器的窗口尺寸变化（因为回流是根据视口的大小来计算元素的位置和大小的）</li>\n</ul>\n</li>\n<li>重绘：由于节点的几何属性发生改变或者由于样式发生改变而不会影响布局的，称为重绘，例如<code>outline</code>, <code>visibility</code>, <code>color</code>、<code>background-color</code>等</li>\n<li><font color='red'>回流一定会触发重绘，而重绘不一定会回流</font></li>\n<li>减少重绘与回流：<a href=\"https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/24\">介绍下重绘和回流（Repaint &amp; Reflow），以及如何进行优化</a></li>\n</ul>\n<hr>\n<h2 id=\"26-arguments\"><a href=\"#26-arguments\" class=\"headerlink\" title=\"26  arguments\"></a>26  arguments</h2><p>arguments 是函数获得到所有参数集合</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">sum</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-keyword\">return</span> [...<span class=\"hljs-variable language_\">arguments</span>].<span class=\"hljs-title function_\">reduce</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">total, num</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> (total += num);<br>  &#125;, <span class=\"hljs-number\">0</span>);<br>&#125;<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">sum</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">6</span>)); <span class=\"hljs-comment\">//17</span><br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"27-EventLoop事件循环，宏任务，微任务\"><a href=\"#27-EventLoop事件循环，宏任务，微任务\" class=\"headerlink\" title=\"27 EventLoop事件循环，宏任务，微任务\"></a>27 EventLoop事件循环，宏任务，微任务</h2><p>JavaScript 语言的一大特点就是单线程，也就是说同一个时间只能处理一个任务。为了协调事件、用户交互、脚本、UI 渲染和网络处理等行为，防止主线程的不阻塞，（事件循环）Event Loop的方案应用而生。</p>\n<p>JavaScript 处理任务是在等待任务、执行任务 、休眠等待新任务中不断循环中，也称这种机制为事件循环。</p>\n<ul>\n<li>主线程中的任务执行完后，才执行任务队列中的任务</li>\n<li>有新任务到来时会将其放入队列，采取先进先执行的策略执行队列中的任务</li>\n<li>比如多个 <code>setTimeout</code> 同时到时间了，就要依次执行</li>\n</ul>\n<p>任务包括 script(整体代码)、 setTimeout、setInterval、DOM渲染、DOM事件、Promise、XMLHTTPREQUEST等</p>\n<ul>\n<li><p>宏任务：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">script(整体代码)<br>setTimeout<br>setInterval<br>I/O<br>UI交互事件<br>postMessage<br>MessageChannel<br>setImmediate(Node.js 环境)<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>微任务:微任务一般由用户代码产生，微任务较宏任务执行优先级更高</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs text\">Promise.then<br>Object.observe<br>MutaionObserver<br>process.nextTick(Node.js 环境)<br></code></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<h2 id=\"28-函数柯里化及其通用封装\"><a href=\"#28-函数柯里化及其通用封装\" class=\"headerlink\" title=\"28 函数柯里化及其通用封装\"></a>28 函数柯里化及其通用封装</h2><p>柯里化是一种将使用多个参数的一个函数转换成一系列使用一个参数的函数的技术。<br>函数柯里化，其实就是把多次调用的变量保存在闭包中，每次调用都查看一下变量数和原函数的形参数量是否相等。不相等就继续递归。直到相等为止就处理了</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"> <span class=\"hljs-comment\">//ES5</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">curry1</span>(<span class=\"hljs-params\">func, ...args</span>) &#123;<br>     <span class=\"hljs-keyword\">if</span> (args.<span class=\"hljs-property\">length</span> &lt; func.<span class=\"hljs-property\">length</span>) &#123;<br>         <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>             <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">curry</span>(func, ...args, ...<span class=\"hljs-variable language_\">arguments</span>)<br>         &#125;<br>     &#125;<br>     <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">func</span>(...args)<br> &#125;<br><span class=\"hljs-comment\">//ES6</span><br><span class=\"hljs-keyword\">let</span> <span class=\"hljs-title function_\">curry2</span> = (<span class=\"hljs-params\">func, ...args</span>) =&gt; args.<span class=\"hljs-property\">length</span> &lt; func.<span class=\"hljs-property\">length</span> ? <span class=\"hljs-function\">(<span class=\"hljs-params\">...args2</span>) =&gt;</span> <span class=\"hljs-title function_\">curry2</span>(func, ...args, ...args2) : <span class=\"hljs-title function_\">func</span>(...args)<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">add</span>(<span class=\"hljs-params\">a, b</span>) &#123;<br>    <span class=\"hljs-keyword\">return</span> a + b;<br>&#125;<br><br><span class=\"hljs-keyword\">var</span> addCurry = <span class=\"hljs-title function_\">curry</span>(add);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">addCurry</span>(<span class=\"hljs-number\">1</span>)(<span class=\"hljs-number\">2</span>))<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"29-和-区别\"><a href=\"#29-和-区别\" class=\"headerlink\" title=\"29 &#x3D;&#x3D;和&#x3D;&#x3D;&#x3D;区别\"></a>29 &#x3D;&#x3D;和&#x3D;&#x3D;&#x3D;区别</h2><p><code>===</code> 严格相等，会比较两个值的类型和值<br><code>==</code>  抽象相等，比较时，会先进行类型转换，然后再比较值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> num = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> obj = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>(<span class=\"hljs-string\">&quot;0&quot;</span>);<br><span class=\"hljs-keyword\">var</span> str = <span class=\"hljs-string\">&quot;0&quot;</span>;<br><span class=\"hljs-keyword\">var</span> b = <span class=\"hljs-literal\">false</span>;<br><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(num === num); <span class=\"hljs-comment\">// true</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(obj === obj); <span class=\"hljs-comment\">// true</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(str === str); <span class=\"hljs-comment\">// true</span><br><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(num === obj); <span class=\"hljs-comment\">// false</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(num === str); <span class=\"hljs-comment\">// false</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(obj === str); <span class=\"hljs-comment\">// false</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-literal\">null</span> === <span class=\"hljs-literal\">undefined</span>); <span class=\"hljs-comment\">// false</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(obj === <span class=\"hljs-literal\">null</span>); <span class=\"hljs-comment\">// false</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(obj === <span class=\"hljs-literal\">undefined</span>); <span class=\"hljs-comment\">// false</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> num = <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">var</span> obj = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>(<span class=\"hljs-string\">&quot;0&quot;</span>);<br><span class=\"hljs-keyword\">var</span> str = <span class=\"hljs-string\">&quot;0&quot;</span>;<br><span class=\"hljs-keyword\">var</span> b = <span class=\"hljs-literal\">false</span>;<br><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(num == num); <span class=\"hljs-comment\">// true</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(obj == obj); <span class=\"hljs-comment\">// true</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(str == str); <span class=\"hljs-comment\">// true</span><br><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(num == obj); <span class=\"hljs-comment\">// true</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(num == str); <span class=\"hljs-comment\">// true</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(obj == str); <span class=\"hljs-comment\">// true</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-literal\">null</span> == <span class=\"hljs-literal\">undefined</span>); <span class=\"hljs-comment\">// true</span><br><br><span class=\"hljs-comment\">// both false, except in rare cases</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(obj == <span class=\"hljs-literal\">null</span>);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(obj == <span class=\"hljs-literal\">undefined</span>);<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"30-setTimeout-误差\"><a href=\"#30-setTimeout-误差\" class=\"headerlink\" title=\"30 setTimeout 误差\"></a>30 setTimeout 误差</h2><p>主线程执行任务花费时间大于定时器时间，定时器的回调在宏任务队列里，来不及调用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;start&quot;</span>);<br><span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;timeout&quot;</span>);<br>&#125;,<span class=\"hljs-number\">5000</span>);<br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>;i &lt;= <span class=\"hljs-number\">500000</span>;i++)&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;i:&quot;</span>,i);<br>&#125;<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;end&quot;</span>);<br><br>结果：<br>start<br><span class=\"hljs-attr\">i</span>:<span class=\"hljs-number\">1</span> <br>(...) <span class=\"hljs-comment\">//一直输出到500000</span><br><span class=\"hljs-comment\">//耗时14秒左右</span><br>end<br><span class=\"hljs-comment\">//没有等待</span><br>timeout<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"31-循环比较\"><a href=\"#31-循环比较\" class=\"headerlink\" title=\"31 循环比较\"></a>31 循环比较</h2><ol>\n<li><p>for循环，写法麻烦</p>\n</li>\n<li><p>数组<code>foreach</code>，无法中途跳出<code>forEach</code>循环，<code>break</code>命令或<code>return</code>命令都不能奏效。</p>\n</li>\n<li><p><code>for...in</code>循环可以遍历数组的键名。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> index <span class=\"hljs-keyword\">in</span> myArray) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(myArray[index]);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><code>for...in</code>循环有几个缺点。</p>\n<ul>\n<li>数组的键名是数字，但是<code>for...in</code>循环是以字符串作为键名“0”、“1”、“2”等等。</li>\n<li><code>for...in</code>循环不仅遍历数字键名，还会遍历手动添加的其他键，甚至包括原型链上的键。</li>\n<li>某些情况下，<code>for...in</code>循环会以任意顺序遍历键名。</li>\n</ul>\n<p>总之，<code>for...in</code>循环主要是为遍历对象而设计的，不适用于遍历数组。</p>\n</li>\n<li><p>for…of循环内部调用的是数据结构的遍历器。<code>for...of</code>循环相比上面几种做法，有一些显著的优点:</p>\n<ul>\n<li>有着同<code>for...in</code>一样的简洁语法，但是没有<code>for...in</code>那些缺点。</li>\n<li>不同于<code>forEach</code>方法，它可以与<code>break</code>、<code>continue</code>和<code>return</code>配合使用。</li>\n<li>提供了遍历所有数据结构的统一操作接口</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2 id=\"32-异步方式比较\"><a href=\"#32-异步方式比较\" class=\"headerlink\" title=\"32 异步方式比较\"></a>32 异步方式比较</h2><ul>\n<li>回调：回调地狱</li>\n<li>promise:代码完全都是 Promise 的 API（<code>then</code>、<code>catch</code>等等）</li>\n<li>generator:必须有一个任务运行器，自动执行 Generator 函数；而且必须保证<code>yield</code>语句后面的表达式，必须返回一个 Promise</li>\n<li>async:实现最简洁</li>\n</ul>\n<hr>\n<h2 id=\"33-模块加载方案比较\"><a href=\"#33-模块加载方案比较\" class=\"headerlink\" title=\"33 模块加载方案比较\"></a>33 模块加载方案比较</h2><ul>\n<li><p>CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用。</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">CommonJS</span> 模块输出的是值的拷贝，也就是说，一旦输出一个值，模块内部的变化就影响不到这个值。<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>CommonJS 模块是运行时加载，ES6 模块是编译时输出接口。</p>\n<figure class=\"highlight elm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs elm\"><span class=\"hljs-type\">CommonJS</span> 加载的是一个对象（即`<span class=\"hljs-keyword\">module</span>.exports`属性），该对象只有在脚本运行完才会生成。而 ES6 模块不是对象，它的对外接口只是一种静态定义，在代码静态解析阶段就会生成。<br><span class=\"hljs-type\">ES6</span> 模块的运行机制与 <span class=\"hljs-type\">CommonJS</span> 不一样。<span class=\"hljs-type\">JS</span> 引擎对脚本静态分析的时候，遇到模块加载命令<span class=\"hljs-keyword\">import</span>，就会生成一个只读引用。等到脚本真正执行时，再根据这个只读引用，到被加载的那个模块里面去取值。原始值变了，<span class=\"hljs-keyword\">import</span>加载的值也会跟着变。因此，ES6 模块是动态引用，并且不会缓存值，模块里面的变量绑定其所在的模块。<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>CommonJS 模块的<code>require()</code>是同步加载模块，ES6 模块的<code>import</code>命令是异步加载，有一个独立的模块依赖的解析阶段。</p>\n<figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xquery\">默认情况下，浏览器是同步加载 JavaScript 脚本，即渲染引擎遇到<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span>标签就会停下来，等到执行完脚本，再继续向下渲染。如果是外部脚本，还必须加入脚本下载的时间。</span><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\">标签打开defer或<span class=\"hljs-keyword\">async</span>属性，脚本就会异步加载。渲染引擎遇到这一行命令，就会开始下载外部脚本，但不会等它下载和执行，而是直接执行后面的命令。<span class=\"hljs-string\">`defer`</span>是“渲染完再执行”，<span class=\"hljs-string\">`async`</span>是“下载完就执行”。</span></span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\"></span></span></span></span><br><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\">浏览器对于带有<span class=\"hljs-string\">`type=&quot;module&quot;`</span>的<span class=\"hljs-string\">`</span></span></span></span></span><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span>`，都是异步加载，不会造成堵塞浏览器，即等到整个页面渲染完，再执行模块脚本，</span></span></span><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">font</span> <span class=\"hljs-attr\">color</span>=<span class=\"hljs-string\">&#x27;orange&#x27;</span>&gt;</span>等同于打开了`</span></span></span><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"><span class=\"hljs-string\">`标签的`</span>defer<span class=\"hljs-string\">`属性。&lt;/font&gt;</span></span></span></span></span><br></code></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<h2 id=\"34-ES6-ES5继承内置类\"><a href=\"#34-ES6-ES5继承内置类\" class=\"headerlink\" title=\"34  ES6,ES5继承内置类\"></a>34  ES6,ES5继承内置类</h2><ul>\n<li><p>ES5中，这些原生构造函数是无法继承的，因为子类无法获得原生构造函数的内部属性，通过Array.apply()或者分配给原型对象都不行。原生构造函数会忽略apply方法传入的this，也就是说，原生构造函数的this无法绑定，导致拿不到内部属性。ES5 是先新建子类的实例对象this，再将父类的属性添加到子类上，由于父类的内部属性无法获取，导致无法继承原生的构造函数</p>\n</li>\n<li><p>ES6 允许继承原生构造函数定义子类，因为 ES6 是先新建父类的实例对象<code>this</code>，然后再用子类的构造函数修饰<code>this</code>，使得父类的所有行为都可以继承。</p>\n</li>\n</ul>\n<hr>\n<h1 id=\"Html-CSS\"><a href=\"#Html-CSS\" class=\"headerlink\" title=\"Html&amp;CSS\"></a>Html&amp;CSS</h1><h2 id=\"1-CSS权重及其引入方式\"><a href=\"#1-CSS权重及其引入方式\" class=\"headerlink\" title=\"1 CSS权重及其引入方式\"></a>1 CSS权重及其引入方式</h2><p>引入方式：内联式（行内），嵌入式（页内style标签)，外链式(link)，导入式(import)</p>\n<p>权重：</p>\n<ul>\n<li>内联式优先级最高；嵌入式，外链式在后面的优先级高。</li>\n<li>id优先级高于class</li>\n<li>important &gt; 内嵌样式 &gt; ID &gt; 类 &gt; 标签 | 伪类 | 属性选择 &gt; 伪对象 &gt; 继承 &gt; 通配符</li>\n</ul>\n<p>权重值：把特殊性分为4个等级，每个等级代表一类选择器，每个等级的值为其所代表的选择器的个数乘以这一等级的权值，最后把所有等级的值相加得出选择器的特殊值。</p>\n<ol>\n<li>第一等：代表内联样式，如: style&#x3D;””，权值为1000。</li>\n<li>第二等：代表ID选择器，如：#content，权值为100。</li>\n<li>第三等：代表类，伪类和属性选择器，如.content a:link :[title]，权值为10。</li>\n<li>第四等：代表类型选择器和伪元素选择器，如div p ::before，权值为1。</li>\n<li>通配符 * 没有权重，权值为0.</li>\n</ol>\n<hr>\n<h2 id=\"2-a标签全部作用\"><a href=\"#2-a标签全部作用\" class=\"headerlink\" title=\"2  a标签全部作用\"></a>2  a标签全部作用</h2><ul>\n<li>外部页面链接  <code>&lt;a href=&quot;http://www.baidu.com&quot; target=&quot;_blank&quot;&gt;百度&lt;/a&gt;</code></li>\n<li>本地页面链接 <code>&lt;a href=&quot;demo02.html&quot; target=&quot;_blank&quot;&gt;打开demo02&lt;/a&gt;</code></li>\n<li>锚点链接（页面内部区域跳转）<code>&lt;a href=&quot;#part1&quot;&gt;第1章&lt;/a&gt;</code>跳到 <code>&lt;p id=&quot;part1&quot;&gt;第1章&lt;/p&gt;</code></li>\n</ul>\n<hr>\n<h2 id=\"3-用CSS画三角形\"><a href=\"#3-用CSS画三角形\" class=\"headerlink\" title=\"3 用CSS画三角形\"></a>3 用CSS画三角形</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-id\">#demo</span> &#123;<br>            <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">0px</span>;<br>            <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">0px</span>;<br>            <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">60px</span> solid transparent;//transparent使背景透明<br>            <span class=\"hljs-attribute\">border-bottom</span>: <span class=\"hljs-number\">60px</span> solid red;<br>        &#125;<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"4-未知宽高元素水平垂直居中（方案及比较）\"><a href=\"#4-未知宽高元素水平垂直居中（方案及比较）\" class=\"headerlink\" title=\"4 未知宽高元素水平垂直居中（方案及比较）\"></a>4 未知宽高元素水平垂直居中（方案及比较）</h2><ol>\n<li><p>定位：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.father</span> &#123;<br>    <span class=\"hljs-attribute\">position</span>: relative;<br>    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">200px</span>;<br>    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">200px</span>;<br>    <span class=\"hljs-attribute\">background</span>: skyblue;<br>&#125;<br><span class=\"hljs-selector-class\">.son</span> &#123;<br>    <span class=\"hljs-attribute\">position</span>: absolute;<br>    <span class=\"hljs-attribute\">top</span>: <span class=\"hljs-number\">50%</span>;<br>    <span class=\"hljs-attribute\">left</span>: <span class=\"hljs-number\">50%</span>;<br>    <span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">translate</span>(-<span class=\"hljs-number\">50%</span>,-<span class=\"hljs-number\">50%</span>);<br>    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100px</span>;<br>    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">100px</span>;<br>    <span class=\"hljs-attribute\">background</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>flex&#x2F;grid:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.father</span> &#123;<br>    <span class=\"hljs-attribute\">display</span>: flex/grid;<br>    <span class=\"hljs-attribute\">justify-content</span>: center;<br>    <span class=\"hljs-attribute\">align-items</span>: center;<br>    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">200px</span>;<br>    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">200px</span>;<br>    <span class=\"hljs-attribute\">background</span>: skyblue;<br>&#125;<br><span class=\"hljs-selector-class\">.son</span> &#123;<br>    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100px</span>;<br>    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">100px</span>;<br>    <span class=\"hljs-attribute\">background</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>table布局</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.father</span> &#123;<br>          <span class=\"hljs-attribute\">display</span>: table-cell;<br>          <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">200px</span>;<br>          <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">200px</span>;<br>          <span class=\"hljs-attribute\">background</span>: skyblue;<br>          <span class=\"hljs-attribute\">vertical-align</span>: middle;<br>          <span class=\"hljs-attribute\">text-align</span>: center;<br>      &#125;<br>      <span class=\"hljs-selector-class\">.son</span> &#123;<br>          <span class=\"hljs-attribute\">display</span>: inline-block;<br>          <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100px</span>;<br>          <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">100px</span>;<br>          <span class=\"hljs-attribute\">background</span>: red;<br>      &#125;<br></code></pre></td></tr></table></figure></li>\n</ol>\n<hr>\n<h2 id=\"5-HTML元素划分\"><a href=\"#5-HTML元素划分\" class=\"headerlink\" title=\"5 HTML元素划分\"></a>5 HTML元素划分</h2><h3 id=\"块级元素\"><a href=\"#块级元素\" class=\"headerlink\" title=\"块级元素\"></a>块级元素</h3><p>在html中<code>div,p,h1,form,ul,li</code>就是块级元素。设置<code>display:block</code>就是将元素显示为块级元素。块级元素特点：</p>\n<ul>\n<li>每个块级元素都从新的一行开始，并且其后的元素也另起一行；（<strong>一个块级元素独占一行</strong>）</li>\n<li>元素的高度、宽度、行高以及顶和底边距都可设置；</li>\n<li>元素宽度在不设置的情况下，是它本身父容器的*100%（和父元素的宽度一致），除非设定一个宽度。</li>\n</ul>\n<h3 id=\"内联元素\"><a href=\"#内联元素\" class=\"headerlink\" title=\"内联元素\"></a>内联元素</h3><p>在html中<code>span,a,label,input,img,strong,em</code>就是典型的内联元素（行内元素）（inline）元素。当然块状元素也可以通过代码<code>display:inline</code>将元素设置为内联元素。内联元素特点：</p>\n<ul>\n<li>和其他元素都在一行上</li>\n<li>元素的高度、宽度、行高及顶部和底部边距不可设置；</li>\n<li>元素的宽度就是它包含的文字或图片的宽度，不可改变。</li>\n</ul>\n<p>注意：为 a 元素设置了宽和高，但都没有起到作用，原因是<strong>a在默认的时候是内联元素，内联元素是不可以设置宽和高的</strong>。</p>\n<h3 id=\"内联块状元素\"><a href=\"#内联块状元素\" class=\"headerlink\" title=\"内联块状元素\"></a>内联块状元素</h3><p>内联块状元素（<code>inline-block</code>）就是同时具备内联元素、块状元素的特点，代码<code>display:inline-block</code>就是将元素设置为内联块状元素。inline-block元素特点：</p>\n<ul>\n<li><strong>和其他元素都在一行上；</strong></li>\n<li><strong>元素的高度、宽度、行高以及顶和底边距都可设置</strong></li>\n</ul>\n<p><font color='orange'>注意：img是inline元素，但是他同时也是替换元素，他有着特殊的表现：</font></p>\n<ul>\n<li><strong>可以设置width&#x2F;height;</strong></li>\n<li>默认的，img元素在屏幕占据的空间与其图片的实际像素一致，除非CSS有设置或者自身的width&#x2F;height HTML 属性有设置；</li>\n<li>如果img标签的包裹元素为也为inline元素，则img的边界可以超出其直接父元素的边界，直到自己的宽、高达到最大或者设定值为止，而且文档流中img的兄弟元素也不能遮盖住img。最常见的就是a标签里面包含的img标签；</li>\n<li>所以从行为上看,img元素作为替换元素，有着类似于Inline-block的行为，尽管在SPEC里面，他的确是一个inline元素。</li>\n</ul>\n<hr>\n<h2 id=\"6-盒子模型，定位\"><a href=\"#6-盒子模型，定位\" class=\"headerlink\" title=\"6 盒子模型，定位\"></a>6 盒子模型，定位</h2><p><a href=\"https://www.runoob.com/css/css-positioning.html\">菜鸟教程</a></p>\n<hr>\n<h2 id=\"7-margin塌陷及合并问题\"><a href=\"#7-margin塌陷及合并问题\" class=\"headerlink\" title=\"7 margin塌陷及合并问题\"></a>7 margin塌陷及合并问题</h2><h3 id=\"margin塌陷\"><a href=\"#margin塌陷\" class=\"headerlink\" title=\"margin塌陷\"></a>margin塌陷</h3><p>嵌套父子块级元素垂直方向（次方向）的margin会结合到一起，并取最大的值，子元素的margin会往父元素顶部上方方向塌陷（父盒子里面没有文字，也没有边框（border），也没有padding-top ）</p>\n<p><font color='red'>解决方法</font>:</p>\n<ol>\n<li>给父级设置边框或内边距(不建议使用)</li>\n<li>触发BFC：<ul>\n<li>position:absolute&#x2F;fixed</li>\n<li>display:inline-block;</li>\n<li>float:left&#x2F;right;</li>\n<li>overflow:hidden;</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"margin合并\"><a href=\"#margin合并\" class=\"headerlink\" title=\"margin合并\"></a>margin合并</h3><p>兄弟块级元素间垂直方向的margin值会合并在一起并取最大值</p>\n<p><font color='red'>解决方法</font>:给任意一个元素加一个父级元素并触发BFC就可以将其子元素不受到外界影响，如同加了一个“顶”</p>\n<hr>\n<h2 id=\"8-display及相关属性\"><a href=\"#8-display及相关属性\" class=\"headerlink\" title=\"8 display及相关属性\"></a>8 display及相关属性</h2><p><a href=\"https://www.runoob.com/cssref/pr-class-display.html\">CSS display 属性</a></p>\n<p><a href=\"https://segmentfault.com/a/1190000015116392\">CSS中用 opacity、visibility、display 属性将 元素隐藏 的 对比分析</a></p>\n<p>![](display opacity visibility 对比.png)</p>\n<hr>\n<h2 id=\"9-IFC-与-BFC\"><a href=\"#9-IFC-与-BFC\" class=\"headerlink\" title=\"9 IFC 与 BFC\"></a>9 IFC 与 BFC</h2><p><a href=\"https://segmentfault.com/a/1190000009545742\">BFC与IFC概念理解+布局规则+形成方法+用处</a></p>\n<p><a href=\"https://segmentfault.com/a/1190000016721094?utm_source=sf-related\">深入理解BFC</a></p>\n<p>Formatting context 是 W3C CSS2.1 规范中的一个概念。<font color='orange'>它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用</font>。最常见的 Formatting context 有 Block fomatting context (简称BFC)和 Inline formatting context (简称IFC)。<strong>Block formatting context直译为”块级格式化上下文”。它是一个独立的渲染区域，只有Block-level box参与， 它规定了内部的Block-level Box如何布局，并且与这个区域外部毫不相干</strong>。<strong>通俗地讲，BFC是一个容器，用于管理块级元素。</strong></p>\n<p>触发BFC：</p>\n<ul>\n<li>float为 left|right</li>\n<li>overflow为 hidden|auto|scroll</li>\n<li>display为 table-cell|table-caption|inline-block|inline-flex|flex</li>\n<li>position为 absolute|fixed</li>\n<li>根元素</li>\n</ul>\n<p>BFC布局规则：</p>\n<ul>\n<li>内部的Box会在垂直方向，一个接一个地放置(即块级元素独占一行)。</li>\n<li>BFC的区域不会与float box重叠(<strong>利用这点可以实现自适应两栏布局</strong>)。</li>\n<li>内部的Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠(<strong>margin重叠三个条件:同属于一个BFC;相邻;块级元素</strong>)。</li>\n<li>计算BFC的高度时，浮动元素也参与计算。（清除浮动 haslayout）</li>\n<li>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</li>\n</ul>\n<hr>\n<h2 id=\"10-圣杯布局和双飞翼布局\"><a href=\"#10-圣杯布局和双飞翼布局\" class=\"headerlink\" title=\"10 圣杯布局和双飞翼布局\"></a>10 圣杯布局和双飞翼布局</h2><img src=\"圣杯和双飞翼.jpg\" style=\"zoom:50%;\" />\n\n<p><a href=\"https://juejin.cn/post/6844903568718184461#heading-1\">css布局之圣杯布局和双飞翼布局</a></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\">//圣杯布局<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&#x27;container&#x27;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;center&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;column&quot;</span>&gt;</span>center<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;left&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;column&quot;</span>&gt;</span>left<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;right&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;column&quot;</span>&gt;</span>right<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"language-css\"></span><br><span class=\"language-css\">        <span class=\"hljs-selector-id\">#container</span> &#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">200px</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">overflow</span>: hidden;</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\">        <span class=\"hljs-selector-id\">#center</span> &#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">float</span><span class=\"hljs-selector-pseudo\">:left</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100%</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">background-color</span>: lightblue;</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\">        <span class=\"hljs-selector-id\">#left</span> &#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">float</span><span class=\"hljs-selector-pseudo\">:left</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">200px</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">position</span>: relative;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">left</span>: -<span class=\"hljs-number\">200px</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">margin-left</span>: -<span class=\"hljs-number\">100%</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">background-color</span>: orange;</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\">        <span class=\"hljs-selector-id\">#right</span> &#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">float</span><span class=\"hljs-selector-pseudo\">:left</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">200px</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">position</span>: relative;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">right</span>: -<span class=\"hljs-number\">200px</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">margin-left</span>: -<span class=\"hljs-number\">200px</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">background-color</span>: orange;</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\">//双飞翼<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;header&quot;</span>&gt;</span>header<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;container&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;center&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;column&quot;</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;inner&quot;</span>&gt;</span>center<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;left&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;column&quot;</span>&gt;</span>left<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;right&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;column&quot;</span>&gt;</span>right<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;footer&quot;</span>&gt;</span>footer<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br>   <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"language-css\"></span><br><span class=\"language-css\">        <span class=\"hljs-selector-id\">#container</span> &#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">overflow</span>: hidden;</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\"></span><br><span class=\"language-css\">        <span class=\"hljs-selector-id\">#footer</span>,</span><br><span class=\"language-css\">        <span class=\"hljs-selector-id\">#header</span> &#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">background-color</span>: dimgrey;</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\"></span><br><span class=\"language-css\">        <span class=\"hljs-selector-class\">.column</span> &#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">float</span>: left;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">60vh</span>;</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\"></span><br><span class=\"language-css\">        <span class=\"hljs-selector-id\">#center</span> &#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100%</span>;</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\"></span><br><span class=\"language-css\">        <span class=\"hljs-selector-id\">#inner</span> &#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">100%</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">200px</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">background</span>: lightgrey;</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\"></span><br><span class=\"language-css\">        <span class=\"hljs-selector-id\">#left</span> &#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">200px</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">margin-left</span>: -<span class=\"hljs-number\">100%</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">background-color</span>: lightblue;</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\"></span><br><span class=\"language-css\">        <span class=\"hljs-selector-id\">#right</span> &#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">200px</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">margin-left</span>: -<span class=\"hljs-number\">200px</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">background-color</span>: orange;</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\">    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"11-flex-布局\"><a href=\"#11-flex-布局\" class=\"headerlink\" title=\"11 flex 布局\"></a>11 flex 布局</h2><p><a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\">Flex 布局教程</a></p>\n<hr>\n<h2 id=\"12-px-em-rem-区别\"><a href=\"#12-px-em-rem-区别\" class=\"headerlink\" title=\"12 px,em,rem 区别\"></a>12 px,em,rem 区别</h2><p><a href=\"https://www.jianshu.com/p/a0bdd3e9133d\">响应式Web 设计—px-em-rem三者区别及rem的使用</a></p>\n<hr>\n<h2 id=\"13-css预处理语言\"><a href=\"#13-css预处理语言\" class=\"headerlink\" title=\"13 css预处理语言\"></a>13 css预处理语言</h2><p>CSS 预处理器是一个能让你通过预处理器自己独有的语法来生成CSS的程序。</p>\n<p>其基本思想是：<strong>用一种专门的编程语言，为CSS增加了一些编程的特性</strong>，将CSS作为目标生成文件，然后开发者就只要使用这种语言进行编码工作。</p>\n<p>通俗的说，<strong>CSS预处理器用一种专门的编程语言，进行Web页面样式设计，然后再编译成正常的CSS文件</strong>，以供项目使用。</p>\n<ul>\n<li><a href=\"http://sass-lang.com/\">Sass</a></li>\n<li><a href=\"https://less.bootcss.com/\">LESS</a></li>\n</ul>\n<hr>\n<h2 id=\"14-媒体查询\"><a href=\"#14-媒体查询\" class=\"headerlink\" title=\"14 媒体查询\"></a>14 媒体查询</h2><p>css中使用@media,可以针对不同的媒体类型定义不同的样式.<br>@media 可以针对不同的屏幕尺寸设置不同的样式，特别是如果需要设置设计响应式的页面，@media 是非常有用的</p>\n<p><a href=\"https://houdunren.gitee.io/note/css/15%20%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2.html\">媒体查询</a></p>\n<hr>\n<h2 id=\"15-H5语义化标签\"><a href=\"#15-H5语义化标签\" class=\"headerlink\" title=\"15 H5语义化标签\"></a>15 H5语义化标签</h2><ul>\n<li>header</li>\n<li>nav</li>\n<li>article</li>\n<li>section</li>\n<li>aside</li>\n<li>footer</li>\n</ul>\n<p>作用：</p>\n<ul>\n<li>比<code>&lt;div&gt;</code>标签有更加丰富的含义，使文档结构清晰，方便开发与维护</li>\n<li>搜索引擎能更方便的识别页面的每个部分</li>\n<li>方便其他设备解析（如移动设备、盲人阅读器等）</li>\n</ul>\n<p><a href=\"https://segmentfault.com/a/1190000013901244\">H5语义化标签</a></p>\n<hr>\n<h2 id=\"16-Web-Worker和Web-Socket\"><a href=\"#16-Web-Worker和Web-Socket\" class=\"headerlink\" title=\"16 Web Worker和Web Socket\"></a>16 Web Worker和Web Socket</h2><h3 id=\"Web-Worker\"><a href=\"#Web-Worker\" class=\"headerlink\" title=\"Web Worker\"></a>Web Worker</h3><p>H5中提供了一个JavaScript多线程解决方案，Web Worker是H5中的工作线程，是运行在后台的JavaScript,它能够独立于其他的脚本<br>当 Web Worker工作时，不会影响页面的性能，用户依然可以进行点击，选取等操作</p>\n<p>调用 Web Worker 时，需要将单独执行的 JavaScript 代码放到一个独立的JS文件内，然后在页面内调用Worker构造函数来创建一个线程，参数是文件路径。<br><code>let worker = new Worker(&#39;worker.js&#39;)</code></p>\n<p><font color='orange'>因为Worker不能影响页面性能，所以Worker 中执行的代码不能访问页面或窗口对象</font>，通过onmessage获取后台信息，postMessage向后台发送信息</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//监听消息</span><br>worker.<span class=\"hljs-property\">onmessage</span>=<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>)&#123;&#125;<br><span class=\"hljs-comment\">//发送消息</span><br>worker.<span class=\"hljs-title function_\">postMessage</span>(data)<br><span class=\"hljs-comment\">//停止Worker</span><br>worker.<span class=\"hljs-title function_\">terminate</span>()<br><span class=\"hljs-comment\">//或者worker内部调用close方法</span><br><span class=\"hljs-title function_\">close</span>()<br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Web-Socket\"><a href=\"#Web-Socket\" class=\"headerlink\" title=\"Web Socket\"></a>Web Socket</h3><p>在浏览器服务器之间建立一个双向通道，后台可以随时向前端推送消息，允许跨域</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">let</span> ws = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">WebSocket</span>(<span class=\"hljs-string\">&#x27;ws://localhost:8080&#x27;</span>);<br>ws.<span class=\"hljs-title function_\">send</span>(data);<br>ws.<span class=\"hljs-property\">onopen</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;&#125;;<br>ws.<span class=\"hljs-property\">onmessage</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">msg</span>)&#123;&#125;;<br>ws.<span class=\"hljs-property\">onclose</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;&#125;<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"17-CSS3-动画\"><a href=\"#17-CSS3-动画\" class=\"headerlink\" title=\"17 CSS3 动画\"></a>17 CSS3 动画</h2><ul>\n<li>transition</li>\n<li>animation</li>\n</ul>\n<p><a href=\"https://www.runoob.com/css3/css3-animations.html\">css3动画</a></p>\n<hr>\n<h2 id=\"18-如何实现响应式布局\"><a href=\"#18-如何实现响应式布局\" class=\"headerlink\" title=\"18 如何实现响应式布局\"></a>18 如何实现响应式布局</h2><ul>\n<li>媒体查询</li>\n<li>rem布局</li>\n<li>视口单位</li>\n<li>百分比布局</li>\n<li>flex ,grid 等方案</li>\n</ul>\n<p><a href=\"https://juejin.cn/post/6844903814332432397#heading-13\">前端响应式布局原理与方案</a></p>\n<hr>\n<h2 id=\"19-SEO的概念及实现\"><a href=\"#19-SEO的概念及实现\" class=\"headerlink\" title=\"19 SEO的概念及实现\"></a>19 SEO的概念及实现</h2><p>搜索引擎优化：使用特定的技术使得网站的各种关键词排名提升到搜索引擎的理想位置，从搜索引擎中获得更多的免费流量，以及更好地展现网站形象。</p>\n<p>优化方案：</p>\n<ul>\n<li>设置合理的title、description、keywords</li>\n<li>重要的关键词不要超过2次，而且要靠前，不同页面的title要不同</li>\n<li>使用语义化的html代码，符合w3c规范，语义化代码让搜索引擎容易理解网页</li>\n<li>重要的内容放在html代码最前，搜索引擎抓取页面是自上而下的，有的搜索引擎对抓取的长度有限制</li>\n<li>重要的内容不要通过JS输出，搜索引擎不会执行JS获取内容</li>\n<li>少用iframe，搜索引擎不会抓取iframe</li>\n<li>非装饰性图片必须加上alt</li>\n<li><font color='orangered'>服务端使用模板引擎渲染</font></li>\n</ul>\n<hr>\n<h2 id=\"20-H5新特性\"><a href=\"#20-H5新特性\" class=\"headerlink\" title=\"20 H5新特性\"></a>20 H5新特性</h2><h3 id=\"语义化标签\"><a href=\"#语义化标签\" class=\"headerlink\" title=\"语义化标签\"></a>语义化标签</h3><p>结构元素：article、aside、header、hgroup、footer、figure、section、nav</p>\n<p>其他元素：video、audio、canvas、embed、mark、progress、meter、time、command、details、datagrid、keygen、output、source、menu、ruby、wbr、bdi、dialog、</p>\n<h3 id=\"新增API\"><a href=\"#新增API\" class=\"headerlink\" title=\"新增API\"></a>新增API</h3><ul>\n<li><p>canvas</p>\n</li>\n<li><p>svg</p>\n</li>\n<li><p>audio&#x2F;video</p>\n</li>\n<li><p>Geolocation 定位<code>navigator.geolocation.getCurrentLocation(onSuccess,onError,options)</code></p>\n</li>\n<li><p>Communication：跨文档消息通信，可以确保iframe、标签页、窗口间安全地进行跨源通信。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">postMessage</span>(msg,url);<br><span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;message&#x27;</span>,<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>)&#123;&#125;)<br></code></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>XMLHttpRequest Level2：改进了跨源XMLHttpRequest和进度事件，XMLHttpRequest Level2通过CORS实现了跨源XMLHttpRequest。跨源HTTP请求包含一个Origin头部，它为服务器提供HTTP请求的源信息。</p>\n</li>\n<li><p>WebSockets：要连接远程主机，只需新建一个WebSocket实例，提供希望连接的对端URL。</p>\n</li>\n<li><p>Forms：新表单元素tel、email、url、search、range、number 未来的表单元素color、datetime、datetime-local、time、date、week、month</p>\n</li>\n<li><p>新表单特性和函数：placeholder、autocomplete、autofocus、spellcheck、list特性、datalist元素、min和max、step、required</p>\n</li>\n<li><p>拖放API：draggable属性、拖放事件(dragstart、drag、dragenter、dragleave、dragover、drap、dragend)、dataTransfer对象</p>\n</li>\n<li><p>Web Workers API：Web Workers可以让Web应用程序具备后台处理能力，对多线程的支持性非常好。但是在Web Workers中执行的脚本不能访问该页面的window对象，也就是Web Workers不能直接访问Web页面和DOM API。虽然Web Workers不会导致浏览器UI停止响应，但是仍然会消耗CPU周期，导致系统反应速度变慢。</p>\n</li>\n<li><p>Web Storage API：sessionStorage(保存在session中，浏览器关闭，数据消失)、localStorage(保存在客户端本地，除非手动删除，否则一直保存)</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"21-css3新特性（大概）\"><a href=\"#21-css3新特性（大概）\" class=\"headerlink\" title=\"21 css3新特性（大概）\"></a>21 css3新特性（大概）</h2><ul>\n<li>圆角（border-radius） </li>\n<li>阴影（box-shadow）</li>\n<li>过渡效果（transition）</li>\n<li>翻转（transform）</li>\n<li>动画（animation）</li>\n<li>媒体查询（@media）</li>\n<li>弹性盒子（flex）</li>\n</ul>\n<hr>\n<h1 id=\"计算机网络和HTTP\"><a href=\"#计算机网络和HTTP\" class=\"headerlink\" title=\"计算机网络和HTTP\"></a>计算机网络和HTTP</h1><h2 id=\"1-HTTP报文\"><a href=\"#1-HTTP报文\" class=\"headerlink\" title=\"1 HTTP报文\"></a>1 HTTP报文</h2><p>用于HTTP协议交互的信息称为HTTP报文。请求端的叫请求报文，响应端的叫响应报文。<font color='orange'>HTTP报文本身是由多行数据构成的字符串文本</font></p>\n<p>HTTP报文大致可分为报文首部和报文主体，报文主体是可选项。</p>\n<p><br/><br/></p>\n<p>HTTP报文结构：</p>\n<img src=\"HTTP报文结构.jpg\"/>\n\n<p><br/><br/>请求报文和响应报文结构：</p>\n<img src=\"请求报文和响应报文.jpg\"/>\n\n<p><br/><br/>请求报文和响应报文实例：</p>\n<img src=\"报文实例.jpg\"/>\n\n<hr>\n<h2 id=\"2-HTTP建立持久连接的意义\"><a href=\"#2-HTTP建立持久连接的意义\" class=\"headerlink\" title=\"2 HTTP建立持久连接的意义\"></a>2 HTTP建立持久连接的意义</h2><p>HTTP协议初始版本中，每进行一次通信就要断开一次TCP连接，这在一个页面内可能发生多个TCP连接中断，增加了通信开销。</p>\n<img src=\"HTTP非持久化.jpg\" style=\"zoom:80%;\" />\n\n<p>HTTP持久连接：只要任意一端没有明确提出断开连接，则保持TCP连接状态。<font color='orange'>持久化连接旨在建立一次TCP请求后进行多次HTTP请求和响应 的交互。减少多次TCP的开销，使HTTP请求尽快结束</font>&gt;</p>\n<img src=\"20201116121851148.png\"/>\n\n<hr>\n<h2 id=\"3-HTTP首部字段\"><a href=\"#3-HTTP首部字段\" class=\"headerlink\" title=\"3 HTTP首部字段\"></a>3 HTTP首部字段</h2><img src=\"请求报文和响应报文.jpg\"/>\n\n<h3 id=\"通用首部字段\"><a href=\"#通用首部字段\" class=\"headerlink\" title=\"通用首部字段\"></a>通用首部字段</h3><img src=\"通用首部字段.bmp\"/>\n\n<h3 id=\"请求首部字段\"><a href=\"#请求首部字段\" class=\"headerlink\" title=\"请求首部字段\"></a>请求首部字段</h3><img src=\"请求首部字段.bmp\"/>\n\n<h3 id=\"响应首部字段\"><a href=\"#响应首部字段\" class=\"headerlink\" title=\"响应首部字段\"></a>响应首部字段</h3><img src=\"响应首部字段.bmp\"/>\n\n<h3 id=\"实体首部字段\"><a href=\"#实体首部字段\" class=\"headerlink\" title=\"实体首部字段\"></a>实体首部字段</h3><img src=\"实体首部字段.bmp\"/>\n\n<h3 id=\"为cookie服务的首部字段\"><a href=\"#为cookie服务的首部字段\" class=\"headerlink\" title=\"为cookie服务的首部字段\"></a>为cookie服务的首部字段</h3><img src=\"cookie字段.bmp\"/>\n\n<hr>\n<h2 id=\"14-浏览器缓存机制\"><a href=\"#14-浏览器缓存机制\" class=\"headerlink\" title=\"14 浏览器缓存机制\"></a>14 浏览器缓存机制</h2><p><a href=\"https://juejin.cn/post/6844903593275817998#heading-3\">彻底理解浏览器的缓存机制</a></p>\n<p><a href=\"https://www.jiqizhixin.com/articles/2020-07-24-12\">彻底弄懂浏览器缓存策略</a></p>\n<h3 id=\"强缓存-Cache-Control-与-Expires\"><a href=\"#强缓存-Cache-Control-与-Expires\" class=\"headerlink\" title=\"强缓存 Cache-Control 与 Expires\"></a>强缓存 Cache-Control 与 Expires</h3><p><strong>Cache-Control（通用首部字段）</strong></p>\n<p>在HTTP&#x2F;1.1中，Cache-Control是最重要的规则，主要用于控制网页缓存，主要取值为：</p>\n<ul>\n<li>public：所有内容都将被缓存（客户端和代理服务器都可缓存）</li>\n<li>private：所有内容只有客户端可以缓存，Cache-Control的默认取值</li>\n<li>no-cache：客户端缓存内容，但是是否使用缓存则需要经过协商缓存来验证决定</li>\n<li>no-store：所有内容都不会被缓存，即不使用强制缓存，也不使用协商缓存</li>\n<li>max-age&#x3D;xxx (xxx is numeric)：缓存内容将在xxx秒后失效</li>\n</ul>\n<p>请求指令</p>\n<img src=\"缓存请求指令.png\"/>\n\n<p>响应指令</p>\n<img src=\"缓存响应指令.png\"/>\n\n<p><strong>Expires（实体首部字段）</strong></p>\n<p>Expires是HTTP&#x2F;1.0控制网页缓存的字段，其值为服务器返回该请求结果缓存的到期时间，即再次发起该请求时，如果客户端的时间小于Expires的值时，直接使用缓存结果。<br>Cache-Control 有指定 max-age 时，优先处理 max-age。</p>\n<img src=\"Expires.png\"/>\n\n<h3 id=\"协商缓存与强缓存\"><a href=\"#协商缓存与强缓存\" class=\"headerlink\" title=\"协商缓存与强缓存\"></a>协商缓存与强缓存</h3><img src=\"640.png\" style=\"zoom: 50%;\" />\n\n<img src=\"浏览器缓存.png\" style=\"zoom:80%;\" />\n\n\n\n<h2 id=\"4-HTTP方法，状态码\"><a href=\"#4-HTTP方法，状态码\" class=\"headerlink\" title=\"4 HTTP方法，状态码\"></a>4 HTTP方法，状态码</h2><img src=\"http方法.bmp\"/>\n\n<img src=\"http状态码.bmp\"/>\n\n<hr>\n<h2 id=\"5-HTTP和HTTPS\"><a href=\"#5-HTTP和HTTPS\" class=\"headerlink\" title=\"5 HTTP和HTTPS\"></a>5 HTTP和HTTPS</h2><p><a href=\"https://www.runoob.com/w3cnote/http-vs-https.html\">HTTP 与 HTTPS 的区别</a></p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html\">SSL&#x2F;TLS协议运行机制的概述</a></p>\n<p><a href=\"https://www.zhihu.com/tardis/zm/art/72616216?source_id=1003\">十分钟搞懂HTTP和HTTPS协议</a></p>\n<p>http缺点：</p>\n<ul>\n<li>窃听风险</li>\n<li>冒充风险（需要第三方颁发证书）</li>\n<li>篡改风险</li>\n</ul>\n<p><font color='orange'>HTTP+加密+证书+校验机制&#x3D;HTTPS</font></p>\n<p>HTTPS并不是新协议，只是HTTP通信接口部分用SSL&#x2F;TLS协议代替。HTTP先和SSL通信，再由SSL和TCP通信。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-number\">1994</span><span class=\"hljs-string\">年，NetScape公司设计了SSL协议（Secure</span> <span class=\"hljs-string\">Sockets</span> <span class=\"hljs-string\">Layer）的1.0版，但是未发布。</span><br><span class=\"hljs-number\">1995</span><span class=\"hljs-string\">年，NetScape公司发布SSL</span> <span class=\"hljs-number\">2.0</span><span class=\"hljs-string\">版，很快发现有严重漏洞。</span><br><span class=\"hljs-number\">1996</span><span class=\"hljs-string\">年，SSL</span> <span class=\"hljs-number\">3.0</span><span class=\"hljs-string\">版问世，得到大规模应用。</span><br><span class=\"hljs-number\">1999</span><span class=\"hljs-string\">年，互联网标准化组织ISOC接替NetScape公司，发布了SSL的升级版TLS</span> <span class=\"hljs-number\">1.0</span><span class=\"hljs-string\">版。</span><br><span class=\"hljs-number\">2006</span><span class=\"hljs-string\">年和2008年，TLS进行了两次升级，分别为TLS</span> <span class=\"hljs-number\">1.1</span><span class=\"hljs-string\">版和TLS</span> <span class=\"hljs-number\">1.2</span><span class=\"hljs-string\">版。最新的变动是2011年TLS</span> <span class=\"hljs-number\">1.2</span><span class=\"hljs-string\">的修订版。</span><br><br><span class=\"hljs-string\">目前，应用最广泛的是TLS</span> <span class=\"hljs-number\">1.0</span><span class=\"hljs-string\">，接下来是SSL</span> <span class=\"hljs-number\">3.0</span><span class=\"hljs-string\">。但是，主流浏览器都已经实现了TLS</span> <span class=\"hljs-number\">1.2</span><span class=\"hljs-string\">的支持。</span><br><span class=\"hljs-string\">TLS</span> <span class=\"hljs-number\">1.0</span><span class=\"hljs-string\">通常被标示为SSL</span> <span class=\"hljs-number\">3.1</span><span class=\"hljs-string\">，TLS</span> <span class=\"hljs-number\">1.1</span><span class=\"hljs-string\">为SSL</span> <span class=\"hljs-number\">3.2</span><span class=\"hljs-string\">，TLS</span> <span class=\"hljs-number\">1.2</span><span class=\"hljs-string\">为SSL</span> <span class=\"hljs-number\">3.3</span><span class=\"hljs-string\">。</span><br></code></pre></td></tr></table></figure>\n\n<img src=\"https.jpg\" style=\"zoom:67%;\" />\n\n<p>SSL&#x2F;TLS协议的基本过程是这样的：</p>\n<ol>\n<li>客户端向服务器端索要并验证公钥。</li>\n<li>双方协商生成”对话密钥”。</li>\n<li>双方采用”对话密钥”进行加密通信（普通HTTP，但用 “会话秘钥” 加密）。</li>\n</ol>\n<img src=\"https-intro.png\" style=\"zoom: 80%;\" />\n\n<hr>\n<h2 id=\"6-HTTP追加\"><a href=\"#6-HTTP追加\" class=\"headerlink\" title=\"6 HTTP追加\"></a>6 HTTP追加</h2><h3 id=\"SPDY\"><a href=\"#SPDY\" class=\"headerlink\" title=\"SPDY\"></a>SPDY</h3><ul>\n<li>多路复用（一个TCP连接多个HTTP请求）</li>\n<li>赋予请求优先级</li>\n<li>压缩HTTP首部</li>\n<li>支付服务器向客户端推送</li>\n</ul>\n<h3 id=\"WebSocket\"><a href=\"#WebSocket\" class=\"headerlink\" title=\"WebSocket\"></a>WebSocket</h3><h3 id=\"HTTP-2-0\"><a href=\"#HTTP-2-0\" class=\"headerlink\" title=\"HTTP  2.0\"></a>HTTP  2.0</h3><p>主要特性同SPDY</p>\n<hr>\n<h2 id=\"7-WEB攻击\"><a href=\"#7-WEB攻击\" class=\"headerlink\" title=\"7 WEB攻击\"></a>7 WEB攻击</h2><p>见PDF</p>\n<hr>\n<h2 id=\"8-TCP-IP协议分层管理\"><a href=\"#8-TCP-IP协议分层管理\" class=\"headerlink\" title=\"8 TCP&#x2F;IP协议分层管理\"></a>8 TCP&#x2F;IP协议分层管理</h2><p>应用层：向用户提供应用服务时通信的活动。HTTP,DNS,FTP</p>\n<p>传输层：提供处于网络连接中的两台计算机之间的数据传输。TCP，UDP</p>\n<p>网络层：网络层用来处理在网络上流动的数据包。IP</p>\n<p>网络接口层：对实际的网络媒体的管理。设备驱动，网络接口卡</p>\n<hr>\n<h2 id=\"9-Get-Post-区别\"><a href=\"#9-Get-Post-区别\" class=\"headerlink\" title=\"9 Get Post 区别\"></a>9 Get Post 区别</h2><ul>\n<li>请求参数：GET请求参数是通过URL传递的，多个参数以&amp;连接，POST请求放在request body中。</li>\n<li>请求缓存：GET请求会被缓存，而POST请求不会，除非手动设置。</li>\n<li>收藏为书签：GET请求支持，POST请求不支持。</li>\n<li>安全性：POST比GET安全，GET请求在浏览器回退时是无害的，而POST会再次请求。</li>\n<li>历史记录：GET请求参数会被完整保留在浏览历史记录里，而POST中的参数不会被保留。</li>\n<li>编码方式：GET请求只能进行url编码，而POST支持多种编码方式。</li>\n<li>对参数的数据类型：GET只接受ASCII字符，而POST没有限制。</li>\n</ul>\n<hr>\n<h2 id=\"10-web服务器及其组成\"><a href=\"#10-web服务器及其组成\" class=\"headerlink\" title=\"10 web服务器及其组成\"></a>10 web服务器及其组成</h2><ul>\n<li>Apache</li>\n<li>IIS</li>\n<li>Nginx</li>\n</ul>\n<p>webserver 基本由这些组成:</p>\n<ul>\n<li>绑定TCP端口，监听客户端（浏览器）请求</li>\n<li>处理客户端（浏览器）请求</li>\n<li>响应客户端（浏览器）请求</li>\n</ul>\n<hr>\n<h2 id=\"11-TCP和UDP区别\"><a href=\"#11-TCP和UDP区别\" class=\"headerlink\" title=\"11 TCP和UDP区别\"></a>11 TCP和UDP区别</h2><ol>\n<li>TCP是面向连接的，udp是无连接的即发送数据前不需要先建立链接。</li>\n<li>TCP提供可靠的服务。也就是说，通过TCP连接传送的数据，无差错，不丢失，不重复，且按序到达;UDP尽最大努力交付，即不保证可靠交付。 </li>\n<li>TCP是面向字节流，UDP面向报文。</li>\n<li>TCP只能是1对1的，UDP支持1对1,1对多。</li>\n<li>TCP的首部较大为20字节，而UDP只有8字节。</li>\n</ol>\n<img src=\"tcp udp的应用.png\" style=\"zoom: 67%;\" />\n\n<hr>\n<h2 id=\"12-cookie-session-sessionStorage-localStorage\"><a href=\"#12-cookie-session-sessionStorage-localStorage\" class=\"headerlink\" title=\"12 cookie session sessionStorage localStorage\"></a>12 cookie session sessionStorage localStorage</h2><h3 id=\"cookie\"><a href=\"#cookie\" class=\"headerlink\" title=\"cookie\"></a>cookie</h3><p>HTTP Cookie 是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。通常，它用于告知服务端两个请求是否来自同一浏览器，如保持用户的登录状态。Cookie 使基于无状态的 HTTP 协议记录稳定的状态信息成为了可能。</p>\n<p>Cookie 主要用于以下三个方面：</p>\n<p>会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息）<br>个性化设置（如用户自定义设置、主题等）<br>浏览器行为跟踪（如跟踪分析用户行为等）</p>\n<h3 id=\"session\"><a href=\"#session\" class=\"headerlink\" title=\"session\"></a>session</h3><p>Session 代表着服务器和客户端一次会话的过程。Session 对象存储特定用户会话所需的属性及配置信息。这样，当用户在应用程序的 Web 页之间跳转时，存储在 Session 对象中的变量将不会丢失，而是在整个用户会话中一直存在下去。当客户端关闭会话，或者 Session 超时失效时会话结束。</p>\n<h3 id=\"cookie-session-区别联系\"><a href=\"#cookie-session-区别联系\" class=\"headerlink\" title=\"cookie session 区别联系\"></a>cookie session 区别联系</h3><p>关系：</p>\n<p>用户第一次请求服务器的时候，服务器根据用户提交的相关信息，创建创建对应的 Session ，请求返回时将此 Session 的唯一标识信息 SessionID 返回给浏览器，浏览器接收到服务器返回的 SessionID 信息后，会将此信息存入到 Cookie 中，同时 Cookie 记录此 SessionID 属于哪个域名。</p>\n<p>当用户第二次访问服务器的时候，请求会自动判断此域名下是否存在 Cookie 信息，如果存在自动将 Cookie 信息也发送给服务端，服务端会从 Cookie 中获取 SessionID，再根据 SessionID 查找对应的 Session 信息，如果没有找到说明用户没有登录或者登录失效，如果找到 Session 证明用户已经登录可执行后面操作。</p>\n<p>根据以上流程可知，SessionID 是连接 Cookie 和 Session 的一道桥梁，大部分系统也是根据此原理来验证用户登录状态</p>\n<img src=\"cookie session.jpg\" style=\"zoom:150%;\" />\n\n<p>区别：</p>\n<ul>\n<li>作用范围不同，Cookie 保存在客户端（浏览器），Session 保存在服务器端。</li>\n<li>存取方式的不同，Cookie 只能保存 ASCII，Session 可以存任意数据类型，一般情况下我们可以在 Session 中保持一些常用变量信息，比如说 UserId 等。</li>\n<li>有效期不同，Cookie 可设置为长时间保持，比如我们经常使用的默认登录功能，Session 一般失效时间较短，客户端关闭或者 Session 超时都会失效。</li>\n<li>隐私策略不同，Cookie 存储在客户端，比较容易遭到不法获取；Session 存储在服务端，安全性相对 Cookie 要好一些。</li>\n<li>存储大小不同， 单个 Cookie 保存的数据不能超过 4K，Session 可存储数据远高于 Cookie。</li>\n</ul>\n<h3 id=\"localStorage和sessionStorage\"><a href=\"#localStorage和sessionStorage\" class=\"headerlink\" title=\"localStorage和sessionStorage\"></a>localStorage和sessionStorage</h3><p>本地5MB存储，与HTTP无关，不与服务器通信，采取同源策略</p>\n<p>localStorage生命周期是永久的，除非被清除。sessionStorage尽在当前会话有效，关闭页面或浏览器后数据消失</p>\n<hr>\n<h2 id=\"13-TCP三次握手四次挥手\"><a href=\"#13-TCP三次握手四次挥手\" class=\"headerlink\" title=\"13 TCP三次握手四次挥手\"></a>13 TCP三次握手四次挥手</h2><figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">3</span>次握手：<span class=\"hljs-number\">1</span>、听得到吗？<span class=\"hljs-number\">2</span>、听得到，你呢？<span class=\"hljs-number\">3</span>、我也听到了。开始对话 <br><span class=\"hljs-attribute\">4</span>次挥手：<span class=\"hljs-number\">1</span>、老师，下课了。<span class=\"hljs-number\">2</span>、好，我知道了，我说完这点。<span class=\"hljs-number\">3</span>、好了，说完了，下课吧。<span class=\"hljs-number\">4</span>、谢谢老师，老师再见<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"TCP三次握手\"><a href=\"#TCP三次握手\" class=\"headerlink\" title=\"TCP三次握手\"></a>TCP三次握手</h3><ol>\n<li><p>第一次握手：TCP客户进程向服务器发出连接请求报文，报文首部中的同步位SYN&#x3D;1，同时选择一个初始序列号 seq&#x3D;x ，此时，TCP客户端进程进入了 SYN-SENT（同步已发送状态）状态</p>\n</li>\n<li><p>第二次握手：TCP服务器发出确认报文。确认报文中应该 ACK&#x3D;1，SYN&#x3D;1，确认号是ack&#x3D;x+1，同时也要为自己初始化一个序列号 seq&#x3D;y，此时，TCP服务器进程进入了SYN-RCVD（同步收到）状态</p>\n</li>\n<li><p>第三次握手：TCP客户进程收到确认后，还要向服务器给出确认。确认报文的ACK&#x3D;1，ack&#x3D;y+1，自己的序列号seq&#x3D;x+1。服务器收到并确认，Client和Server进入ESTABLISHED状态，完成三次握手，随后Client和Server就可以开始传输数据。</p>\n<p><font color='red'>三次握手原因</font>:一句话，主要防止已经失效的连接请求报文突然又传送到了服务器，从而产生错误。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs\">如果使用的是两次握手建立连接，假设有这样一种场景，客户端发送了第一个请求连接并且没有丢失，只是因为在网络结点中滞留的时间太长了，由于TCP的客户端迟迟没有收到确认报文，以为服务器没有收到，此时重新向服务器发送这条报文，此后客户端和服务器经过两次握手完成连接，传输数据，然后关闭连接。此时此前滞留的那一次请求连接，网络通畅了到达了服务器，这个报文本该是失效的，但是，两次握手的机制将会让客户端和服务器再次建立连接，这将导致不必要的错误和资源的浪费。<br><br>如果采用的是三次握手，就算是那一次失效的报文传送过来了，服务端接受到了那条失效报文并且回复了确认报文，但是客户端不会再次发出确认。由于服务器收不到确认，就知道客户端并没有请求连接。<br></code></pre></td></tr></table></figure></li>\n</ol>\n<img src=\"tcp三次握手.jpg\" style=\"zoom: 67%;\" />\n\n<h3 id=\"四次挥手\"><a href=\"#四次挥手\" class=\"headerlink\" title=\"四次挥手\"></a>四次挥手</h3><ol>\n<li>客户端进程发出连接释放报文，并且停止发送数据。FIN&#x3D;1，其序列号为seq&#x3D;u，客户端进入FIN-WAIT-1（终止等待1）状态</li>\n<li>服务器收到连接释放报文，发出确认报文，ACK&#x3D;1，ack&#x3D;u+1，并且带上自己的序列号seq&#x3D;v，此时，服务端就进入了CLOSE-WAIT（关闭等待）状态，客户端收到确认后，进入FIN-WAIT-2（终止等待2）状态</li>\n<li>服务器将最后的数据发送完毕后，就向客户端发送连接释放报文，FIN&#x3D;1，ack&#x3D;u+1，假定此时的序列号为seq&#x3D;w，此时，服务器就进入了LAST-ACK（最后确认）状态，等待客户端的确认</li>\n<li>客户端收到服务器的连接释放报文后，必须发出确认，ACK&#x3D;1，ack&#x3D;w+1，而自己的序列号是seq&#x3D;u+1，此时，客户端就进入了TIME-WAIT（时间等待）状态</li>\n<li>服务器只要收到了客户端发出的确认，立即进入CLOSED状态，客户端最后还要等待2MSL</li>\n</ol>\n<img src=\"tcp四次挥手.png\" style=\"zoom:67%;\" />\n\n<p><font color='orangeRed'>为什么客户端最后还要等待2MSL？</font></p>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs x86asm\">MSL（Maximum <span class=\"hljs-meta\">Segment</span> Lifetime），TCP允许不同的实现可以设置不同的MSL值。<br><br>第一，保证客户端发送的最后一个ACK报文能够到达服务器，因为这个ACK报文可能丢失，服务器会重传FIN+ACK报文，而客户端就能在这个2MSL时间段内收到这个重传的报文，接着给出回应报文，并且会重启2MSL计时器。<br><br>第二，防止类似与“三次握手”中提到了的“已经失效的连接请求报文段”出现在本连接中。客户端发送完最后一个确认报文后，在这个2MSL时间中，就可以使本连接持续的时间内所产生的所有报文段都从网络中消失。这样新的连接中不会出现旧连接的请求报文。<br><br></code></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"React\"><a href=\"#React\" class=\"headerlink\" title=\"React\"></a>React</h1><h2 id=\"1-特点\"><a href=\"#1-特点\" class=\"headerlink\" title=\"1 特点\"></a>1 特点</h2><ol>\n<li>声明式设计。采用声明规范，用ReactDOM.render()来声明</li>\n<li>高效：虚拟DOM。</li>\n<li>灵活：可以与已知的框架或库很好的配合。</li>\n<li>JSX语法。</li>\n<li>组件：构建组件，使代码更容易得到复用，能够很好地应用在大项目的开发中。</li>\n<li>单向响应的数据流：组件不会改变props。它们只会监听props的变化，当props发生变化时它们会使用接收到的新值，而不是去修改已有的值。</li>\n</ol>\n<hr>\n<h2 id=\"2-虚拟DOM-DIFF算法\"><a href=\"#2-虚拟DOM-DIFF算法\" class=\"headerlink\" title=\"2 虚拟DOM DIFF算法\"></a>2 虚拟DOM DIFF算法</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;text&quot;</span>&gt;</span>hello world!!!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">&#123;<br>  <span class=\"hljs-attr\">tag</span>: <span class=\"hljs-string\">&#x27;div&#x27;</span>,<br>  <span class=\"hljs-attr\">props</span>: &#123;<br>    <span class=\"hljs-attr\">id</span>: <span class=\"hljs-string\">&#x27;app&#x27;</span><br>  &#125;,<br>  <span class=\"hljs-attr\">chidren</span>: [<br>    &#123;<br>      <span class=\"hljs-attr\">tag</span>: <span class=\"hljs-string\">&#x27;p&#x27;</span>,<br>      <span class=\"hljs-attr\">props</span>: &#123;<br>        <span class=\"hljs-attr\">className</span>: <span class=\"hljs-string\">&#x27;text&#x27;</span><br>      &#125;,<br>      <span class=\"hljs-attr\">chidren</span>: [<br>        <span class=\"hljs-string\">&#x27;hello world!!!&#x27;</span><br>      ]<br>    &#125;<br>  ]<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<p>虚拟DOM就是一个JS对象，DOM操作很耗性能，比较JS对象节约了性能。</p>\n<p>react中减少了真实DOM的创建，对比。取而代之操作JS对象，实现了性能飞跃</p>\n<p>JSX  &#x3D;&gt; createElement &#x3D;&gt; JS对象（虚拟DOM） &#x3D;&gt; render &#x3D;&gt; 真实DOM</p>\n<p><a href=\"https://hustyichi.github.io/2020/09/16/vdom/\">DIFF算法</a></p>\n<hr>\n<h2 id=\"3-生命周期\"><a href=\"#3-生命周期\" class=\"headerlink\" title=\"3 生命周期\"></a>3 生命周期</h2><img src=\"生命周期.webp\"  />\n\n<img src=\"生命周期2.bmp\" style=\"zoom:80%;\" />\n\n<hr>\n<h2 id=\"4-vue-react-异同\"><a href=\"#4-vue-react-异同\" class=\"headerlink\" title=\"4 vue react 异同\"></a>4 vue react 异同</h2><h3 id=\"相同点\"><a href=\"#相同点\" class=\"headerlink\" title=\"相同点\"></a>相同点</h3><ol>\n<li>都使用虚拟DOM</li>\n<li>组件化思想</li>\n<li>专注于核心库，路由、全局状态管理则由配套库进行处理。</li>\n</ol>\n<h3 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h3><p><a href=\"https://juejin.cn/post/6844903668446134286\">Vue和React区别</a></p>\n<hr>\n<h2 id=\"5-受控组件与非受控组件\"><a href=\"#5-受控组件与非受控组件\" class=\"headerlink\" title=\"5 受控组件与非受控组件\"></a>5 受控组件与非受控组件</h2><h3 id=\"受控组件\"><a href=\"#受控组件\" class=\"headerlink\" title=\"受控组件\"></a>受控组件</h3><p>使 React 的 state 成为“唯一数据源”。渲染表单的 React 组件还控制着用户输入过程中表单发生的操作。被 React 以这种方式控制取值的表单输入元素就叫做“受控组件”。(用value和onChange控制输入元素)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">NameForm</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span> &#123;<br>  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">props</span>) &#123;<br>    <span class=\"hljs-variable language_\">super</span>(props);<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span> = &#123;<span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>&#125;;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">handleChange</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">handleChange</span>.<span class=\"hljs-title function_\">bind</span>(<span class=\"hljs-variable language_\">this</span>);<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">handleSubmit</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">handleSubmit</span>.<span class=\"hljs-title function_\">bind</span>(<span class=\"hljs-variable language_\">this</span>);<br>  &#125;<br><br>  <span class=\"hljs-title function_\">handleChange</span>(<span class=\"hljs-params\">event</span>) &#123;    <br>      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">setState</span>(&#123;<br>          <span class=\"hljs-attr\">value</span>: event.<span class=\"hljs-property\">target</span>.<span class=\"hljs-property\">value</span><br>      &#125;);  <br>  &#125;<br>  <span class=\"hljs-title function_\">handleSubmit</span>(<span class=\"hljs-params\">event</span>) &#123;<br>    <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">&#x27;提交的名字: &#x27;</span> + <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span>.<span class=\"hljs-property\">value</span>);<br>    event.<span class=\"hljs-title function_\">preventDefault</span>();<br>  &#125;<br><br>  <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-keyword\">return</span> (<br>      <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">onSubmit</span>=<span class=\"hljs-string\">&#123;this.handleSubmit&#125;</span>&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span>&gt;</span></span><br><span class=\"language-xml\">          名字:</span><br><span class=\"language-xml\">          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&#123;this.state.value&#125;</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">&#123;this.handleChange&#125;</span> /&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;submit&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;提交&quot;</span> /&gt;</span></span><br><span class=\"language-xml\">      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"非受控组件\"><a href=\"#非受控组件\" class=\"headerlink\" title=\"非受控组件\"></a>非受控组件</h3><p>使用非受控组件，这时表单数据将交由 DOM 节点来处理。不必为每个状态更新都编写数据处理函数，使用 ref 来从 DOM 节点中获取表单数据。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">NameForm</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span> &#123;<br>  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">props</span>) &#123;<br>    <span class=\"hljs-variable language_\">super</span>(props);<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">handleSubmit</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">handleSubmit</span>.<span class=\"hljs-title function_\">bind</span>(<span class=\"hljs-variable language_\">this</span>);<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">input</span> = <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-title function_\">createRef</span>();  &#125;<br><br>  <span class=\"hljs-title function_\">handleSubmit</span>(<span class=\"hljs-params\">event</span>) &#123;<br>    <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">&#x27;A name was submitted: &#x27;</span> + <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">input</span>.<span class=\"hljs-property\">current</span>.<span class=\"hljs-property\">value</span>);<br>    event.<span class=\"hljs-title function_\">preventDefault</span>();<br>  &#125;<br><br>  <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-keyword\">return</span> (<br>      <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">onSubmit</span>=<span class=\"hljs-string\">&#123;this.handleSubmit&#125;</span>&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span>&gt;</span></span><br><span class=\"language-xml\">          Name:</span><br><span class=\"language-xml\">          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&#123;this.input&#125;</span> /&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;submit&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;Submit&quot;</span> /&gt;</span></span><br><span class=\"language-xml\">      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"6-高阶组件\"><a href=\"#6-高阶组件\" class=\"headerlink\" title=\"6 高阶组件\"></a>6 高阶组件</h2><p><a href=\"https://segmentfault.com/a/1190000019153177\">HOC</a></p>\n<hr>\n<h2 id=\"7-Flux架构模式\"><a href=\"#7-Flux架构模式\" class=\"headerlink\" title=\"7 Flux架构模式\"></a>7 Flux架构模式</h2><h3 id=\"MVC\"><a href=\"#MVC\" class=\"headerlink\" title=\"MVC\"></a>MVC</h3><ol>\n<li>Model负责管理数据，大部分业务逻辑放在Model中</li>\n<li>View负责渲染用户界面，传送指令到 Controller</li>\n<li>Controller负责接收用户输入，根据用户输入调用对应的Model部分逻辑，把产生的数据结果交给View，让View渲染</li>\n</ol>\n<img src=\"mvc_model.png\" style=\"zoom:67%;\" />\n\n<p><font color='orangered'>缺点：实际开发中，总是允许View和Model直接通信，造成混乱的数据流</font></p>\n<img src=\"mvc_q.png\" style=\"zoom:50%;\" />\n\n<h3 id=\"MVVM\"><a href=\"#MVVM\" class=\"headerlink\" title=\"MVVM\"></a>MVVM</h3><p>MVVM是Model-View-ViewModel的简写。它本质上就是MVC 的改进版。MVVM 就是将其中的<code>View</code> 的状态和行为抽象化，让我们将视图 UI 和业务逻辑分开。，它可以取出 <code>Model</code> 的数据同时帮忙处理 <code>View</code> 中由于需要展示内容而涉及的业务逻辑。</p>\n<ol>\n<li>Model：代表的是模型、数据，可以在 Model 层中定义数据修改和操作的业务逻辑。</li>\n<li>View：代表的是视图，模版。它用来显示数据。</li>\n<li>ViewModel：MVVM模式的核心，它是连接view和model的桥梁。它有两个方向：<ol>\n<li>将<code>Model</code>转化成<code>View</code>，即将后端传递的数据转化成所看到的页面。实现的方式是：数据绑定。</li>\n<li>将<code>View</code>转化成<code>Model</code>，即将所看到的页面转化成后端的数据。实现的方式是：DOM 事件监听。</li>\n</ol>\n</li>\n</ol>\n<img src=\"mvvm_model.png\" style=\"zoom: 80%;\" />\n\n<p><font color='orange'>总结：</font><br>在MVVM的框架下视图View和模型Model是不能直接通信的。它们通过ViewModel来通信。<br>ViewModel通常要实现一个observer观察者，当数据发生变化，ViewModel能够监听到数据的这种变化，然后通知到对应的视图做自动更新。<br>而当用户操作视图，ViewModel也能监听到视图的变化，然后通知数据做改动。</p>\n<p><font color='red'>这称之为数据的双向绑定</font>。并且MVVM中的View 和 ViewModel可以互相通信</p>\n<p>缺点：</p>\n<ol>\n<li>数据绑定也使得bug很难被调试。比如页面异常了，有可能是View的代码有bug，也可能是model的代码有问题。数据绑定使得一个位置的Bug被快速传递到别的位置，要定位原始出问题的地方就变得不那么容易了。</li>\n<li>数据双向绑定不利于代码重用。客户端开发最常用的是View，但是数据双向绑定技术，让一个View都绑定了一个model，不同的模块model都不同。那就不能简单重用view了</li>\n<li>一个大的模块中，model也会很大，虽然使用方便了也很容易保证数据的一致性，但是长期持有，不释放内存就造成话费更多的内存</li>\n</ol>\n<h3 id=\"Flux\"><a href=\"#Flux\" class=\"headerlink\" title=\"Flux\"></a>Flux</h3><p><font color='orange'>Flux的核心思想就是数据和逻辑永远单向流动</font></p>\n<img src=\"flux.png\" style=\"zoom:80%;\" />\n\n<p>MVC最大的问题就是无法禁绝View和Model之间的直接对话。在Flux中，Store只有getter,没有setter，不可能直接修改Store内部状态，只能派发一个action对象给Dispatcher</p>\n<p>不足：</p>\n<ol>\n<li>store之间有依赖关系</li>\n<li>难以进行服务端渲染</li>\n<li>store混杂了逻辑和状态</li>\n</ol>\n<hr>\n<h2 id=\"8-Redux\"><a href=\"#8-Redux\" class=\"headerlink\" title=\"8 Redux\"></a>8 Redux</h2><h3 id=\"设计理念\"><a href=\"#设计理念\" class=\"headerlink\" title=\"设计理念\"></a>设计理念</h3><p>Web 应用就是状态与 UI 一一对应的关系，Redux 就是我们 Web 应用的一个状态管理方案。<br>单纯的从架构层面而言，UI 与状态完全分离，并且单向的数据流确保了状态可控。</p>\n<ul>\n<li>每一个 <code>State</code> 的变化可预测</li>\n<li>动作和状态统一管理</li>\n</ul>\n<h3 id=\"基本原则\"><a href=\"#基本原则\" class=\"headerlink\" title=\"基本原则\"></a>基本原则</h3><ol>\n<li><p>唯一数据源：应用的状态数据只存储在一个Store中</p>\n</li>\n<li><p>状态只读：修改状态必须通过派发action</p>\n</li>\n<li><p>数据改变只能通过纯函数完成：Reducer 就是纯函数，它接受当前的 state 和 action。然后返回一个新的 state。所以这里，state 不会更新，只会替换。</p>\n<p>保持 reducer 纯净非常重要。<strong>永远不要</strong>在 reducer 里做这些操作：</p>\n<ul>\n<li>修改传入参数；</li>\n<li>执行有副作用的操作，如 API 请求和路由跳转；</li>\n<li>调用非纯函数，如 <code>Date.now()</code> 或 <code>Math.random()</code>。</li>\n</ul>\n<p>reducer 一定要保持纯净。<strong>只要传入参数相同，返回计算得到的下一个 state 就一定相同。没有特殊情况、没有副作用，没有 API 请求、没有变量修改，单纯执行计算。</strong></p>\n</li>\n</ol>\n<hr>\n<h2 id=\"9-PureComponent-与-shouldComponentUpdate\"><a href=\"#9-PureComponent-与-shouldComponentUpdate\" class=\"headerlink\" title=\"9 PureComponent 与 shouldComponentUpdate\"></a>9 PureComponent 与 shouldComponentUpdate</h2><p>如果一个组件只和props和state有关系，给定相同的props和state就会渲染相同的结果，那么这个组件就叫作<strong>纯组件</strong>。</p>\n<p>普通组件可以通过在shouldComponentUpdate中对比决定是否更新，节约性能。</p>\n<p>PureComponent 实现了shouldComponentUpdate，对props和state的“浅比较”，组件会自动判断是否重新渲染。</p>\n<hr>\n<h2 id=\"10-React-Fiber\"><a href=\"#10-React-Fiber\" class=\"headerlink\" title=\"10 React Fiber\"></a>10 React Fiber</h2><p><a href=\"https://juejin.cn/post/6844904193958887431#heading-8\">由浅入深React的Fiber架构</a><br><a href=\"https://segmentfault.com/a/1190000022995622\">手写React的Fiber架构，深入理解其原理</a></p>\n<p>React的diff算法是同步的，如果有大量深度嵌套节点需要更新，React diff递归对比vDom，JS线程的运行时间会比较长，阻塞浏览器响应。</p>\n<ul>\n<li><p>Fiber是一个执行单元</p>\n<p>Fiber可以将长时间的同步任务<font color='orange'>拆分成多个小任务</font>，从而让浏览器能够抽身去响应其他事件，等进程空了再回来继续计算，使用 requestIdleCallback</p>\n<img src=\"react fiber 1.webp\" style=\"zoom:50%;\" />\n</li>\n<li><p>Fiber也是一种数据结构</p>\n<p><font color='orange'>可以随时中断</font>，下次进来可以接着执行。Fiber改造了树结构，加上了指向父节点和兄弟节点的指针，变为一个链表</p>\n<ol>\n<li><strong>child</strong>: 父节点指向<strong>第一个子元素</strong>的指针。</li>\n<li><strong>sibling</strong>：从第一个子元素往后，指向下一个兄弟元素。</li>\n<li><strong>return</strong>：所有子元素都有的指向父元素的指针。</li>\n</ol>\n<p>有了这几个指针后，可以在任意一个元素中断遍历并恢复。</p>\n<img src=\"react fiber 2.webp\"  /></li>\n</ul>\n<hr>\n<h2 id=\"11-React-Hooks的作用及原理\"><a href=\"#11-React-Hooks的作用及原理\" class=\"headerlink\" title=\"11 React Hooks的作用及原理\"></a>11 React Hooks的作用及原理</h2><p><a href=\"https://segmentfault.com/a/1190000021057476\">五分钟带你了解 React Hooks 工作原理</a></p>\n<p><a href=\"https://juejin.cn/post/6844903975838285838\">一文彻底搞懂react hooks的原理和实现</a></p>\n<p>Hook 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性</p>\n<ol>\n<li>useState 是基于 Array+Cursor 来实现。当调用 useState 的时候，传入一个state值，返回形如 <code>(变量, 函数)</code> 的一个元祖，自动调用<code>render</code>方法来触发视图更新<ul>\n<li>第一次渲染时候，根据 useState 顺序，逐个声明 state 并且将其放入全局 Array 中。每次声明 state，都要将 cursor 增加 1。</li>\n<li>更新 state，触发再次渲染的时候。<strong>cursor 被重置为 0</strong>。按照 useState 的声明顺序，依次拿出最新的 state 的值，视图更新</li>\n</ul>\n</li>\n<li>useEffect 可以让你在函数组件中执行副作用操作，数据获取，设置订阅以及手动更改 React 组件中的 DOM 都属于副作用，<strong>useEffect 能根据需要，避免多余的 render</strong></li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">let</span> memoizedState = []; <span class=\"hljs-comment\">// hooks 存放在这个数组</span><br><span class=\"hljs-keyword\">let</span> cursor = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// 当前 memoizedState 下标</span><br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-params\">initialValue</span>) &#123;<br>  memoizedState[cursor] = memoizedState[cursor] || initialValue;<br>  <span class=\"hljs-keyword\">const</span> currentCursor = cursor;<br>  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">setState</span>(<span class=\"hljs-params\">newState</span>) &#123;<br>    memoizedState[currentCursor] = newState;<br>    <span class=\"hljs-title function_\">render</span>();<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> [memoizedState[cursor++], setState]; <span class=\"hljs-comment\">// 返回当前 state，并把 cursor 加 1</span><br>&#125;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-params\">callback, depArray</span>) &#123;<br>  <span class=\"hljs-keyword\">const</span> hasNoDeps = !depArray;<br>  <span class=\"hljs-keyword\">const</span> deps = memoizedState[cursor];<br>  <span class=\"hljs-keyword\">const</span> hasChangedDeps = deps<br>    ? !depArray.<span class=\"hljs-title function_\">every</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">el, i</span>) =&gt;</span> el === deps[i])<br>    : <span class=\"hljs-literal\">true</span>;<br>  <br>  <span class=\"hljs-keyword\">if</span> (hasNoDeps || hasChangedDeps) &#123;<br>    <span class=\"hljs-title function_\">callback</span>();<br>    memoizedState[cursor] = depArray;<br>  &#125;<br>  <br>  cursor++;<br>&#125;<br><span class=\"hljs-number\">10.31</span> test git<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"计算机基础\"><a href=\"#计算机基础\" class=\"headerlink\" title=\"计算机基础\"></a>计算机基础</h1><h2 id=\"1-进程和线程\"><a href=\"#1-进程和线程\" class=\"headerlink\" title=\"1 进程和线程\"></a>1 进程和线程</h2><p>进程：指在系统中运行的一个应用程序，<font color='red'>是系统进行资源分配和调度的基本单位</font>。每个进程都有自己的独立内存空间.</p>\n<p>线程：是进程的子任务，进程之内独立执行的一个单元执行流，<font color='red'>是CPU调度和分派的基本单位</font>。</p>\n<p><a href=\"https://juejin.cn/post/6844903801321685000\">一篇让你明白进程与线程之间的区别与联系</a></p>\n<p><a href=\"https://www.cnblogs.com/fanguangdexiaoyuer/p/10834737.html#_label5\">进程间通信和线程间通信的几种方式</a></p>\n<hr>\n<h1 id=\"TypeScript笔记\"><a href=\"#TypeScript笔记\" class=\"headerlink\" title=\"TypeScript笔记\"></a>TypeScript笔记</h1><p><strong>声明语句中只能定义类型，切勿在声明语句中定义具体的实现</strong></p>\n<h2 id=\"什么是声明文件\"><a href=\"#什么是声明文件\" class=\"headerlink\" title=\"什么是声明文件\"></a>什么是声明文件</h2><p>通常我们会把声明语句放到一个单独的文件（<code>jQuery.d.ts</code>）中，这就是声明文件。声明文件必需以 <code>.d.ts</code> 为后缀</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">// src/jQuery.d.ts</span><br><span class=\"hljs-keyword\">declare</span> <span class=\"hljs-keyword\">var</span> <span class=\"hljs-attr\">jQuery</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">selector: <span class=\"hljs-built_in\">string</span></span>) =&gt;</span> <span class=\"hljs-built_in\">any</span>;<br><br><span class=\"hljs-comment\">// src/index.ts</span><br><span class=\"hljs-title function_\">jQuery</span>(<span class=\"hljs-string\">&#x27;#foo&#x27;</span>);<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"书写声明文件\"><a href=\"#书写声明文件\" class=\"headerlink\" title=\"书写声明文件\"></a>书写声明文件</h2><h3 id=\"全局变量\"><a href=\"#全局变量\" class=\"headerlink\" title=\"全局变量\"></a>全局变量</h3><p>全局变量的声明文件主要有以下几种语法（<font color=\"red\"><strong>就是使用declare声明类型</strong></font>）：</p>\n<ul>\n<li><a href=\"https://ts.xcatliu.com/basics/declaration-files.html#declare-var\"><code>declare var/let/const</code></a> 声明全局变量</li>\n<li><a href=\"https://ts.xcatliu.com/basics/declaration-files.html#declare-function\"><code>declare function</code></a> 声明全局方法</li>\n<li><a href=\"https://ts.xcatliu.com/basics/declaration-files.html#declare-class\"><code>declare class</code></a> 声明全局类</li>\n<li><a href=\"https://ts.xcatliu.com/basics/declaration-files.html#declare-enum\"><code>declare enum</code></a> 声明全局枚举类型</li>\n<li><a href=\"https://ts.xcatliu.com/basics/declaration-files.html#declare-namespace\"><code>declare namespace</code></a> 声明（含有子属性的）全局对象</li>\n<li><a href=\"https://ts.xcatliu.com/basics/declaration-files.html#interface-he-type\"><code>interface</code> 和 <code>type</code></a> 声明全局类型（<font color=\"red\"><strong>不用declare</strong></font>）</li>\n</ul>\n<p><font color=\"red\"><strong>注意点：</strong></font></p>\n<ol>\n<li><p>declare namespace内部直接使用 <code>function ajax</code> 来声明函数，而不是使用 <code>declare function ajax</code>。类似的，也可以使用 <code>const</code>, <code>class</code>, <code>enum</code> 等语句</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">// src/jQuery.d.ts</span><br><span class=\"hljs-keyword\">declare</span> <span class=\"hljs-keyword\">namespace</span> jQuery &#123;<br>    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">ajax</span>(<span class=\"hljs-params\">url: <span class=\"hljs-built_in\">string</span>, settings?: <span class=\"hljs-built_in\">any</span></span>): <span class=\"hljs-built_in\">void</span>;<br>    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">version</span>: <span class=\"hljs-built_in\">number</span>;<br>    <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Event</span> &#123;<br>        <span class=\"hljs-title function_\">blur</span>(<span class=\"hljs-attr\">eventType</span>: <span class=\"hljs-title class_\">EventType</span>): <span class=\"hljs-built_in\">void</span><br>    &#125;<br>    <span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title class_\">EventType</span> &#123;<br>        <span class=\"hljs-title class_\">CustomClick</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>类型声明文件中，可以直接使用 <code>interface</code> 或 <code>type</code> 来声明一个全局的接口或类型，<font color=\"red\"><strong>不用declare</strong></font>，在其他文件中也可以使用这个接口或类型</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">// src/jQuery.d.ts</span><br><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">AjaxSettings</span> &#123;<br>    method?: <span class=\"hljs-string\">&#x27;GET&#x27;</span> | <span class=\"hljs-string\">&#x27;POST&#x27;</span><br>    data?: <span class=\"hljs-built_in\">any</span>;<br>&#125;<br><span class=\"hljs-keyword\">declare</span> <span class=\"hljs-keyword\">namespace</span> jQuery &#123;<br>    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">ajax</span>(<span class=\"hljs-params\">url: <span class=\"hljs-built_in\">string</span>, settings?: AjaxSettings</span>): <span class=\"hljs-built_in\">void</span>;<br>&#125;<br><br><span class=\"hljs-comment\">// src/index.ts</span><br><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">settings</span>: <span class=\"hljs-title class_\">AjaxSettings</span> = &#123;<br>    <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">&#x27;POST&#x27;</span>,<br>    <span class=\"hljs-attr\">data</span>: &#123;<br>        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;foo&#x27;</span><br>    &#125;<br>&#125;;<br>jQuery.<span class=\"hljs-title function_\">ajax</span>(<span class=\"hljs-string\">&#x27;/api/post_something&#x27;</span>, settings);<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>暴露在最外层的 <code>interface</code> 或 <code>type</code> 会作为全局类型作用于整个项目中，故最好将他们放到 <code>namespace</code> 下</p>\n</li>\n<li><p>声明合并：可以组合多个声明语句，它们会不冲突的合并起来</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">// src/jQuery.d.ts</span><br><span class=\"hljs-keyword\">declare</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">jQuery</span>(<span class=\"hljs-params\">selector: <span class=\"hljs-built_in\">string</span></span>): <span class=\"hljs-built_in\">any</span>;<br><span class=\"hljs-keyword\">declare</span> <span class=\"hljs-keyword\">namespace</span> jQuery &#123;<br>    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">ajax</span>(<span class=\"hljs-params\">url: <span class=\"hljs-built_in\">string</span>, settings?: <span class=\"hljs-built_in\">any</span></span>): <span class=\"hljs-built_in\">void</span>;<br>&#125;<br><br><span class=\"hljs-comment\">// src/index.ts</span><br><span class=\"hljs-title function_\">jQuery</span>(<span class=\"hljs-string\">&#x27;#foo&#x27;</span>);<br>jQuery.<span class=\"hljs-title function_\">ajax</span>(<span class=\"hljs-string\">&#x27;/api/get_something&#x27;</span>);<br></code></pre></td></tr></table></figure></li>\n</ol>\n<hr>\n<h3 id=\"npm-包\"><a href=\"#npm-包\" class=\"headerlink\" title=\"npm 包\"></a>npm 包</h3><ul>\n<li>声明文件位置：</li>\n</ul>\n<ol>\n<li>与该 npm 包绑定在一起。 <code>package.json</code> 中有 <code>types</code> 字段，或者有一个 <code>index.d.ts</code> 声明文件</li>\n<li>发布到 <code>@types</code> 里。尝试安装一下对应的 <code>@types</code> 包， &#96;npm install @types&#x2F;foo –save-dev</li>\n</ol>\n<ul>\n<li><p>npm 包的声明文件主要有以下几种语法：</p>\n<p><a href=\"https://ts.xcatliu.com/basics/declaration-files.html#export\"><code>export</code></a> 导出变量</p>\n<p><a href=\"https://ts.xcatliu.com/basics/declaration-files.html#export-namespace\"><code>export namespace</code></a> 导出（含有子属性的）对象</p>\n<p><a href=\"https://ts.xcatliu.com/basics/declaration-files.html#export-default\"><code>export default</code></a> ES6 默认导出</p>\n<p><a href=\"https://ts.xcatliu.com/basics/declaration-files.html#export-1\"><code>export =</code></a> commonjs 导出模块</p>\n</li>\n<li><p>在 npm 包的声明文件中，<font color=\"red\">使用 <code>declare</code> 不再会声明一个全局变量</font>，而只会在当前文件中声明一个局部变量。只有在声明文件中使用 <code>export</code> 导出，然后在使用方 <code>import</code> 导入后，才会应用到这些类型声明。</p>\n</li>\n</ul>\n<p><font color=\"red\"><strong>用法:</strong></font></p>\n<p>直接<code>export</code>导出类型</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">// types/foo/index.d.ts</span><br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span>;<br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getName</span>(<span class=\"hljs-params\"></span>): <span class=\"hljs-built_in\">string</span>;<br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Animal</span> &#123;<br>    <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">name: <span class=\"hljs-built_in\">string</span></span>);<br>    <span class=\"hljs-title function_\">sayHi</span>(): <span class=\"hljs-built_in\">string</span>;<br>&#125;<br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title class_\">Directions</span> &#123;<br>    <span class=\"hljs-title class_\">Up</span>,<br>    <span class=\"hljs-title class_\">Down</span>,<br>    <span class=\"hljs-title class_\">Left</span>,<br>    <span class=\"hljs-title class_\">Right</span><br>&#125;<br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Options</span> &#123;<br>    <span class=\"hljs-attr\">data</span>: <span class=\"hljs-built_in\">any</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>使用 <code>declare</code> 先声明多个变量，用 <code>export</code> 导出</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">// types/foo/index.d.ts</span><br><br><span class=\"hljs-keyword\">declare</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span>;<br><span class=\"hljs-keyword\">declare</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getName</span>(<span class=\"hljs-params\"></span>): <span class=\"hljs-built_in\">string</span>;<br><span class=\"hljs-keyword\">declare</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Animal</span> &#123;<br>    <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">name: <span class=\"hljs-built_in\">string</span></span>);<br>    <span class=\"hljs-title function_\">sayHi</span>(): <span class=\"hljs-built_in\">string</span>;<br>&#125;<br><span class=\"hljs-keyword\">declare</span> <span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title class_\">Directions</span> &#123;<br>    <span class=\"hljs-title class_\">Up</span>,<br>    <span class=\"hljs-title class_\">Down</span>,<br>    <span class=\"hljs-title class_\">Left</span>,<br>    <span class=\"hljs-title class_\">Right</span><br>&#125;<br><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Options</span> &#123;<br>    <span class=\"hljs-attr\">data</span>: <span class=\"hljs-built_in\">any</span>;<br>&#125;<br><br><span class=\"hljs-keyword\">export</span> &#123; name, getName, <span class=\"hljs-title class_\">Animal</span>, <span class=\"hljs-title class_\">Directions</span>, <span class=\"hljs-title class_\">Options</span> &#125;;<br></code></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"声明文件中的依赖\"><a href=\"#声明文件中的依赖\" class=\"headerlink\" title=\"声明文件中的依赖\"></a>声明文件中的依赖</h3><p>一个声明文件有时会依赖另一个声明文件中的类型。除了可以在声明文件中通过 <code>import</code> 导入另一个声明文件中的类型之外，还可以使用三斜线指令。</p>\n<ul>\n<li><p>书写一个全局变量的声明文件时</p>\n<p>全局变量的声明文件中，是不允许出现 <code>import</code>, <code>export</code> 关键字的。一旦出现了，那么他就会被视为一个 npm 包或 UMD 库，就不再是全局变量的声明文件了。故当我们在书写一个全局变量的声明文件时，如果需要引用另一个库的类型，那么就必须用三斜线指令</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">// types/jquery-plugin/index.d.ts</span><br><br><span class=\"hljs-comment\">/// &lt;reference types=&quot;jquery&quot; /&gt;</span><br><br><span class=\"hljs-keyword\">declare</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">foo</span>(<span class=\"hljs-params\">options: JQuery.AjaxSettings</span>): <span class=\"hljs-built_in\">string</span>;<br><br><span class=\"hljs-comment\">// src/index.ts</span><br><span class=\"hljs-title function_\">foo</span>(&#123;&#125;);<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>需要依赖一个全局变量的声明文件时</p>\n<p>需要依赖一个全局变量的声明文件时，由于全局变量不支持通过 <code>import</code> 导入，当然也就必须使用三斜线指令来引入</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">// types/node-plugin/index.d.ts</span><br><br><span class=\"hljs-comment\">/// &lt;reference types=&quot;node&quot; /&gt;</span><br><br><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">foo</span>(<span class=\"hljs-params\">p: NodeJS.Process</span>): <span class=\"hljs-built_in\">string</span>;<br><br><span class=\"hljs-comment\">// src/index.ts</span><br><span class=\"hljs-keyword\">import</span> &#123; foo &#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;node-plugin&#x27;</span>;<br><br><span class=\"hljs-title function_\">foo</span>(<span class=\"hljs-variable language_\">global</span>.<span class=\"hljs-property\">process</span>);<br></code></pre></td></tr></table></figure></li>\n</ul>\n"}],"PostAsset":[{"_id":"source\\_posts\\issues\\16eea8822b4d1239.jpg","slug":"16eea8822b4d1239.jpg","post":"clxh8kkpo0002nwufgfvn4ixu","modified":0,"renderable":0},{"_id":"source\\_posts\\issues\\20191119212535220.png","slug":"20191119212535220.png","post":"clxh8kkpo0002nwufgfvn4ixu","modified":0,"renderable":0},{"_id":"source\\_posts\\issues\\20201116121851148.png","slug":"20201116121851148.png","post":"clxh8kkpo0002nwufgfvn4ixu","modified":0,"renderable":0},{"_id":"source\\_posts\\issues\\640.png","slug":"640.png","post":"clxh8kkpo0002nwufgfvn4ixu","modified":0,"renderable":0},{"_id":"source\\_posts\\issues\\BOM.png","slug":"BOM.png","post":"clxh8kkpo0002nwufgfvn4ixu","modified":0,"renderable":0},{"_id":"source\\_posts\\issues\\cookie session.jpg","slug":"cookie session.jpg","post":"clxh8kkpo0002nwufgfvn4ixu","modified":0,"renderable":0},{"_id":"source\\_posts\\issues\\cookie字段.bmp","slug":"cookie字段.bmp","post":"clxh8kkpo0002nwufgfvn4ixu","modified":0,"renderable":0},{"_id":"source\\_posts\\issues\\display opacity visibility 对比.png","slug":"display opacity visibility 对比.png","post":"clxh8kkpo0002nwufgfvn4ixu","modified":0,"renderable":0},{"_id":"source\\_posts\\issues\\Expires.png","slug":"Expires.png","post":"clxh8kkpo0002nwufgfvn4ixu","modified":0,"renderable":0},{"_id":"source\\_posts\\issues\\flux.png","slug":"flux.png","post":"clxh8kkpo0002nwufgfvn4ixu","modified":0,"renderable":0},{"_id":"source\\_posts\\issues\\https-intro.png","slug":"https-intro.png","post":"clxh8kkpo0002nwufgfvn4ixu","modified":0,"renderable":0},{"_id":"source\\_posts\\issues\\https.jpg","slug":"https.jpg","post":"clxh8kkpo0002nwufgfvn4ixu","modified":0,"renderable":0},{"_id":"source\\_posts\\issues\\HTTP报文结构.jpg","slug":"HTTP报文结构.jpg","post":"clxh8kkpo0002nwufgfvn4ixu","modified":0,"renderable":0},{"_id":"source\\_posts\\issues\\http方法.bmp","slug":"http方法.bmp","post":"clxh8kkpo0002nwufgfvn4ixu","modified":0,"renderable":0},{"_id":"source\\_posts\\issues\\http状态码.bmp","slug":"http状态码.bmp","post":"clxh8kkpo0002nwufgfvn4ixu","modified":0,"renderable":0},{"_id":"source\\_posts\\issues\\HTTP非持久化.jpg","slug":"HTTP非持久化.jpg","post":"clxh8kkpo0002nwufgfvn4ixu","modified":0,"renderable":0},{"_id":"source\\_posts\\issues\\mvc_model.png","slug":"mvc_model.png","post":"clxh8kkpo0002nwufgfvn4ixu","modified":0,"renderable":0},{"_id":"source\\_posts\\issues\\mvc_q.png","slug":"mvc_q.png","post":"clxh8kkpo0002nwufgfvn4ixu","modified":0,"renderable":0},{"_id":"source\\_posts\\issues\\mvvm_model.png","slug":"mvvm_model.png","post":"clxh8kkpo0002nwufgfvn4ixu","modified":0,"renderable":0},{"_id":"source\\_posts\\issues\\proto.png","slug":"proto.png","post":"clxh8kkpo0002nwufgfvn4ixu","modified":0,"renderable":0},{"_id":"source\\_posts\\issues\\react fiber 1.webp","slug":"react fiber 1.webp","post":"clxh8kkpo0002nwufgfvn4ixu","modified":0,"renderable":0},{"_id":"source\\_posts\\issues\\react fiber 2.webp","slug":"react fiber 2.webp","post":"clxh8kkpo0002nwufgfvn4ixu","modified":0,"renderable":0},{"_id":"source\\_posts\\issues\\readystate.bmp","slug":"readystate.bmp","post":"clxh8kkpo0002nwufgfvn4ixu","modified":0,"renderable":0},{"_id":"source\\_posts\\issues\\tcp udp的应用.png","slug":"tcp udp的应用.png","post":"clxh8kkpo0002nwufgfvn4ixu","modified":0,"renderable":0},{"_id":"source\\_posts\\issues\\tcp三次握手.jpg","slug":"tcp三次握手.jpg","post":"clxh8kkpo0002nwufgfvn4ixu","modified":0,"renderable":0},{"_id":"source\\_posts\\issues\\tcp四次挥手.png","slug":"tcp四次挥手.png","post":"clxh8kkpo0002nwufgfvn4ixu","modified":0,"renderable":0},{"_id":"source\\_posts\\issues\\原始数据类型.png","slug":"原始数据类型.png","post":"clxh8kkpo0002nwufgfvn4ixu","modified":0,"renderable":0},{"_id":"source\\_posts\\issues\\响应首部字段.bmp","slug":"响应首部字段.bmp","post":"clxh8kkpo0002nwufgfvn4ixu","modified":0,"renderable":0},{"_id":"source\\_posts\\issues\\回流和重绘.png","slug":"回流和重绘.png","post":"clxh8kkpo0002nwufgfvn4ixu","modified":0,"renderable":0},{"_id":"source\\_posts\\issues\\圣杯和双飞翼.jpg","slug":"圣杯和双飞翼.jpg","post":"clxh8kkpo0002nwufgfvn4ixu","modified":0,"renderable":0},{"_id":"source\\_posts\\issues\\实体首部字段.bmp","slug":"实体首部字段.bmp","post":"clxh8kkpo0002nwufgfvn4ixu","modified":0,"renderable":0},{"_id":"source\\_posts\\issues\\引用数据类型.png","slug":"引用数据类型.png","post":"clxh8kkpo0002nwufgfvn4ixu","modified":0,"renderable":0},{"_id":"source\\_posts\\issues\\总结几种常见web攻击手段及其防御方式 - jiajun_geek - 博客园.pdf","slug":"总结几种常见web攻击手段及其防御方式 - jiajun_geek - 博客园.pdf","post":"clxh8kkpo0002nwufgfvn4ixu","modified":0,"renderable":0},{"_id":"source\\_posts\\issues\\报文实例.jpg","slug":"报文实例.jpg","post":"clxh8kkpo0002nwufgfvn4ixu","modified":0,"renderable":0},{"_id":"source\\_posts\\issues\\浏览器缓存.png","slug":"浏览器缓存.png","post":"clxh8kkpo0002nwufgfvn4ixu","modified":0,"renderable":0},{"_id":"source\\_posts\\issues\\生命周期.webp","slug":"生命周期.webp","post":"clxh8kkpo0002nwufgfvn4ixu","modified":0,"renderable":0},{"_id":"source\\_posts\\issues\\生命周期2.bmp","slug":"生命周期2.bmp","post":"clxh8kkpo0002nwufgfvn4ixu","modified":0,"renderable":0},{"_id":"source\\_posts\\issues\\缓存响应指令.png","slug":"缓存响应指令.png","post":"clxh8kkpo0002nwufgfvn4ixu","modified":0,"renderable":0},{"_id":"source\\_posts\\issues\\缓存请求指令.png","slug":"缓存请求指令.png","post":"clxh8kkpo0002nwufgfvn4ixu","modified":0,"renderable":0},{"_id":"source\\_posts\\issues\\请求报文和响应报文.jpg","slug":"请求报文和响应报文.jpg","post":"clxh8kkpo0002nwufgfvn4ixu","modified":0,"renderable":0},{"_id":"source\\_posts\\issues\\请求首部字段.bmp","slug":"请求首部字段.bmp","post":"clxh8kkpo0002nwufgfvn4ixu","modified":0,"renderable":0},{"_id":"source\\_posts\\issues\\通用首部字段.bmp","slug":"通用首部字段.bmp","post":"clxh8kkpo0002nwufgfvn4ixu","modified":0,"renderable":0},{"_id":"source\\_posts\\issues\\面试专题总结：手撕代码.pdf","slug":"面试专题总结：手撕代码.pdf","post":"clxh8kkpo0002nwufgfvn4ixu","modified":0,"renderable":0}],"PostCategory":[{"post_id":"clxh8kkpm0001nwuf8tlj8k3y","category_id":"clxh8kkpp0003nwufetosgoaf","_id":"clxh8kkps0008nwuf5vki66ax"},{"post_id":"clxh8kkpo0002nwufgfvn4ixu","category_id":"clxh8kkpr0005nwuf70s0d2cj","_id":"clxh8kkps000anwuf71c479uj"}],"PostTag":[{"post_id":"clxh8kkpm0001nwuf8tlj8k3y","tag_id":"clxh8kkpr0004nwuf19y1c4jt","_id":"clxh8kkps0007nwuf0gekdau5"},{"post_id":"clxh8kkpo0002nwufgfvn4ixu","tag_id":"clxh8kkps0006nwufej8l6607","_id":"clxh8kkps0009nwuffie1gwi5"}],"Tag":[{"name":"test","_id":"clxh8kkpr0004nwuf19y1c4jt"},{"name":"八股","_id":"clxh8kkps0006nwufej8l6607"}]}}